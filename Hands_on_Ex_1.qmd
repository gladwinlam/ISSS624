---
title: "Hands-on Exercise 1"
editor: visual
---

## Overview

Doing Geo spatial Analysis


```{r}
pacman::p_load(sf, tidyverse)  #load more than 1 library one shot
```

Import into Polygon data Frame
```{r}
mpsz = st_read(dsn = "Hands-on_Ex01/data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")

```

CRS is coordinate system. SVY21 coordinate system
323 polygon features
15 fields


Import into line feature data Frame
```{r}
cyclingpath = st_read(dsn = "Hands-on_Ex01/data/geospatial", 
                         layer = "CyclingPathGazette")
```

Importing kml data frame
```{r}
preschool = st_read("Hands-on_Ex01/data/geospatial/pre-schools-location-kml.kml")

```
CRS is WGS84 system

Accessing the column geometries which is in class SFC
```{r}
st_geometry(mpsz)
```

Learning more about attribute of of dataframe. Glimpse is from tidyverse
```{r}
glimpse(mpsz)
```


```{r}
head(mpsz, 5)
```

## Plotting each attribute based on geospatial

```{r}
plot(mpsz, max.plot = 15)
```
Plot only geometry (only want the outline and nothing else)

```{r}
plot(st_geometry(mpsz))
```
Plotting specific attribute

```{r}
plot(mpsz["PLN_AREA_N"])
```


```{r}
mpsz["PLN_AREA_N"]
```

## Interlaying features with different Coordinate Systems

Need to transform different coordinate systems into same one

Sometimes during importing, the coordinate system might be wrong. need to check using st_crs()

```{r}
st_crs(mpsz) #SVY21 should be 3414 but in here is it 9001. SO wrongly tagged
```


```{r}
mpsz3414 <- st_set_crs(mpsz, 3414) #change the code back to 3414
st_crs(mpsz3414) #checked and changed
```

To calculate distance you need projected coorindate systems (2D) vs geographic coordinate system (flat)


```{r}
st_geometry(preschool) #check geometry of preschool
```

From one coordinate system to another need to reproject. Use ST_transform, cannot just use set_crs().This method does not reproject.
```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
st_geometry(preschool3414)
```

### Aspatial Data

Not geospatial but 2 columns with x and y axis

```{r}
listings <- as_tibble(read.csv("Hands-on_Ex01/data/aspatial/listings.csv"))
head(listings)
```


```{r}
list(listings)
colnames(listings)
```


```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude","latitude"),
         crs = 4326) %>%
  st_transform(crs = 3414)
```
- coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

- crs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other countryâ€™s epsg code by referring to epsg.io.

- %>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```


```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)

#create new column
buffer_cycling$AREA <- st_area(buffer_cycling)

#Sum area
sum(buffer_cycling$AREA)
```

Count number of preschool on topi each planning zone

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```


```{r}
summary(mpsz3414$`PreSch Count`)
```


```{r}
plot(mpsz3414['PreSch Count'])
```


```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```


```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()

mpsz3414$Area
```


```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```


```{r}
hist(mpsz3414$`PreSch Density`)
```


```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`))) +
  geom_histogram(bins=20, 
                 color = 'black',
                 fill = 'light blue')+
  labs(title = "Are pre-school evenly distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are a few planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")

```


```{r}
ggplot(data = mpsz3414, 
       aes( x = as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) + 
  geom_point(size = 1.5, color = 'pink', shape = 23) +
  labs(  x = "Pre-school density (per km sq)",
         y = "Pre-school count")

```

