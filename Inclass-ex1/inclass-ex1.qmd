---
title: "Inclass Excercise 1"
editor: visual
---

# Overview

In this section. I will showcase how to compute spatial weights and how to apply spatial weights in a real world context.

In this tutorial, we will be using these packages: **sf, readr, dplyr, spdep**

## 1. Getting Started

The code chunk below will install and load the sf, readr, dplyr and spdep packages

```{r}
pacman::p_load(sf,tidyverse, spdep, tmap)
```

Next, we will read in the data for this exercise.

The data type of this file is in shapefile format. We will use the st_read() function of the sf package to import the file. Output will be a simple features object.

```{r}
hunan <- st_read(dsn = "data/geospatial",
                layer = "Hunan")
```

```{r}
hunan
```

For the other file, it is in csv format. We can use read_csv() from readr package to import the file.

```{r}
hunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')
head(hunan2012, 7)
```

## 2. Data Manipulation

We will join the SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. They are joined by row level.

```{r}
hunan <- left_join(hunan, hunan2012)
head(hunan, 5)
```

## 3. Visualizing Regional Development Indicator

In this section, we will be creating a base map and a coloured map known as choropleth map.

A choropleth map is a thematic map that uses the gradient of a colour to indicate the variation of a variable across the geographical locations.

We will use qtm( ) function of tmap function to visualize the GDP per capital pattern across the geographical location of Hunan!

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan, "GDPPC")
gdppc
```

If we want to display basemap and choropleth map together, we can use tmap_arange() function.

```{r}
tmap_arrange(basemap, gdppc, asp = 1, ncol = 2) # one row, 2 columns

```

## 4. Computing Contiguity Spatial Weights

Contiguity means 2 spatial units share a common border. There are several ways accounting the sharing of border.

### 4.1 Queens Contiguity Method

One is rook's method and another queen's method. Either which, it will express the structure in a matrix W.

![](images/Screenshot%202022-11-24%20at%2012.38.53%20AM.png){fig-align="center" width="356"}

wij refers to the neighbouring effect between spatial unit i and spatial unit j. wii will be zero as there is no effect with itself. Wij is a binary element. However usually in practice we do row standardisation and it is computed by wij/sum of wij across row j.

We will use poly2nb() from spdep package to compute the contiguity weight matrix. We can make use of the "queen" argument to decide if we want to account for neighbour effect using queen. By default it is True.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q) # checking neighbouring effect
```

How do we interpret the results above?

There are 88 spatial units in Hunan. The most connected spatial unit (85) has 11 neighbors. There are two spatial units (30 & 65) with only one neighbors.

We can also check the neighbors of a specified spatial units

```{r}
wm_q[[1]]   #It is connected with spatial unit 2, 3, 4, 57, 85
```

To extract county name

```{r}
hunan$County[1]
```

To extract multiple names, we can define a vector

```{r}
#Neighbors of 1
hunan$NAME_3[c(2, 3, 4, 57, 85)]
```

To find the GDP per capital of these neighbors of 1 using queen's contiguity method

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

If we want to view entire spatial weight matrix, W, we can use str() function

```{r}
str(wm_q)
```

### 4.2 Rook Contiguity Method

We compute the contiguity weight matrix using the Rook's method.

```{r}
wm_r <- poly2nb(hunan, queen = FALSE)
summary(wm_r)
```

### 4.3 Visualising Contiguity Weights

We can connect a spatial unit to its neighbour using lines. To do so we will need to compute centroids of each spatial unit and connect to its neighbors using the centroids.

Centroids can be calculated using st_centroid() function. We will use a map function to map each element of human\$geometry through st_centroid() function.

```{r}
#[1] is longitude
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
#[2] is latitude
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

We bind the longitude and latitude together

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```

We can control the size of dot using cex and marker design using pch.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### 4.4 Plotting Queen and Rook Contiguity based neighbor maps side by side

We use par() function to control the subplots. Left is queen, right is rook's.

**mfrow:** determines a vector with row and column values for the grid.

```{r}
par(mfrow = c(1,2)) # 1row, 2 columns

plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")

plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")

```

## 5. Computing distance based neighbors weights

Another way of representing neighbours can be done computing distanced based weight matrices. Only neighbours that fall within a defined range of Euclidean distance will be accounted for.

First, we find the k nearest neighbors of the coordinates. We can use k parameter to set how many neighbours we want to look at.

```{r}
knearneigh(coords, k=10)
```

We convert the knearneigh() returned into a neighbour list object

```{r}
k1 <- knn2nb(knearneigh(coords))
```

We calculate the distance using nbdists() and remove the list format using unlist(). We can see the maximum distance is 61.79km.

```{r}
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

We compute distance matrix, using dnearneigh() and set upper and lower bound of the distance.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
str(wm_d62)
```

We can also view number of neighbours of each county using table() and card()

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc

table(n_comp$comp.id)
```

### 5.1 Plotting Fixed Distance Weight Matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

We can also plot both of them side by side. Left is 1st nearest neighbour, 2nd is within 0-62km range.

```{r}
par(mfrow=c(1,2))

plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")

plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")

```

### 5.2 Plotting Adaptive Distance Weight Matrix

Dense areas will have neighbors than sparse area. We can set number of neighbours for each spatial area with k parameter in knearneigh() function.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

If we plot and visualise

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 6. Computing Inverse distance based neighbors weights

We use nbdists() from spdep

```{r}
#Cretae nbdist object first
dist <- nbdists(wm_q, coords, longlat = TRUE)

#lapply to invert it
ids <- lapply(dist, function(x) 1/(x))
ids

```

## 7. Computing Row Standardised Weights Matrix

Neighbours around the spatial unit will be assigned weights based on (1/# number of neighbours). Each will have equal weights.

Each neighboring polygon will be assigned equal weight using (style="W").

The zero.policy=TRUE option allows for lists of non-neighbors. 

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

```{r}
rswm_q$weights[1]  #weights of 10th spatial unit
```

Each neighbor's income will be multiplied by 0.125 before being totaled.

Another way is to assign weights based on distance

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## 8. Application of Spatial Weight Matrix

There are 4 types of spatial lagged variables:

-   Spatial lag with row-standardized weights

-   Spatial lag as a sum of neighbouring values

-   Spatial window average

-   Spatial window sum.

### 8.1 Spatial lag with row-standardized weights

Computing average neighbourhood values of a spatial is known as spatial lag

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

```{r}
GDPPC.lag[1]
```

The above is actually the sum of 0.2\* values of the neighbours of spatial unit 1.

We append this table into dataframe

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
lag.res
```

```{r}
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

We can visualize this in a plot.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 8.2 Spatial lag using sum of neighbouring values

If it is a neighbour, add value of 1

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")

hunan <- left_join(hunan, lag.res)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 8.3 Spatial window average

This uses row standardised weights.

Spatial window average requires the diagonal element. We will need to add it back

```{r}
wm_q1 <- wm_q #make a copy
include.self(wm_q1) #diagonal element

wm_q1 <- nb2listw(wm_q1) #convert into nnlist object
wm_q1
```

Compute the lag variable

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

```{r}
#Create DF
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")

hunan <- left_join(hunan, lag_wm_q1.res)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### 8.4 Spatial window sum

Instead of average, we do a sum. No row-standardised weights here.

```{r}
wm_q1 <- wm_q
include.self(wm_q1)
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]

```

```{r}
b_weights2 <- nb2listw(wm_q1, 
                       glist = b_weights, 
                       style = "B")
b_weights2

```

```{r}
#Creating DF
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))

w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")

hunan <- left_join(hunan, w_sum_gdppc.res)
head(hunan)

```

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```
