[
  {
    "objectID": "Inclass-ex1/inclass-ex1.html",
    "href": "Inclass-ex1/inclass-ex1.html",
    "title": "Inclass Excercise 1",
    "section": "",
    "text": "In this section. I will showcase how to compute spatial weights and how to apply spatial weights in a real world context.\nIn this tutorial, we will be using these packages: sf, readr, dplyr, spdep\n\n\nThe code chunk below will install and load the sf, readr, dplyr and spdep packages\n\npacman::p_load(sf,tidyverse, spdep, tmap)\n\nNext, we will read in the data for this exercise.\nThe data type of this file is in shapefile format. We will use the st_read() function of the sf package to import the file. Output will be a simple features object.\n\nhunan <- st_read(dsn = \"data/geospatial\",\n                layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Inclass-ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\nFor the other file, it is in csv format. We can use read_csv() from readr package to import the file.\n\nhunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(hunan2012, 7)\n\n# A tibble: 7 × 29\n  County City  avg_w…¹ depos…²    FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO   Loan\n  <chr>  <chr>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <dbl>  <dbl>  <dbl>\n1 Anhua  Yiya…   30544  10967   6832.    457.   2703  13225  14567  9277.  3955.\n2 Anren  Chen…   28058   4599.  6386.    221.   1455.  4941. 12761  4189.  2555.\n3 Anxia… Chan…   31935   5517.  3541     244.   1780. 12482  23667  5109.  2807.\n4 Baoji… Huna…   30843   2250   1005.    193.   1379.  4088. 14563  3624.  1254.\n5 Chali… Zhuz…   31251   8241.  6508.    620.   1947  11585  20078  9158.  4287.\n6 Chang… Heng…   28518  10860   7920     770.   2632. 19886  24418 37392   4243.\n7 Chang… Chan…   54540  24332  33624    5350    7886. 88009  88656 51361  40534 \n# … with 18 more variables: NIPCR <dbl>, Bed <dbl>, Emp <dbl>, EmpR <dbl>,\n#   EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>, Household <dbl>,\n#   Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>, Pop_T <dbl>,\n#   Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>, ROREmp <dbl>, and\n#   abbreviated variable names ¹​avg_wage, ²​deposite\n\n\n\n\n\nWe will join the SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. They are joined by row level.\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\"\n\nhead(hunan, 5)\n\nSimple feature collection with 5 features and 35 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 111.2145 ymin: 28.61762 xmax: 112.3013 ymax: 29.95847\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n\n\n\n\n\nIn this section, we will be creating a base map and a coloured map known as choropleth map.\nA choropleth map is a thematic map that uses the gradient of a colour to indicate the variation of a variable across the geographical locations.\nWe will use qtm( ) function of tmap function to visualize the GDP per capital pattern across the geographical location of Hunan!\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size = 0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ngdppc\n\n\n\n\nIf we want to display basemap and choropleth map together, we can use tmap_arange() function.\n\ntmap_arrange(basemap, gdppc, asp = 1, ncol = 2) # one row, 2 columns\n\n\n\n\n\n\n\nContiguity means 2 spatial units share a common border. There are several ways accounting the sharing of border.\n\n\nOne is rook’s method and another queen’s method. Either which, it will express the structure in a matrix W.\n\n\n\n\n\nwij refers to the neighbouring effect between spatial unit i and spatial unit j. wii will be zero as there is no effect with itself. Wij is a binary element. However usually in practice we do row standardisation and it is computed by wij/sum of wij across row j.\nWe will use poly2nb() from spdep package to compute the contiguity weight matrix. We can make use of the “queen” argument to decide if we want to account for neighbour effect using queen. By default it is True.\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q) # checking neighbouring effect\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nHow do we interpret the results above?\nThere are 88 spatial units in Hunan. The most connected spatial unit (85) has 11 neighbors. There are two spatial units (30 & 65) with only one neighbors.\nWe can also check the neighbors of a specified spatial units\n\nwm_q[[1]]   #It is connected with spatial unit 2, 3, 4, 57, 85\n\n[1]  2  3  4 57 85\n\n\nTo extract county name\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo extract multiple names, we can define a vector\n\n#Neighbors of 1\nhunan$NAME_3[c(2, 3, 4, 57, 85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nTo find the GDP per capital of these neighbors of 1 using queen’s contiguity method\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nIf we want to view entire spatial weight matrix, W, we can use str() function\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nWe compute the contiguity weight matrix using the Rook’s method.\n\nwm_r <- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\n\nWe can connect a spatial unit to its neighbour using lines. To do so we will need to compute centroids of each spatial unit and connect to its neighbors using the centroids.\nCentroids can be calculated using st_centroid() function. We will use a map function to map each element of human$geometry through st_centroid() function.\n\n#[1] is longitude\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\n#[2] is latitude\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nWe bind the longitude and latitude together\n\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nWe can control the size of dot using cex and marker design using pch.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\nWe use par() function to control the subplots. Left is queen, right is rook’s.\nmfrow: determines a vector with row and column values for the grid.\n\npar(mfrow = c(1,2)) # 1row, 2 columns\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")\n\n\n\n\n\n\n\n\nAnother way of representing neighbours can be done computing distanced based weight matrices. Only neighbours that fall within a defined range of Euclidean distance will be accounted for.\nFirst, we find the k nearest neighbors of the coordinates. We can use k parameter to set how many neighbours we want to look at.\n\nknearneigh(coords, k=10)\n\n$nn\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    3   57   64    5    4    2   58   85   78    68\n [2,]   78   58   57    1   85    3    5   68    8    64\n [3,]    1    5    4   57    2   85   64   58    6    69\n [4,]    5    3    1    6   85   69   57    2   64    58\n [5,]    4    3    1   85    6   69    2   57   64    58\n [6,]   69    5    4   75    3   85    1   32   55     2\n [7,]   67   84   71   66   74    9   68   86   73    76\n [8,]   46   47   78    9   86   80   35   68    2    84\n [9,]   84   68   46    8   66   86   78   47   58    74\n[10,]   70   16   22   72   73   19   17   20   11    21\n[11,]   72   17   14   16   10   70   22   83   15    73\n[12,]   63   13   60   83   61   15   18   62   87    59\n[13,]   12   60   15   83   63   61   59   87   62    18\n[14,]   17   11   15   16   72   83   10   13   22    70\n[15,]   13   83   12   60   14   17   63   16   61    22\n[16,]   22   17   10   83   72   11   70   20   18    14\n[17,]   16   14   11   72   10   83   22   15   70    13\n[18,]   20   22   63   83   23   77   82   12   16    61\n[19,]   21   73   20   74   10   82   86   22   70    71\n[20,]   82   22   18   19   21   23   10   16   35    41\n[21,]   19   82   86   20   74   35   47   46   73    71\n[22,]   16   20   10   18   83   19   17   70   82    63\n[23,]   41   77   82   18   79   20   35   38   45    21\n[24,]   54   31   25   28   52   81   50   32   49    33\n[25,]   81   24   28   33   31   54   39   26   49    42\n[26,]   81   27   42   33   25   29   30   37   39    28\n[27,]   29   26   42   37   30   81   33   25   39    43\n[28,]   49   33   25   54   52   24   81   51   30    50\n[29,]   27   37   42   26   81   43   30   33   44    39\n[30,]   33   26   28   27   49   81   25   42   29    51\n[31,]   24   40   36   25   54   39   32   81   34    56\n[32,]   50   54   31   24   55   56   75   52   69    85\n[33,]   28   30   81   25   26   49   24   27   54    42\n[34,]   45   36   80   41   56   40   79   35   31    47\n[35,]   47   82   41   80   21   46   86    8   23    45\n[36,]   34   56   45   40   31   80   79   41   32    24\n[37,]   42   29   43   44   27   26   39   81   38    40\n[38,]   44   77   79   43   62   23   41   40   45    39\n[39,]   43   40   81   42   44   25   31   79   26    37\n[40,]   39   79   45   31   36   43   34   44   41    24\n[41,]   23   35   45   79   80   82   34   47   77    38\n[42,]   37   26   81   43   39   27   29   44   25    33\n[43,]   44   39   42   40   37   79   38   81   26    45\n[44,]   43   38   79   37   39   42   40   77   62    45\n[45,]   34   79   41   80   36   40   35   23   56    31\n[46,]   47    8   86    9   35   78   21   74   80    84\n[47,]   46   35    8   86   80   21   82    9   78    41\n[48,]   51   52   50   55   53   49   54   28   75    32\n[49,]   28   52   51   54   33   48   25   24   50    30\n[50,]   52   55   54   48   51   32   24   49   53    75\n[51,]   48   52   49   50   54   28   55   53   24    33\n[52,]   54   51   50   49   48   28   24   55   25    32\n[53,]   55   48   50   51   75   52   54   49   32    69\n[54,]   52   24   50   28   49   51   25   48   32    31\n[55,]   50   75   53   48   52   32   51   54   69    49\n[56,]   36   34   85   80   78   32   45   31    2     8\n[57,]   58   64    1    2    3   68   76   78   66     5\n[58,]   57   68   64    2   66   78    1   76    9     3\n[59,]   87   88   60   61   13   12   62   63   15    83\n[60,]   13   12   61   59   63   87   15   62   83    88\n[61,]   63   62   60   87   12   13   59   77   83    18\n[62,]   61   87   77   63   38   12   60   18   88    23\n[63,]   12   61   18   62   83   60   13   77   87    22\n[64,]   57    1   58   76    3   68   66   65    2     4\n[65,]   76   67   66   64   68   58   57   84    7     1\n[66,]   68   76   84   58    9   67   65   57    7    64\n[67,]    7   66   84   76   65   68    9   71   58    74\n[68,]   66   58    9   84   57   78   76    8    2    64\n[69,]    6   75   85    5    4   32    3   55   56    50\n[70,]   10   73   72   19   16   22   11   71   17    74\n[71,]   74   73    7   86   84   19   21   70    9    46\n[72,]   11   70   10   17   16   14   73   22   19    83\n[73,]   70   19   71   74   10   21   86   72   20    22\n[74,]   71   86   21   19   73   84   46    9   47     7\n[75,]   55   69   53    6   50   32   48   52   85    54\n[76,]   65   66   64   68   58   67   57   84    9     1\n[77,]   38   62   23   63   18   61   79   41   44    87\n[78,]    2    8   58   68    9   46   47   57   80    56\n[79,]   45   40   41   38   44   43   23   34   39    77\n[80,]   34   35   45   47   41   36    8   56   46    78\n[81,]   25   26   33   39   42   28   24   43   31    27\n[82,]   21   20   35   23   41   19   47   18   86    22\n[83,]   12   13   63   16   15   22   18   17   60    61\n[84,]    9   66    7   68   74   71   67   86   46     8\n[85,]    5    2   56    3   69    4    1   78   32     6\n[86,]   74   46   21   47    9    8   19   35   71    84\n[87,]   61   62   88   59   60   63   12   77   13    38\n[88,]   87   59   62   61   60   63   12   77   38    13\n\n$np\n[1] 88\n\n$k\n[1] 10\n\n$dimension\n[1] 2\n\n$x\n      longitude latitude\n [1,]  112.1531 29.44362\n [2,]  112.0372 28.86489\n [3,]  111.8917 29.47107\n [4,]  111.7031 29.74499\n [5,]  111.6138 29.49258\n [6,]  111.0341 29.79863\n [7,]  113.7065 28.23215\n [8,]  112.3460 28.13081\n [9,]  112.8169 28.28918\n[10,]  113.3534 26.57906\n[11,]  113.8942 25.98122\n[12,]  112.4006 25.63215\n[13,]  112.5542 25.33880\n[14,]  113.6636 25.54967\n[15,]  112.9206 25.26722\n[16,]  113.1883 26.21248\n[17,]  113.4521 25.93480\n[18,]  112.4209 26.36132\n[19,]  113.0152 27.08120\n[20,]  112.6350 26.75969\n[21,]  112.7087 27.27930\n[22,]  112.9095 26.42079\n[23,]  111.9522 26.80117\n[24,]  110.2606 27.89384\n[25,]  110.0921 27.54115\n[26,]  109.7985 26.91321\n[27,]  109.5765 26.54507\n[28,]  109.7211 27.78801\n[29,]  109.7339 26.21157\n[30,]  109.1537 27.22941\n[31,]  110.6442 27.83407\n[32,]  110.5916 28.57282\n[33,]  109.5984 27.39828\n[34,]  111.4783 27.67997\n[35,]  112.1745 27.46256\n[36,]  111.2315 27.86930\n[37,]  110.3149 26.32113\n[38,]  111.3248 26.48991\n[39,]  110.5859 27.10164\n[40,]  110.9593 27.34884\n[41,]  111.8296 27.18765\n[42,]  110.1926 26.70972\n[43,]  110.7334 26.78494\n[44,]  110.9123 26.54354\n[45,]  111.4599 27.42910\n[46,]  112.5268 27.92456\n[47,]  112.3406 27.77407\n[48,]  109.5602 28.66808\n[49,]  109.5071 28.01142\n[50,]  109.9954 28.60033\n[51,]  109.4273 28.42749\n[52,]  109.7587 28.31518\n[53,]  109.5044 29.21940\n[54,]  109.9899 28.16053\n[55,]  109.9664 29.01206\n[56,]  111.3785 28.28449\n[57,]  112.4350 29.23817\n[58,]  112.5558 28.97135\n[59,]  111.7379 24.97087\n[60,]  112.1831 25.31559\n[61,]  111.9743 25.65101\n[62,]  111.7009 25.91101\n[63,]  112.2196 25.88615\n[64,]  112.6472 29.48614\n[65,]  113.5102 29.49285\n[66,]  113.1172 28.79707\n[67,]  113.7089 28.76024\n[68,]  112.7963 28.71653\n[69,]  110.9276 29.39439\n[70,]  113.6420 26.80361\n[71,]  113.4577 27.66123\n[72,]  113.8404 26.37989\n[73,]  113.4758 27.17064\n[74,]  113.1428 27.62875\n[75,]  110.3017 29.39053\n[76,]  113.1957 29.25343\n[77,]  111.7410 26.36035\n[78,]  112.1831 28.49854\n[79,]  111.3390 27.01465\n[80,]  111.8208 27.75124\n[81,]  110.0753 27.23539\n[82,]  112.3965 27.08323\n[83,]  112.7683 25.82828\n[84,]  113.1679 28.30074\n[85,]  111.4495 28.95406\n[86,]  112.7956 27.68910\n[87,]  111.5896 25.49530\n[88,]  111.2393 25.19355\n\nattr(,\"class\")\n[1] \"knn\"\nattr(,\"call\")\nknearneigh(x = coords, k = 10)\n\n\nWe convert the knearneigh() returned into a neighbour list object\n\nk1 <- knn2nb(knearneigh(coords))\n\nWe calculate the distance using nbdists() and remove the list format using unlist(). We can see the maximum distance is 61.79km.\n\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nWe compute distance matrix, using dnearneigh() and set upper and lower bound of the distance.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nWe can also view number of neighbours of each county using table() and card()\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nWe can also plot both of them side by side. Left is 1st nearest neighbour, 2nd is within 0-62km range.\n\npar(mfrow=c(1,2))\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n\nDense areas will have neighbors than sparse area. We can set number of neighbours for each spatial area with k parameter in knearneigh() function.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nIf we plot and visualise\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\nWe use nbdists() from spdep\n\n#Cretae nbdist object first\ndist <- nbdists(wm_q, coords, longlat = TRUE)\n\n#lapply to invert it\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\n\nNeighbours around the spatial unit will be assigned weights based on (1/# number of neighbours). Each will have equal weights.\nEach neighboring polygon will be assigned equal weight using (style=“W”).\nThe zero.policy=TRUE option allows for lists of non-neighbors. \n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nrswm_q$weights[1]  #weights of 10th spatial unit\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nEach neighbor’s income will be multiplied by 0.125 before being totaled.\nAnother way is to assign weights based on distance\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\nThere are 4 types of spatial lagged variables:\n\nSpatial lag with row-standardized weights\nSpatial lag as a sum of neighbouring values\nSpatial window average\nSpatial window sum.\n\n\n\nComputing average neighbourhood values of a spatial is known as spatial lag\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nGDPPC.lag[1]\n\n[1] 24847.2\n\n\nThe above is actually the sum of 0.2* values of the neighbours of spatial unit 1.\nWe append this table into dataframe\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\nlag.res\n\n   c..Anxiang....Hanshou....Jinshi....Li....Linli....Shimen....Liuyang...\n1                                                                 Anxiang\n2                                                                 Hanshou\n3                                                                  Jinshi\n4                                                                      Li\n5                                                                   Linli\n6                                                                  Shimen\n7                                                                 Liuyang\n8                                                               Ningxiang\n9                                                               Wangcheng\n10                                                                  Anren\n11                                                                Guidong\n12                                                                  Jiahe\n13                                                                  Linwu\n14                                                                Rucheng\n15                                                                Yizhang\n16                                                               Yongxing\n17                                                                 Zixing\n18                                                              Changning\n19                                                               Hengdong\n20                                                                Hengnan\n21                                                               Hengshan\n22                                                                Leiyang\n23                                                                 Qidong\n24                                                                 Chenxi\n25                                                              Zhongfang\n26                                                                Huitong\n27                                                               Jingzhou\n28                                                                 Mayang\n29                                                                Tongdao\n30                                                               Xinhuang\n31                                                                   Xupu\n32                                                               Yuanling\n33                                                               Zhijiang\n34                                                          Lengshuijiang\n35                                                             Shuangfeng\n36                                                                 Xinhua\n37                                                                Chengbu\n38                                                                 Dongan\n39                                                                Dongkou\n40                                                                Longhui\n41                                                               Shaodong\n42                                                                Suining\n43                                                                 Wugang\n44                                                                Xinning\n45                                                                Xinshao\n46                                                               Shaoshan\n47                                                             Xiangxiang\n48                                                                Baojing\n49                                                              Fenghuang\n50                                                                Guzhang\n51                                                                Huayuan\n52                                                                 Jishou\n53                                                               Longshan\n54                                                                   Luxi\n55                                                               Yongshun\n56                                                                  Anhua\n57                                                                    Nan\n58                                                              Yuanjiang\n59                                                               Jianghua\n60                                                                Lanshan\n61                                                               Ningyuan\n62                                                              Shuangpai\n63                                                                Xintian\n64                                                                Huarong\n65                                                               Linxiang\n66                                                                  Miluo\n67                                                              Pingjiang\n68                                                               Xiangyin\n69                                                                   Cili\n70                                                                Chaling\n71                                                                 Liling\n72                                                                Yanling\n73                                                                    You\n74                                                                Zhuzhou\n75                                                                Sangzhi\n76                                                                Yueyang\n77                                                                 Qiyang\n78                                                               Taojiang\n79                                                               Shaoyang\n80                                                               Lianyuan\n81                                                              Hongjiang\n82                                                               Hengyang\n83                                                                Guiyang\n84                                                               Changsha\n85                                                                Taoyuan\n86                                                               Xiangtan\n87                                                                    Dao\n88                                                              Jiangyong\n   c.24847.2..22724.8..24143.25..27737.5..27270.25..21248.8..43747..\n1                                                           24847.20\n2                                                           22724.80\n3                                                           24143.25\n4                                                           27737.50\n5                                                           27270.25\n6                                                           21248.80\n7                                                           43747.00\n8                                                           33582.71\n9                                                           45651.17\n10                                                          32027.62\n11                                                          32671.00\n12                                                          20810.00\n13                                                          25711.50\n14                                                          30672.33\n15                                                          33457.75\n16                                                          31689.20\n17                                                          20269.00\n18                                                          23901.60\n19                                                          25126.17\n20                                                          21903.43\n21                                                          22718.60\n22                                                          25918.80\n23                                                          20307.00\n24                                                          20023.80\n25                                                          16576.80\n26                                                          18667.00\n27                                                          14394.67\n28                                                          19848.80\n29                                                          15516.33\n30                                                          20518.00\n31                                                          17572.00\n32                                                          15200.12\n33                                                          18413.80\n34                                                          14419.33\n35                                                          24094.50\n36                                                          22019.83\n37                                                          12923.50\n38                                                          14756.00\n39                                                          13869.80\n40                                                          12296.67\n41                                                          15775.17\n42                                                          14382.86\n43                                                          11566.33\n44                                                          13199.50\n45                                                          23412.00\n46                                                          39541.00\n47                                                          36186.60\n48                                                          16559.60\n49                                                          20772.50\n50                                                          19471.20\n51                                                          19827.33\n52                                                          15466.80\n53                                                          12925.67\n54                                                          18577.17\n55                                                          14943.00\n56                                                          24913.00\n57                                                          25093.00\n58                                                          24428.80\n59                                                          17003.00\n60                                                          21143.75\n61                                                          20435.00\n62                                                          17131.33\n63                                                          24569.75\n64                                                          23835.50\n65                                                          26360.00\n66                                                          47383.40\n67                                                          55157.75\n68                                                          37058.00\n69                                                          21546.67\n70                                                          23348.67\n71                                                          42323.67\n72                                                          28938.60\n73                                                          25880.80\n74                                                          47345.67\n75                                                          18711.33\n76                                                          29087.29\n77                                                          20748.29\n78                                                          35933.71\n79                                                          15439.71\n80                                                          29787.50\n81                                                          18145.00\n82                                                          21617.00\n83                                                          29203.89\n84                                                          41363.67\n85                                                          22259.09\n86                                                          44939.56\n87                                                          16902.00\n88                                                          16930.00\n\n\n\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nWe can visualize this in a plot.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nIf it is a neighbour, add value of 1\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThis uses row standardised weights.\nSpatial window average requires the diagonal element. We will need to add it back\n\nwm_q1 <- wm_q #make a copy\ninclude.self(wm_q1) #diagonal element\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nwm_q1 <- nb2listw(wm_q1) #convert into nnlist object\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nCompute the lag variable\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\n#Create DF\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nInstead of average, we do a sum. No row-standardised weights here.\n\nwm_q1 <- wm_q\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\n#Creating DF\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\nhead(hunan)\n\nSimple feature collection with 6 features and 39 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n  lag_sum GDPPC lag_window_avg GDPPC w_sum GDPPC                       geometry\n1        124236             24847.20      124236 POLYGON ((112.0625 29.75523...\n2        113624             22724.80      113624 POLYGON ((112.2288 29.11684...\n3         96573             24143.25       96573 POLYGON ((111.8927 29.6013,...\n4        110950             27737.50      110950 POLYGON ((111.3731 29.94649...\n5        109081             27270.25      109081 POLYGON ((111.6324 29.76288...\n6        106244             21248.80      106244 POLYGON ((110.8825 30.11675...\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex01/Hand-on_Ex1.html",
    "href": "Hands-on_Ex01/Hand-on_Ex1.html",
    "title": "ISSS624",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse)  #load more than 1 library one shot\nImport into Polygon data Frame\nCRS is coordinate system. SVY21 coordinate system 323 polygon features 15 fields\nImport into line feature data Frame\nImporting kml data frame\nCRS is WGS84 system\nAccessing the column geometries which is in class SFC\nLearning more about attribute of of dataframe. Glimpse is from tidyverse"
  },
  {
    "objectID": "Hands-on_Ex01/Hand-on_Ex1.html#plotting-each-attribute-based-on-geospatial",
    "href": "Hands-on_Ex01/Hand-on_Ex1.html#plotting-each-attribute-based-on-geospatial",
    "title": "ISSS624",
    "section": "Plotting each attribute based on geospatial",
    "text": "Plotting each attribute based on geospatial\n\nplot(mpsz, max.plot = 15)\n\n\n\n\nPlot only geometry (only want the outline and nothing else)\n\nplot(st_geometry(mpsz))\n\n\n\n\nPlotting specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\nmpsz[\"PLN_AREA_N\"]\n\nSimple feature collection with 323 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n        PLN_AREA_N                       geometry\n1     MARINA SOUTH MULTIPOLYGON (((31495.56 30...\n2           OUTRAM MULTIPOLYGON (((29092.28 30...\n3  SINGAPORE RIVER MULTIPOLYGON (((29932.33 29...\n4      BUKIT MERAH MULTIPOLYGON (((27131.28 30...\n5      BUKIT MERAH MULTIPOLYGON (((26451.03 30...\n6      BUKIT MERAH MULTIPOLYGON (((25899.7 297...\n7      BUKIT MERAH MULTIPOLYGON (((27746.95 30...\n8  SINGAPORE RIVER MULTIPOLYGON (((29351.26 29...\n9       QUEENSTOWN MULTIPOLYGON (((20996.49 30...\n10      QUEENSTOWN MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex01/Hand-on_Ex1.html#interlaying-features-with-different-coordinate-systems",
    "href": "Hands-on_Ex01/Hand-on_Ex1.html#interlaying-features-with-different-coordinate-systems",
    "title": "ISSS624",
    "section": "Interlaying features with different Coordinate Systems",
    "text": "Interlaying features with different Coordinate Systems\nNeed to transform different coordinate systems into same one\nSometimes during importing, the coordinate system might be wrong. need to check using st_crs()\n\nst_crs(mpsz) #SVY21 should be 3414 but in here is it 9001. SO wrongly tagged\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 <- st_set_crs(mpsz, 3414) #change the code back to 3414\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414) #checked and changed\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nTo calculate distance you need projected coorindate systems (2D) vs geographic coordinate system (flat)\n\nst_geometry(preschool) #check geometry of preschool\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.7009 1.338325 0)\n\n\nPOINT Z (103.8987 1.39044 0)\n\n\nPOINT Z (103.8068 1.438017 0)\n\n\nPOINT Z (103.7874 1.433436 0)\n\n\nPOINT Z (103.8886 1.395647 0)\n\n\nFrom one coordinate system to another need to reproject. Use ST_transform, cannot just use set_crs().This method does not reproject.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\nst_geometry(preschool3414)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (13258.34 35611.04 0)\n\n\nPOINT Z (35272.09 41373.42 0)\n\n\nPOINT Z (25050.54 46634.14 0)\n\n\nPOINT Z (22892.48 46127.66 0)\n\n\nPOINT Z (34155.79 41949.13 0)\n\n\n\nAspatial Data\nNot geospatial but 2 columns with x and y axis\n\nlistings <- as_tibble(read.csv(\"data/aspatial/listings.csv\"))\nhead(listings)\n\n# A tibble: 6 × 75\n      id listing_…¹ scrap…² last_…³ source name  descr…⁴ neigh…⁵ pictu…⁶ host_id\n   <dbl> <chr>        <dbl> <chr>   <chr>  <chr> <chr>   <chr>   <chr>     <int>\n1  50646 https://w… 2.02e13 2022-0… previ… Plea… \"Fully… \"The s… https:…  227796\n2  71609 https://w… 2.02e13 2022-0… city … Ensu… \"For 3… \"\"      https:…  367042\n3  71896 https://w… 2.02e13 2022-0… city … B&B … \"<b>Th… \"\"      https:…  367042\n4  71903 https://w… 2.02e13 2022-0… city … Room… \"Like … \"Quiet… https:…  367042\n5 275344 https://w… 2.02e13 2022-0… city … 15 m… \"Lovel… \"Bus s… https:… 1439258\n6 289234 https://w… 2.02e13 2022-0… city … Book… \"This … \"A qui… https:…  367042\n# … with 65 more variables: host_url <chr>, host_name <chr>, host_since <chr>,\n#   host_location <chr>, host_about <chr>, host_response_time <chr>,\n#   host_response_rate <chr>, host_acceptance_rate <chr>,\n#   host_is_superhost <chr>, host_thumbnail_url <chr>, host_picture_url <chr>,\n#   host_neighbourhood <chr>, host_listings_count <int>,\n#   host_total_listings_count <int>, host_verifications <chr>,\n#   host_has_profile_pic <chr>, host_identity_verified <chr>, …\n\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 75\n       id listing…¹ scrap…² last_…³ source name  descr…⁴ neigh…⁵ pictu…⁶ host_id\n    <dbl> <chr>       <dbl> <chr>   <chr>  <chr> <chr>   <chr>   <chr>     <int>\n 1  50646 https://… 2.02e13 2022-0… previ… Plea… \"Fully… \"The s… https:…  227796\n 2  71609 https://… 2.02e13 2022-0… city … Ensu… \"For 3… \"\"      https:…  367042\n 3  71896 https://… 2.02e13 2022-0… city … B&B … \"<b>Th… \"\"      https:…  367042\n 4  71903 https://… 2.02e13 2022-0… city … Room… \"Like … \"Quiet… https:…  367042\n 5 275344 https://… 2.02e13 2022-0… city … 15 m… \"Lovel… \"Bus s… https:… 1439258\n 6 289234 https://… 2.02e13 2022-0… city … Book… \"This … \"A qui… https:…  367042\n 7 294281 https://… 2.02e13 2022-0… city … 5 mi… \"I hav… \"\"      https:… 1521514\n 8 324945 https://… 2.02e13 2022-0… city … Cozy… \"<b>Th… \"\"      https:… 1439258\n 9 330089 https://… 2.02e13 2022-0… city … Cozy… \"A uni… \"\"      https:… 1439258\n10 330095 https://… 2.02e13 2022-0… city … 10 m… \"Cosy,… \"Near … https:… 1439258\n# … with 4,151 more rows, 65 more variables: host_url <chr>, host_name <chr>,\n#   host_since <chr>, host_location <chr>, host_about <chr>,\n#   host_response_time <chr>, host_response_rate <chr>,\n#   host_acceptance_rate <chr>, host_is_superhost <chr>,\n#   host_thumbnail_url <chr>, host_picture_url <chr>, host_neighbourhood <chr>,\n#   host_listings_count <int>, host_total_listings_count <int>,\n#   host_verifications <chr>, host_has_profile_pic <chr>, …\n\ncolnames(listings)\n\n [1] \"id\"                                          \n [2] \"listing_url\"                                 \n [3] \"scrape_id\"                                   \n [4] \"last_scraped\"                                \n [5] \"source\"                                      \n [6] \"name\"                                        \n [7] \"description\"                                 \n [8] \"neighborhood_overview\"                       \n [9] \"picture_url\"                                 \n[10] \"host_id\"                                     \n[11] \"host_url\"                                    \n[12] \"host_name\"                                   \n[13] \"host_since\"                                  \n[14] \"host_location\"                               \n[15] \"host_about\"                                  \n[16] \"host_response_time\"                          \n[17] \"host_response_rate\"                          \n[18] \"host_acceptance_rate\"                        \n[19] \"host_is_superhost\"                           \n[20] \"host_thumbnail_url\"                          \n[21] \"host_picture_url\"                            \n[22] \"host_neighbourhood\"                          \n[23] \"host_listings_count\"                         \n[24] \"host_total_listings_count\"                   \n[25] \"host_verifications\"                          \n[26] \"host_has_profile_pic\"                        \n[27] \"host_identity_verified\"                      \n[28] \"neighbourhood\"                               \n[29] \"neighbourhood_cleansed\"                      \n[30] \"neighbourhood_group_cleansed\"                \n[31] \"latitude\"                                    \n[32] \"longitude\"                                   \n[33] \"property_type\"                               \n[34] \"room_type\"                                   \n[35] \"accommodates\"                                \n[36] \"bathrooms\"                                   \n[37] \"bathrooms_text\"                              \n[38] \"bedrooms\"                                    \n[39] \"beds\"                                        \n[40] \"amenities\"                                   \n[41] \"price\"                                       \n[42] \"minimum_nights\"                              \n[43] \"maximum_nights\"                              \n[44] \"minimum_minimum_nights\"                      \n[45] \"maximum_minimum_nights\"                      \n[46] \"minimum_maximum_nights\"                      \n[47] \"maximum_maximum_nights\"                      \n[48] \"minimum_nights_avg_ntm\"                      \n[49] \"maximum_nights_avg_ntm\"                      \n[50] \"calendar_updated\"                            \n[51] \"has_availability\"                            \n[52] \"availability_30\"                             \n[53] \"availability_60\"                             \n[54] \"availability_90\"                             \n[55] \"availability_365\"                            \n[56] \"calendar_last_scraped\"                       \n[57] \"number_of_reviews\"                           \n[58] \"number_of_reviews_ltm\"                       \n[59] \"number_of_reviews_l30d\"                      \n[60] \"first_review\"                                \n[61] \"last_review\"                                 \n[62] \"review_scores_rating\"                        \n[63] \"review_scores_accuracy\"                      \n[64] \"review_scores_cleanliness\"                   \n[65] \"review_scores_checkin\"                       \n[66] \"review_scores_communication\"                 \n[67] \"review_scores_location\"                      \n[68] \"review_scores_value\"                         \n[69] \"license\"                                     \n[70] \"instant_bookable\"                            \n[71] \"calculated_host_listings_count\"              \n[72] \"calculated_host_listings_count_entire_homes\" \n[73] \"calculated_host_listings_count_private_rooms\"\n[74] \"calculated_host_listings_count_shared_rooms\" \n[75] \"reviews_per_month\"                           \n\n\n\nlistings_sf <- st_as_sf(listings, coords = c(\"longitude\",\"latitude\"),\n         crs = 4326) %>%\n  st_transform(crs = 3414)\n\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 74\n$ id                                           <dbl> 50646, 71609, 71896, 7190…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.022092e+13, 2.022092e+1…\n$ last_scraped                                 <chr> \"2022-09-23\", \"2022-09-22…\n$ source                                       <chr> \"previous scrape\", \"city …\n$ name                                         <chr> \"Pleasant Room along Buki…\n$ description                                  <chr> \"Fully furnished bedroom …\n$ neighborhood_overview                        <chr> \"The serenity & quiet sur…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <int> 227796, 367042, 367042, 3…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Sujatha\", \"Belinda\", \"Be…\n$ host_since                                   <chr> \"2010-09-08\", \"2011-01-29…\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"I am a working professio…\n$ host_response_time                           <chr> \"a few days or more\", \"wi…\n$ host_response_rate                           <chr> \"0%\", \"100%\", \"100%\", \"10…\n$ host_acceptance_rate                         <chr> \"N/A\", \"100%\", \"100%\", \"1…\n$ host_is_superhost                            <chr> \"f\", \"f\", \"f\", \"f\", \"f\", …\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Bukit Timah\", \"Tampines\"…\n$ host_listings_count                          <int> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ host_total_listings_count                    <int> 4, 15, 15, 15, 57, 15, 8,…\n$ host_verifications                           <chr> \"['email', 'phone', 'work…\n$ host_has_profile_pic                         <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ host_identity_verified                       <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ neighbourhood                                <chr> \"Singapore, Singapore\", \"…\n$ neighbourhood_cleansed                       <chr> \"Bukit Timah\", \"Tampines\"…\n$ neighbourhood_group_cleansed                 <chr> \"Central Region\", \"East R…\n$ property_type                                <chr> \"Private room in rental u…\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <int> 2, 6, 1, 2, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 bath\", \"1 private bath…\n$ bedrooms                                     <int> 1, 2, 1, 1, 1, 3, 1, 1, N…\n$ beds                                         <int> 1, 3, 1, 2, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Gym\\\", \\\"Washer\\\", \\\"…\n$ price                                        <chr> \"$80.00\", \"$145.00\", \"$85…\n$ minimum_nights                               <int> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights                               <int> 730, 1125, 1125, 1125, 99…\n$ minimum_minimum_nights                       <int> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_minimum_nights                       <int> 92, 92, 92, 92, 60, 92, 9…\n$ minimum_maximum_nights                       <int> 730, 1125, 1125, 1125, 99…\n$ maximum_maximum_nights                       <int> 730, 1125, 1125, 1125, 99…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 730, 1125, 1125, 1125, 99…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ availability_30                              <int> 30, 5, 0, 30, 0, 0, 30, 5…\n$ availability_60                              <int> 60, 35, 1, 60, 0, 0, 60, …\n$ availability_90                              <int> 90, 65, 1, 90, 21, 10, 90…\n$ availability_365                             <int> 365, 340, 265, 365, 296, …\n$ calendar_last_scraped                        <chr> \"2022-09-23\", \"2022-09-22…\n$ number_of_reviews                            <int> 18, 20, 24, 47, 14, 12, 1…\n$ number_of_reviews_ltm                        <int> 0, 0, 0, 0, 1, 0, 0, 3, 2…\n$ number_of_reviews_l30d                       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 <chr> \"2014-04-18\", \"2011-12-19…\n$ last_review                                  <chr> \"2014-12-26\", \"2020-01-17…\n$ review_scores_rating                         <dbl> 4.56, 4.44, 4.16, 4.41, 4…\n$ review_scores_accuracy                       <dbl> 4.72, 4.37, 4.22, 4.39, 4…\n$ review_scores_cleanliness                    <dbl> 4.78, 4.00, 4.09, 4.52, 4…\n$ review_scores_checkin                        <dbl> 4.78, 4.63, 4.43, 4.63, 4…\n$ review_scores_communication                  <dbl> 4.94, 4.78, 4.43, 4.64, 4…\n$ review_scores_location                       <dbl> 4.72, 4.26, 4.17, 4.50, 4…\n$ review_scores_value                          <dbl> 4.50, 4.32, 4.04, 4.36, 4…\n$ license                                      <chr> \"\", \"\", \"\", \"\", \"S0399\", …\n$ instant_bookable                             <chr> \"f\", \"f\", \"t\", \"f\", \"f\", …\n$ calculated_host_listings_count               <int> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ calculated_host_listings_count_entire_homes  <int> 0, 0, 0, 0, 2, 0, 1, 2, 2…\n$ calculated_host_listings_count_private_rooms <int> 1, 6, 6, 6, 42, 6, 6, 42,…\n$ calculated_host_listings_count_shared_rooms  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.18, 0.15, 0.18, 0.34, 0…\n$ geometry                                     <POINT [m]> POINT (22646.02 351…\n\n\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n#create new column\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n#Sum area\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\nCount number of preschool on topi each planning zone\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\nplot(mpsz3414['PreSch Count'])\n\n\n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nmpsz3414$Area\n\nUnits: [m^2]\n  [1]  1630379.27   559816.25   160807.50   595428.89   387429.44  1030378.79\n  [7]   551732.05   290184.65  1084792.32   631644.29  1826848.56   293706.40\n [13]  1844060.67   392563.34   506588.96 36707720.92  4207271.09  4963787.10\n [19]  2206319.46  4919132.37  3449640.61   103238.48  1127297.24  2701634.34\n [25]   276826.81    63664.97   196619.86   365333.43  1454827.65   853206.57\n [31]  1070723.26   533017.39   442502.83    93140.44   411722.82   587222.68\n [37]    39437.94   188767.49   133006.94   448127.58   521200.52   350787.56\n [43]   261843.90  1590339.80   886954.81   223206.60   200052.68   710568.70\n [49]   748684.00   591779.00  1755950.44   340743.34   329437.93   170664.30\n [55]   368482.99  7601894.00   221973.34   280174.77   214250.30   173121.77\n [61]   533671.25   145518.66   635704.06   503220.75    55681.28   116330.00\n [67]  2051652.62  2434594.03  1713623.00   310513.65  1386643.32  1951865.75\n [73]   452471.83   697501.71 27710950.08   171720.62  1097833.70  1053493.75\n [79]  2796006.83  3049720.08   336221.49   741437.99   460550.43   543483.68\n [85]   278303.54  1769495.16   385093.11   558760.53  5675810.85  2096085.23\n [91]   722588.68  2550461.67  2042630.98  3260399.46  1346152.78   171334.39\n [97]    49626.02   193992.35   120171.32   850853.91  1026467.39   167537.07\n[103]  1160017.48  2560995.94   735502.23   948158.91  1321089.88  2997307.46\n[109]  1376830.05  1926622.00  3203306.04  2349378.27   963198.88   485022.31\n[115]  1881305.83  1425083.18  2387277.53  1078992.03   459546.29   247887.63\n[121]   213581.64  2464856.70  1940693.42  2118499.41   485046.92   757907.61\n[127]   351242.25  1312922.68   946651.42   748043.28  1022292.30   410994.54\n[133]   839488.98  1228487.73   554623.68  3392897.36  1878092.48   867750.44\n[139]   639143.56  3260150.86   411403.94   418657.36  2098176.50  1524551.34\n[145]   813382.98  1484296.47  3108023.27  1037281.09  2820171.68   924762.48\n[151]  1806553.08  1404536.64  2379331.53  2077796.55  3142950.11  2636483.26\n[157]  1057165.24  1287949.82   439646.76   746882.30   446241.79   572502.14\n[163]  2959367.63  2158289.72  1347456.01  2338909.49  4297140.71   991039.78\n[169]  2049551.25  2579087.17  3187584.08   906317.39   380201.80   526383.35\n[175]   800298.56   898561.30  1793463.63  3188097.31   494504.07  1061889.35\n[181]  1794461.26  3475209.89  1225673.65  1974371.71  1085080.08  1964134.53\n[187]  1974943.24  4141322.43  4339824.14  1796058.93  2251155.70   776142.49\n[193]  2206305.01  1180126.11  1229894.42   964682.68  1263409.40   369770.56\n[199]  3203663.49  1107267.04  1287387.26   842667.63  1333532.99  1007410.00\n[205]   894516.08   911208.29  1143813.67  1328876.20   609894.67   763183.43\n[211]  2768353.56  3467036.98  7833992.84  2778635.66   862737.09  1583440.16\n[217]   846137.20  1744387.41  1001591.79  1097298.80  4848516.74   668454.44\n[223]   624877.50   674992.00  2330683.26  1093213.49  1861872.04   909418.57\n[229]  2114789.49  3334192.44  1515533.89   944998.45  1990788.40  1829821.69\n[235]  2259239.74  3860324.99   859179.18   546403.86  1948613.21  1078622.32\n[241]   687930.10  3023148.98   441733.44   970068.07  1235901.75  1639669.02\n[247]  2543106.63   955710.19   316882.02  1046417.00   921430.95  7370557.68\n[253]   684704.30  1511487.38  2459098.27  7034806.47  3652031.03  1719704.60\n[259]  1088638.01  1569034.78  1670029.86  2391082.76  1378710.54   923214.75\n[265]  5325421.58  1418284.25  1489246.88  5186128.08 35096028.59  1463278.18\n[271]   995944.77  1455507.86  1499108.63   924866.02  1340167.99  8453312.38\n[277]  1360000.63   143137.94   436368.53  1259743.11  3291405.51  1576001.48\n[283]  1665469.26  1767092.90 69748298.79  2050051.22  1517767.39   595652.14\n[289]  3284130.42  2553463.72   962437.40  1281296.51   758123.46   905921.12\n[295]  1611278.68  1261648.75 17494884.18  3450455.36  1741957.36  1394865.68\n[301]  1074375.12 67250562.96  7235809.44  2147082.07  1511000.36   936415.53\n[307]  1648629.91  1099394.72  2209210.71  1264384.79  2206695.55  1265919.30\n[313] 37147854.46  3916069.34  2175380.06  3621841.18  1432913.06  4387133.12\n[319]  1200804.56  2450783.61  1540733.67  1635808.13  2241386.62\n\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data = mpsz3414,\n       aes(x = as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light blue')+\n  labs(title = \"Are pre-school evenly distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are a few planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\nggplot(data = mpsz3414, \n       aes( x = as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) + \n  geom_point(size = 1.5, color = 'pink', shape = 23) +\n  labs(  x = \"Pre-school density (per km sq)\",\n         y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands_on_Ex_1.html",
    "href": "Hands_on_Ex_1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Doing Geo spatial Analysis\n\npacman::p_load(sf, tidyverse)  #load more than 1 library one shot\n\nImport into Polygon data Frame\n\nmpsz = st_read(dsn = \"Hands-on_Ex01/data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nCRS is coordinate system. SVY21 coordinate system 323 polygon features 15 fields\nImport into line feature data Frame\n\ncyclingpath = st_read(dsn = \"Hands-on_Ex01/data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nImporting kml data frame\n\npreschool = st_read(\"Hands-on_Ex01/data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex01/data/geospatial/pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nCRS is WGS84 system\nAccessing the column geometries which is in class SFC\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nLearning more about attribute of of dataframe. Glimpse is from tidyverse\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nhead(mpsz, 5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands_on_Ex_1.html#plotting-each-attribute-based-on-geospatial",
    "href": "Hands_on_Ex_1.html#plotting-each-attribute-based-on-geospatial",
    "title": "Hands-on Exercise 1",
    "section": "Plotting each attribute based on geospatial",
    "text": "Plotting each attribute based on geospatial\n\nplot(mpsz, max.plot = 15)\n\n\n\n\nPlot only geometry (only want the outline and nothing else)\n\nplot(st_geometry(mpsz))\n\n\n\n\nPlotting specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\nmpsz[\"PLN_AREA_N\"]\n\nSimple feature collection with 323 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n        PLN_AREA_N                       geometry\n1     MARINA SOUTH MULTIPOLYGON (((31495.56 30...\n2           OUTRAM MULTIPOLYGON (((29092.28 30...\n3  SINGAPORE RIVER MULTIPOLYGON (((29932.33 29...\n4      BUKIT MERAH MULTIPOLYGON (((27131.28 30...\n5      BUKIT MERAH MULTIPOLYGON (((26451.03 30...\n6      BUKIT MERAH MULTIPOLYGON (((25899.7 297...\n7      BUKIT MERAH MULTIPOLYGON (((27746.95 30...\n8  SINGAPORE RIVER MULTIPOLYGON (((29351.26 29...\n9       QUEENSTOWN MULTIPOLYGON (((20996.49 30...\n10      QUEENSTOWN MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands_on_Ex_1.html#interlaying-features-with-different-coordinate-systems",
    "href": "Hands_on_Ex_1.html#interlaying-features-with-different-coordinate-systems",
    "title": "Hands-on Exercise 1",
    "section": "Interlaying features with different Coordinate Systems",
    "text": "Interlaying features with different Coordinate Systems\nNeed to transform different coordinate systems into same one\nSometimes during importing, the coordinate system might be wrong. need to check using st_crs()\n\nst_crs(mpsz) #SVY21 should be 3414 but in here is it 9001. SO wrongly tagged\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 <- st_set_crs(mpsz, 3414) #change the code back to 3414\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414) #checked and changed\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nTo calculate distance you need projected coorindate systems (2D) vs geographic coordinate system (flat)\n\nst_geometry(preschool) #check geometry of preschool\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.7009 1.338325 0)\n\n\nPOINT Z (103.8987 1.39044 0)\n\n\nPOINT Z (103.8068 1.438017 0)\n\n\nPOINT Z (103.7874 1.433436 0)\n\n\nPOINT Z (103.8886 1.395647 0)\n\n\nFrom one coordinate system to another need to reproject. Use ST_transform, cannot just use set_crs().This method does not reproject.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\nst_geometry(preschool3414)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (13258.34 35611.04 0)\n\n\nPOINT Z (35272.09 41373.42 0)\n\n\nPOINT Z (25050.54 46634.14 0)\n\n\nPOINT Z (22892.48 46127.66 0)\n\n\nPOINT Z (34155.79 41949.13 0)\n\n\n\nAspatial Data\nNot geospatial but 2 columns with x and y axis\n\nlistings <- as_tibble(read.csv(\"Hands-on_Ex01/data/aspatial/listings.csv\"))\nhead(listings)\n\n# A tibble: 6 × 75\n      id listing_…¹ scrap…² last_…³ source name  descr…⁴ neigh…⁵ pictu…⁶ host_id\n   <dbl> <chr>        <dbl> <chr>   <chr>  <chr> <chr>   <chr>   <chr>     <int>\n1  50646 https://w… 2.02e13 2022-0… previ… Plea… \"Fully… \"The s… https:…  227796\n2  71609 https://w… 2.02e13 2022-0… city … Ensu… \"For 3… \"\"      https:…  367042\n3  71896 https://w… 2.02e13 2022-0… city … B&B … \"<b>Th… \"\"      https:…  367042\n4  71903 https://w… 2.02e13 2022-0… city … Room… \"Like … \"Quiet… https:…  367042\n5 275344 https://w… 2.02e13 2022-0… city … 15 m… \"Lovel… \"Bus s… https:… 1439258\n6 289234 https://w… 2.02e13 2022-0… city … Book… \"This … \"A qui… https:…  367042\n# … with 65 more variables: host_url <chr>, host_name <chr>, host_since <chr>,\n#   host_location <chr>, host_about <chr>, host_response_time <chr>,\n#   host_response_rate <chr>, host_acceptance_rate <chr>,\n#   host_is_superhost <chr>, host_thumbnail_url <chr>, host_picture_url <chr>,\n#   host_neighbourhood <chr>, host_listings_count <int>,\n#   host_total_listings_count <int>, host_verifications <chr>,\n#   host_has_profile_pic <chr>, host_identity_verified <chr>, …\n\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 75\n       id listing…¹ scrap…² last_…³ source name  descr…⁴ neigh…⁵ pictu…⁶ host_id\n    <dbl> <chr>       <dbl> <chr>   <chr>  <chr> <chr>   <chr>   <chr>     <int>\n 1  50646 https://… 2.02e13 2022-0… previ… Plea… \"Fully… \"The s… https:…  227796\n 2  71609 https://… 2.02e13 2022-0… city … Ensu… \"For 3… \"\"      https:…  367042\n 3  71896 https://… 2.02e13 2022-0… city … B&B … \"<b>Th… \"\"      https:…  367042\n 4  71903 https://… 2.02e13 2022-0… city … Room… \"Like … \"Quiet… https:…  367042\n 5 275344 https://… 2.02e13 2022-0… city … 15 m… \"Lovel… \"Bus s… https:… 1439258\n 6 289234 https://… 2.02e13 2022-0… city … Book… \"This … \"A qui… https:…  367042\n 7 294281 https://… 2.02e13 2022-0… city … 5 mi… \"I hav… \"\"      https:… 1521514\n 8 324945 https://… 2.02e13 2022-0… city … Cozy… \"<b>Th… \"\"      https:… 1439258\n 9 330089 https://… 2.02e13 2022-0… city … Cozy… \"A uni… \"\"      https:… 1439258\n10 330095 https://… 2.02e13 2022-0… city … 10 m… \"Cosy,… \"Near … https:… 1439258\n# … with 4,151 more rows, 65 more variables: host_url <chr>, host_name <chr>,\n#   host_since <chr>, host_location <chr>, host_about <chr>,\n#   host_response_time <chr>, host_response_rate <chr>,\n#   host_acceptance_rate <chr>, host_is_superhost <chr>,\n#   host_thumbnail_url <chr>, host_picture_url <chr>, host_neighbourhood <chr>,\n#   host_listings_count <int>, host_total_listings_count <int>,\n#   host_verifications <chr>, host_has_profile_pic <chr>, …\n\ncolnames(listings)\n\n [1] \"id\"                                          \n [2] \"listing_url\"                                 \n [3] \"scrape_id\"                                   \n [4] \"last_scraped\"                                \n [5] \"source\"                                      \n [6] \"name\"                                        \n [7] \"description\"                                 \n [8] \"neighborhood_overview\"                       \n [9] \"picture_url\"                                 \n[10] \"host_id\"                                     \n[11] \"host_url\"                                    \n[12] \"host_name\"                                   \n[13] \"host_since\"                                  \n[14] \"host_location\"                               \n[15] \"host_about\"                                  \n[16] \"host_response_time\"                          \n[17] \"host_response_rate\"                          \n[18] \"host_acceptance_rate\"                        \n[19] \"host_is_superhost\"                           \n[20] \"host_thumbnail_url\"                          \n[21] \"host_picture_url\"                            \n[22] \"host_neighbourhood\"                          \n[23] \"host_listings_count\"                         \n[24] \"host_total_listings_count\"                   \n[25] \"host_verifications\"                          \n[26] \"host_has_profile_pic\"                        \n[27] \"host_identity_verified\"                      \n[28] \"neighbourhood\"                               \n[29] \"neighbourhood_cleansed\"                      \n[30] \"neighbourhood_group_cleansed\"                \n[31] \"latitude\"                                    \n[32] \"longitude\"                                   \n[33] \"property_type\"                               \n[34] \"room_type\"                                   \n[35] \"accommodates\"                                \n[36] \"bathrooms\"                                   \n[37] \"bathrooms_text\"                              \n[38] \"bedrooms\"                                    \n[39] \"beds\"                                        \n[40] \"amenities\"                                   \n[41] \"price\"                                       \n[42] \"minimum_nights\"                              \n[43] \"maximum_nights\"                              \n[44] \"minimum_minimum_nights\"                      \n[45] \"maximum_minimum_nights\"                      \n[46] \"minimum_maximum_nights\"                      \n[47] \"maximum_maximum_nights\"                      \n[48] \"minimum_nights_avg_ntm\"                      \n[49] \"maximum_nights_avg_ntm\"                      \n[50] \"calendar_updated\"                            \n[51] \"has_availability\"                            \n[52] \"availability_30\"                             \n[53] \"availability_60\"                             \n[54] \"availability_90\"                             \n[55] \"availability_365\"                            \n[56] \"calendar_last_scraped\"                       \n[57] \"number_of_reviews\"                           \n[58] \"number_of_reviews_ltm\"                       \n[59] \"number_of_reviews_l30d\"                      \n[60] \"first_review\"                                \n[61] \"last_review\"                                 \n[62] \"review_scores_rating\"                        \n[63] \"review_scores_accuracy\"                      \n[64] \"review_scores_cleanliness\"                   \n[65] \"review_scores_checkin\"                       \n[66] \"review_scores_communication\"                 \n[67] \"review_scores_location\"                      \n[68] \"review_scores_value\"                         \n[69] \"license\"                                     \n[70] \"instant_bookable\"                            \n[71] \"calculated_host_listings_count\"              \n[72] \"calculated_host_listings_count_entire_homes\" \n[73] \"calculated_host_listings_count_private_rooms\"\n[74] \"calculated_host_listings_count_shared_rooms\" \n[75] \"reviews_per_month\"                           \n\n\n\nlistings_sf <- st_as_sf(listings, coords = c(\"longitude\",\"latitude\"),\n         crs = 4326) %>%\n  st_transform(crs = 3414)\n\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 74\n$ id                                           <dbl> 50646, 71609, 71896, 7190…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.022092e+13, 2.022092e+1…\n$ last_scraped                                 <chr> \"2022-09-23\", \"2022-09-22…\n$ source                                       <chr> \"previous scrape\", \"city …\n$ name                                         <chr> \"Pleasant Room along Buki…\n$ description                                  <chr> \"Fully furnished bedroom …\n$ neighborhood_overview                        <chr> \"The serenity & quiet sur…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <int> 227796, 367042, 367042, 3…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Sujatha\", \"Belinda\", \"Be…\n$ host_since                                   <chr> \"2010-09-08\", \"2011-01-29…\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"I am a working professio…\n$ host_response_time                           <chr> \"a few days or more\", \"wi…\n$ host_response_rate                           <chr> \"0%\", \"100%\", \"100%\", \"10…\n$ host_acceptance_rate                         <chr> \"N/A\", \"100%\", \"100%\", \"1…\n$ host_is_superhost                            <chr> \"f\", \"f\", \"f\", \"f\", \"f\", …\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Bukit Timah\", \"Tampines\"…\n$ host_listings_count                          <int> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ host_total_listings_count                    <int> 4, 15, 15, 15, 57, 15, 8,…\n$ host_verifications                           <chr> \"['email', 'phone', 'work…\n$ host_has_profile_pic                         <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ host_identity_verified                       <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ neighbourhood                                <chr> \"Singapore, Singapore\", \"…\n$ neighbourhood_cleansed                       <chr> \"Bukit Timah\", \"Tampines\"…\n$ neighbourhood_group_cleansed                 <chr> \"Central Region\", \"East R…\n$ property_type                                <chr> \"Private room in rental u…\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <int> 2, 6, 1, 2, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 bath\", \"1 private bath…\n$ bedrooms                                     <int> 1, 2, 1, 1, 1, 3, 1, 1, N…\n$ beds                                         <int> 1, 3, 1, 2, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Gym\\\", \\\"Washer\\\", \\\"…\n$ price                                        <chr> \"$80.00\", \"$145.00\", \"$85…\n$ minimum_nights                               <int> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights                               <int> 730, 1125, 1125, 1125, 99…\n$ minimum_minimum_nights                       <int> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_minimum_nights                       <int> 92, 92, 92, 92, 60, 92, 9…\n$ minimum_maximum_nights                       <int> 730, 1125, 1125, 1125, 99…\n$ maximum_maximum_nights                       <int> 730, 1125, 1125, 1125, 99…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 730, 1125, 1125, 1125, 99…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ availability_30                              <int> 30, 5, 0, 30, 0, 0, 30, 5…\n$ availability_60                              <int> 60, 35, 1, 60, 0, 0, 60, …\n$ availability_90                              <int> 90, 65, 1, 90, 21, 10, 90…\n$ availability_365                             <int> 365, 340, 265, 365, 296, …\n$ calendar_last_scraped                        <chr> \"2022-09-23\", \"2022-09-22…\n$ number_of_reviews                            <int> 18, 20, 24, 47, 14, 12, 1…\n$ number_of_reviews_ltm                        <int> 0, 0, 0, 0, 1, 0, 0, 3, 2…\n$ number_of_reviews_l30d                       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 <chr> \"2014-04-18\", \"2011-12-19…\n$ last_review                                  <chr> \"2014-12-26\", \"2020-01-17…\n$ review_scores_rating                         <dbl> 4.56, 4.44, 4.16, 4.41, 4…\n$ review_scores_accuracy                       <dbl> 4.72, 4.37, 4.22, 4.39, 4…\n$ review_scores_cleanliness                    <dbl> 4.78, 4.00, 4.09, 4.52, 4…\n$ review_scores_checkin                        <dbl> 4.78, 4.63, 4.43, 4.63, 4…\n$ review_scores_communication                  <dbl> 4.94, 4.78, 4.43, 4.64, 4…\n$ review_scores_location                       <dbl> 4.72, 4.26, 4.17, 4.50, 4…\n$ review_scores_value                          <dbl> 4.50, 4.32, 4.04, 4.36, 4…\n$ license                                      <chr> \"\", \"\", \"\", \"\", \"S0399\", …\n$ instant_bookable                             <chr> \"f\", \"f\", \"t\", \"f\", \"f\", …\n$ calculated_host_listings_count               <int> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ calculated_host_listings_count_entire_homes  <int> 0, 0, 0, 0, 2, 0, 1, 2, 2…\n$ calculated_host_listings_count_private_rooms <int> 1, 6, 6, 6, 42, 6, 6, 42,…\n$ calculated_host_listings_count_shared_rooms  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.18, 0.15, 0.18, 0.34, 0…\n$ geometry                                     <POINT [m]> POINT (22646.02 351…\n\n\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n#create new column\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n#Sum area\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\nCount number of preschool on topi each planning zone\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\nplot(mpsz3414['PreSch Count'])\n\n\n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nmpsz3414$Area\n\nUnits: [m^2]\n  [1]  1630379.27   559816.25   160807.50   595428.89   387429.44  1030378.79\n  [7]   551732.05   290184.65  1084792.32   631644.29  1826848.56   293706.40\n [13]  1844060.67   392563.34   506588.96 36707720.92  4207271.09  4963787.10\n [19]  2206319.46  4919132.37  3449640.61   103238.48  1127297.24  2701634.34\n [25]   276826.81    63664.97   196619.86   365333.43  1454827.65   853206.57\n [31]  1070723.26   533017.39   442502.83    93140.44   411722.82   587222.68\n [37]    39437.94   188767.49   133006.94   448127.58   521200.52   350787.56\n [43]   261843.90  1590339.80   886954.81   223206.60   200052.68   710568.70\n [49]   748684.00   591779.00  1755950.44   340743.34   329437.93   170664.30\n [55]   368482.99  7601894.00   221973.34   280174.77   214250.30   173121.77\n [61]   533671.25   145518.66   635704.06   503220.75    55681.28   116330.00\n [67]  2051652.62  2434594.03  1713623.00   310513.65  1386643.32  1951865.75\n [73]   452471.83   697501.71 27710950.08   171720.62  1097833.70  1053493.75\n [79]  2796006.83  3049720.08   336221.49   741437.99   460550.43   543483.68\n [85]   278303.54  1769495.16   385093.11   558760.53  5675810.85  2096085.23\n [91]   722588.68  2550461.67  2042630.98  3260399.46  1346152.78   171334.39\n [97]    49626.02   193992.35   120171.32   850853.91  1026467.39   167537.07\n[103]  1160017.48  2560995.94   735502.23   948158.91  1321089.88  2997307.46\n[109]  1376830.05  1926622.00  3203306.04  2349378.27   963198.88   485022.31\n[115]  1881305.83  1425083.18  2387277.53  1078992.03   459546.29   247887.63\n[121]   213581.64  2464856.70  1940693.42  2118499.41   485046.92   757907.61\n[127]   351242.25  1312922.68   946651.42   748043.28  1022292.30   410994.54\n[133]   839488.98  1228487.73   554623.68  3392897.36  1878092.48   867750.44\n[139]   639143.56  3260150.86   411403.94   418657.36  2098176.50  1524551.34\n[145]   813382.98  1484296.47  3108023.27  1037281.09  2820171.68   924762.48\n[151]  1806553.08  1404536.64  2379331.53  2077796.55  3142950.11  2636483.26\n[157]  1057165.24  1287949.82   439646.76   746882.30   446241.79   572502.14\n[163]  2959367.63  2158289.72  1347456.01  2338909.49  4297140.71   991039.78\n[169]  2049551.25  2579087.17  3187584.08   906317.39   380201.80   526383.35\n[175]   800298.56   898561.30  1793463.63  3188097.31   494504.07  1061889.35\n[181]  1794461.26  3475209.89  1225673.65  1974371.71  1085080.08  1964134.53\n[187]  1974943.24  4141322.43  4339824.14  1796058.93  2251155.70   776142.49\n[193]  2206305.01  1180126.11  1229894.42   964682.68  1263409.40   369770.56\n[199]  3203663.49  1107267.04  1287387.26   842667.63  1333532.99  1007410.00\n[205]   894516.08   911208.29  1143813.67  1328876.20   609894.67   763183.43\n[211]  2768353.56  3467036.98  7833992.84  2778635.66   862737.09  1583440.16\n[217]   846137.20  1744387.41  1001591.79  1097298.80  4848516.74   668454.44\n[223]   624877.50   674992.00  2330683.26  1093213.49  1861872.04   909418.57\n[229]  2114789.49  3334192.44  1515533.89   944998.45  1990788.40  1829821.69\n[235]  2259239.74  3860324.99   859179.18   546403.86  1948613.21  1078622.32\n[241]   687930.10  3023148.98   441733.44   970068.07  1235901.75  1639669.02\n[247]  2543106.63   955710.19   316882.02  1046417.00   921430.95  7370557.68\n[253]   684704.30  1511487.38  2459098.27  7034806.47  3652031.03  1719704.60\n[259]  1088638.01  1569034.78  1670029.86  2391082.76  1378710.54   923214.75\n[265]  5325421.58  1418284.25  1489246.88  5186128.08 35096028.59  1463278.18\n[271]   995944.77  1455507.86  1499108.63   924866.02  1340167.99  8453312.38\n[277]  1360000.63   143137.94   436368.53  1259743.11  3291405.51  1576001.48\n[283]  1665469.26  1767092.90 69748298.79  2050051.22  1517767.39   595652.14\n[289]  3284130.42  2553463.72   962437.40  1281296.51   758123.46   905921.12\n[295]  1611278.68  1261648.75 17494884.18  3450455.36  1741957.36  1394865.68\n[301]  1074375.12 67250562.96  7235809.44  2147082.07  1511000.36   936415.53\n[307]  1648629.91  1099394.72  2209210.71  1264384.79  2206695.55  1265919.30\n[313] 37147854.46  3916069.34  2175380.06  3621841.18  1432913.06  4387133.12\n[319]  1200804.56  2450783.61  1540733.67  1635808.13  2241386.62\n\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data = mpsz3414,\n       aes(x = as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light blue')+\n  labs(title = \"Are pre-school evenly distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are a few planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\nggplot(data = mpsz3414, \n       aes( x = as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) + \n  geom_point(size = 1.5, color = 'pink', shape = 23) +\n  labs(  x = \"Pre-school density (per km sq)\",\n         y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands_on_Ex_1.html#choropleth-mapping-with-r",
    "href": "Hands_on_Ex_1.html#choropleth-mapping-with-r",
    "title": "Hands-on Exercise 1",
    "section": "Choropleth Mapping with R",
    "text": "Choropleth Mapping with R\nRequire package readr, tidyr, dplyr, sf\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nImport Data\n\nmpsz <- st_read(dsn = \"Hands-on_Ex01/data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\npopdata <- read_csv(\"Hands-on_Ex01/data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Cleaning and Wrangling\nExtract only 2022 data. Columns needed are PA, SZ, Young, Economy Active, Aged, Total, Dependency\nYOUNG: age group 0 to 4 until age groyup 20 to 24, ECONOMY ACTIVE: age group 25-29 until age group 60-64, AGED: age group 65 and above, TOTAL: all age group, and DEPENDENCY: the ratio between young and aged against economy active group\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nMaking PA and SZ columns uppercase\nGoal is to join attribute data and geospatial data\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nPlease use a list of either functions or lambdas: \n\n  # Simple named list: \n  list(mean = mean, median = median)\n\n  # Auto named with `tibble::lst()`: \n  tibble::lst(mean, median)\n\n  # Using lambdas\n  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n#left join data tables\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020, \n          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nWrite mpsz_pop2020 to a rds file\n\nwrite_rds(mpsz_pop2020, \"Hands-on_Ex01/data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands_on_Ex_1.html#plotting-choropleth-map",
    "href": "Hands_on_Ex_1.html#plotting-choropleth-map",
    "title": "Hands-on Exercise 1",
    "section": "Plotting choropleth map",
    "text": "Plotting choropleth map\nPlot a map where fill of location is dependent on Dependency column Basic plot:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nAdvance Plot with more elements used:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nDrawing a base map\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\nAdding fill based on Dependency. Add under tm_polygons()\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nIf we choose to use tm_fill, it does not include borders. This is because tm_polygons() is actually tm_fill() + tm_borders()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1) #alpha param controls transparency\n\n\n\n\nOther arguments for tm_borders: col = border colour, lwd = border line width. The default is 1, and lty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands_on_Ex_1.html#data-classification-with-tmap",
    "href": "Hands_on_Ex_1.html#data-classification-with-tmap",
    "title": "Hands-on Exercise 1",
    "section": "Data Classification with Tmap",
    "text": "Data Classification with Tmap\nClassify observations into data ranges or classes\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nQuantile classification Method\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nEqual Data classification Method\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands_on_Ex_1.html#building-choropleth-map-with-self-defined-breaks",
    "href": "Hands_on_Ex_1.html#building-choropleth-map-with-self-defined-breaks",
    "title": "Hands-on Exercise 1",
    "section": "Building Choropleth map with self defined breaks",
    "text": "Building Choropleth map with self defined breaks\nWe can define the breaking points of the classes by adding it into the tm_fill() argument.\nLets try using quantile to break.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nBased on above, we will follow the quantiles to set as our break points\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\nWe can also define our colour scheme by using the palette argument in the tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIf we want to reverse shading (ie darker means lower dependency), wwe add a “-” in front of colour in the palette.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands_on_Ex_1.html#map-layouts",
    "href": "Hands_on_Ex_1.html#map-layouts",
    "title": "Hands-on Exercise 1",
    "section": "Map Layouts",
    "text": "Map Layouts\nWe can add objects into map such as compass, margins, adjust aspects ratio etc\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands_on_Ex_1.html#map-style",
    "href": "Hands_on_Ex_1.html#map-style",
    "title": "Hands-on Exercise 1",
    "section": "Map style",
    "text": "Map style\nUse tmap_style() to change\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\""
  },
  {
    "objectID": "Hands_on_Ex_1.html#adding-objects",
    "href": "Hands_on_Ex_1.html#adding-objects",
    "title": "Hands-on Exercise 1",
    "section": "Adding objects",
    "text": "Adding objects\nEg compass, scale bar, grid\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n##Faucet graphs\nWe can also have multiple small map images in one image\nWe can do this by controlling tm_fill and tm_layout\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nusing tm_facets\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\nMapping based on selection criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this webpage, I am going to share with you my learning journey of Geo-spatial analytics."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello there! I am Gladwin. I am a current postgraduate student with SMU doing analytics.\nI would like to use this site to showcase some of my work in geospatial analytics. In my free time i enjoy exploring outdoors and greenery. I love cycling and all things that involves speed! :D"
  },
  {
    "objectID": "Hands-on_Ex02/handson2.html",
    "href": "Hands-on_Ex02/handson2.html",
    "title": "Handson Excercise 2",
    "section": "",
    "text": "In this webpage, we intend to see if development of a province is evenly distributed. If it is not evenly distributed, we will check for spatial clustering and find out these clusters.\nWe will use GDP per capital as a measure of country’s development.\nSome of the libraries we will be using:\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nLoad packages, if unavailable, download\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nhunan <- left_join(hunan,hunan2012)\n\n\n\nWe do so with a comparison between 2 chlropeth maps. One uses\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\nIn here we learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\nFrom here we can determine if spatial arrangement are random or not.\n\n\nWe will need to first construct the spatial weight matrix of the study area. We use the queen method to identify the neighbours of each spatial unit. Below code creates a nb object using the poly2nb() function.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\nAfter identifying neighbours, we need to allocate weights. We will be allocating equal weights in row standardised form. Each entry will be a fraction of 1/(sum of neighbours of that spatial unit).\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nFor future references, style = “W” refers to equal weights. There are other options:\n\n“W”, “B”, “C”, “U”, “minmax” and “S”\nB is the basic binary coding\nW is row standardised (sums over all links to n)\nC is globally standardised (sums over all links to n)\nU is equal to C divided by the number of neighbours (sums over all links to unity)\nS is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n)\n\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list.\nThere are 2 types of Global Spatial Autocorrelation statistics. Moran’s I and Geary’s C. We will compute both.\n\n\n\nWe perform statistical testing using Moran’s I.\nH0: Spatial randomness - Observed spatial pattern of values is equally likely as any other pattern. Values at one location does not depend and affect another location.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nIf p value < 0.05, we can reject null hypothesis and conclude there is spatial autocorrelation.\nCaveat!!\nTo use Moran’s I, we assume that data is normaly distributed and random. However if it is not or we are unable to verify this assumption, we should use a monte carlo simulation. We conduct numerous rounds of Moran’s I n times to calculate the moran I statistics and take the average to compare with actual value of Moran’s I statistics.\nP value returned in the pseudo p-value of the test.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nIf p value < 0.05, we can reject null hypothesis and conclude there is spatial autocorrelation.\n\nmean(bperm$res[1:999]) #mean moran i simulated\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\nWe try using a different method known as Geary C. Geary C and Moran I are inversely related.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nIf p value < 0.05, we can reject null hypothesis and conclude there is spatial autocorrelation.\nLikewise we can do permutation test for Geary’s C.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\nExamine patterns are great to examine patterns of spatial autocorrelation. They show how the correlation changes as the distance between pairs increases.\n\n\nWe can define the number of lags (number of neighbours). In here we set order = 6.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nUsing 4 lags in the analysis is not significant.\nI >0: Clustered, observations similar\ni<0: Dispersed, observation dissimilar\n\n\n\nWe repeat the same but using Geary’s C.\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nC<1: Clustered, observations similar\nC>1: Dispersed, observation dissimilar\nIf C=1, observations are arranged randomly over space.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nOnly lag 1,2, 5 are significant.\n\n\n\n\n\nLocal Indicators of Spatial Association (LISA) measures existence of clusters in spatial arrangement. Cluster means that there are regions with statistics higher or lower than chance alone.\nIn this section, we apply appropriate LISA using local Moran’s to detect cluster or outlier of GDP per capita 2012 of Hunan Province, PRC.\n\n\nWe use local moran. We first calculate local moran Ii with given set of weights using, listw, of neighbouring weighting information and zi values\n\n\n\n\n\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\nNext we plot the value of local moran i (Ii) into choropleth mapping. We append the above data into a spatial polygon dataframe\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe above is plotting based on Ii values.\nIf we want to plot by p values, we can use below code and even customise cutoff.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), #define category\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIf want to plot them side by side, we do so again using tmap_arrange()\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\nFor significant spatial areas on the map, we color code it according to its spatial autocorrelation.\nThe first step is to plot the Moran scatter plot. The scatter plot shows the relationship between a chosen attribute and its spatially lagged values at neighbouring location. It helps us identify locations of clusters and outliers.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nHow do we interpret the above?\nThe Moran coefficient is equivalent to the slope of regression line on Moran plot. For each axis, the dotted lines represent the average of that attribute.\nThe x axis represents the value of GDPPC. The Y axis is spatial lag of GDPPC. Spatial lag is a variable that averages the neighbouring values of a location.\nThere are also 4 quadrants created by the dotted lines. Each quadrant can help to identify clusters and outliers.\n\n\n\n\n\nClusters\nTop right hand quadrant represents the HH cluster and bottom left represents the LL cluster. A cluster means the centre spatial unit is positively autocorrelated with its neighbours.\n\nHH cluster means centre spatial unit value is high and neighbouring values are also high\nLL cluster means centre spatial unit value is low and neighbouring values are also low\n\nOutliers\nTop left hand quadrant represents the LH outlier and bottom right represents the HL outlier. Outlier means the centre spatial unit is negatively autocorrelated with its neighbours.\n\nLH outlier means centre spatial unit value is low but neighbouring values are high\nHL cluster means centre spatial unit value is high but neighbouring values are low\n\nIn common practice, we standardise the axis as they might be in different ranges. We subtract values from the mean and divide by its standard deviation. We use scale() function and pipe it to become a vector data type.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\nStandardised Moran Scatterplot\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\nNow, we start preparing a LISA cluster map.\n\n#initialise vector\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nquadrant\n\n [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[39] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[77] 0 0 0 0 0 0 0 0 0 0 0 0\n\n\n\n#Divding high and low regions of attribute\nDV <- hunan$GDPPC - mean(hunan$GDPPC) \nDV\n\n [1]   -737.80682  -3423.80682  10187.19318     68.19318   1149.19318\n [6]   2732.19318  38713.19318  37797.19318  46261.19318 -11643.80682\n[11] -15907.80682   7686.19318   -418.80682 -13118.80682  -6590.80682\n[16]  13246.19318  41301.19318     13.19318   3080.19318  -2493.80682\n[21]    767.19318   1700.19318  -6403.80682  -7378.80682   6441.19318\n[26] -10070.80682  -4056.80682 -10660.80682 -11623.80682  -8992.80682\n[31] -10541.80682   -210.80682  -3886.80682  39852.19318  -6649.80682\n[36] -11006.80682 -14272.80682  -3503.80682 -11164.80682 -14832.80682\n[41]    841.19318  -8335.80682 -12292.80682 -13672.80682 -12890.80682\n[46]  31165.19318   4956.19318  -9841.80682 -11022.80682 -12824.80682\n[51]  -4067.80682   7132.19318 -14650.80682  -6932.80682 -14814.80682\n[56]  -9837.80682  -3093.80682   1853.19318  -8603.80682  -4316.80682\n[61] -11707.80682  -2462.80682  -9978.80682   6008.19318   7492.19318\n[66]  18092.19318  -7152.80682   9578.19318  -5690.80682  -4326.80682\n[71]  17086.19318  -3383.80682  11859.19318   3184.19318  -9780.80682\n[76]   1955.19318  -3766.80682  -4895.80682 -14751.80682  -6058.80682\n[81]  -6671.80682  -5022.80682   8448.19318  64251.19318  -1525.80682\n[86]   2655.19318  -6345.80682  -7236.80682\n\n\n\n#Divding high and low regions of spatially lagged attribute\nC_mI <- localMI[,1] - mean(localMI[,1])\nC_mI \n\n          1           2           3           4           5           6 \n-0.30221844 -0.27487180 -0.31273762 -0.29972750 -0.28593509 -0.33954380 \n          7           8           9          10          11          12 \n 3.06807170  1.25993963  4.12120865 -0.70007255 -0.89235134 -0.42505828 \n         13          14          15          16          17          18 \n-0.30321204 -0.67066658 -0.56918654  0.13335802 -1.06923631 -0.30077984 \n         19          20          21          22          23          24 \n-0.29075358 -0.27268559 -0.30657005 -0.28916925 -0.18268991 -0.15531348 \n         25          26          27          28          29          30 \n-0.52759582 -0.04077981 -0.11805029 -0.08223170  0.16407439 -0.14349603 \n         31          32          33          34          35          36 \n 0.02331158 -0.29202012 -0.19598741 -2.09108455 -0.29146643 -0.18264771 \n         37          38          39          40          41          42 \n 0.43649874 -0.14865072  0.22842506  0.50725511 -0.33340888  0.07509883 \n         43          44          45          46          47          48 \n 0.40928176  0.38852855 -0.24317176  1.82151593 -0.03804219  0.04662022 \n         49          50          51          52          53          54 \n-0.12061915 -0.01608851 -0.21697786 -0.58754861  0.45588117 -0.11898293 \n         55          56          57          58          59          60 \n 0.32989274 -0.32324261 -0.31032890 -0.30054993 -0.01423870 -0.23741635 \n         61          62          63          64          65          66 \n-0.09164795 -0.22015916 -0.30815499 -0.31613873 -0.23484594  1.56962191 \n         67          68          69          70          71          72 \n-1.29038827  0.24450175 -0.22757363 -0.28019095  1.07667831 -0.36977086 \n         73          74          75          76          77          78 \n-0.22199956  0.02789154 -0.05021676 -0.25956120 -0.23878379 -0.55468683 \n         79          80          81          82          83          84 \n 0.29424501 -0.44747359 -0.11285390 -0.23775259 -0.11834556  4.60145154 \n         85          86          87          88 \n-0.28602057 -0.05544925 -0.08654777 -0.05738377 \n\n\n\nsignif <- 0.05\n\nDefining the high-high, low-low, low-high and high-low categories.\n\nquadrant[DV >0 & C_mI>0] <- 4 ##HH      \nquadrant[DV <0 & C_mI<0] <- 1 ##LL \nquadrant[DV <0 & C_mI>0] <- 2 ##LH\nquadrant[DV >0 & C_mI<0] <- 3 ##HL\nquadrant[localMI[,5]>signif] <- 0 # non significant local MI areas bin into class 1\n\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nApart from cluster and outlier detection, we can use LISA to determin hotspot and coldspot.\nHotspot: high values cluster\nColdspot: low values cluster\nAn alternative is using Getis and Ord’s G-statistics. It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nSteps in using Getis and Ord’s G-statistics to identify hotspots or coldspots:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nFor Getis-Ord method, neighbours are defined based on distance instead of contiguity. Distance can be defined with either:\n\nFixed distance weight matrix\nAdaptive distance weight matrix\n\nFixed Distance Weight Matrix\nWe define a fixed distance proximity. Neighbours who are within the proximity are considered neighbours. However in scenarios where the polygon of reference is huge, little or no neighbours might be found as the distance between its cetriod to its border and defined distance proximity might be similar. In this scenario we can use adaptive distance weight matrix.\nAdaptive distance weight matrix\nThe distance is adaptive in the sense we define the proximity based on number of neighbours in interest.\nFirst we derive the centroids.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude) #long lat format\n\nNext, we define the cut off distance.\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords)) \nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE)) #cal centroid to neighbour distance\nsummary(k1dists) # find out min and max of 1 neighbour\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nWe can see furthest distance of 1 polygon centroid to neighbour border is 61.79 km max. We will use this as upperbound as it ensures more than 1 neighbour is found.\n\n\nWe can compute distance weight matrix using dnearneigh(). Next we convert the nb object into spatial weights object.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\nWe use K nearest neighbours.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\n\n\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame and renaming field name of gi values to gstat_fixed by using the code chunk below.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Inclass/Inclass2/Inclass2.html",
    "href": "Inclass/Inclass2/Inclass2.html",
    "title": "Inclass Exercise 2",
    "section": "",
    "text": "In this example, we need the following packages:\n\nsf\ntidyverse\ntmap\nspdep\nfunModeling - for Exploratory data analysis\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, funModeling)\n\nWe will be looking at Nigeria water point information. We will be extracting data from water point data exchange platform and from geo-boundaries. The former provides information on the water point data while the latter provides Local Government Area Boundary data of Nigeria.\n\n\nWe will save the water point shapefile into a simple feature data table using st_read().\nCRS = 4326 parameter will be used. This corresponds to WGS84 coordinate system. Data will take a while to load as there are 4million rows of data in geo_export file. Once loaded, we filter out water point data related to Nigeria only.\n\nwp <- st_read(dsn = \"geodata\",\n        layer = \"geo_export\",\n        crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")  #no need change projection system\n\nWe save the sf data table using write_rds() of readr package in rds data format. We will refer to wp_nga variable from here onward.\n\nwrite_rds(wp, \"geodata/wp_nga.rds\")\n\nNext, we import the boundary data of Nigeria into a simple feature data table.\n\nnga <- st_read(dsn = \"geodata\",\n               layer = \"nga_admbnda_adm2_osgof_271122\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_271122' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Inclass/Inclass2/geodata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhead(read_rds(\"geodata/wp_nga.rds\"),20)\n\nSimple feature collection with 20 features and 72 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3.597668 ymin: 4.97 xmax: 9.216867 ymax: 7.98\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   row_id                                       source  lat_deg  lon_deg\n1  429068                                        GRID3 7.980000 5.120000\n2  222071 Federal Ministry of Water Resources, Nigeria 6.964532 3.597668\n3  160612                                     WaterAid 6.486940 7.929720\n4  160669                                     WaterAid 6.727570 7.648670\n5  160642                                     WaterAid 6.779900 7.664850\n6  160628                                     WaterAid 6.955560 7.779170\n7  160632                                     WaterAid 7.017780 7.841670\n8  642747                   Living Water International 7.325500 8.985000\n9  642456                   Living Water International 7.171667 9.110000\n10 641347                   Living Water International 7.204867 9.216867\n   date_repor   time_repor status_id water_sour water_so_2\n1  2018-08-29 00:00:00.000   Unknown       <NA>       <NA>\n2  2015-08-16 00:00:00.000       Yes   Borehole       Well\n3  2020-12-04 00:00:00.000       Yes   Borehole       Well\n4  2020-12-04 00:00:00.000       Yes   Borehole       Well\n5  2020-12-04 00:00:00.000       Yes   Borehole       Well\n6  2020-12-04 00:00:00.000       Yes   Borehole       Well\n7  2020-12-04 00:00:00.000       Yes   Borehole       Well\n8  2016-10-03 00:00:00.000       Yes   Borehole       Well\n9  2016-10-03 00:00:00.000       Yes   Borehole       Well\n10 2015-03-28 00:00:00.000       Yes   Borehole       Well\n                   water_te_2     X_water_tec facility_t clean_coun clean_adm1\n1                    Tapstand        Tapstand   Improved    Nigeria      Ekiti\n2             Mechanized Pump Mechanized Pump   Improved    Nigeria       Ogun\n3                   Hand Pump       Hand Pump   Improved    Nigeria     Ebonyi\n4                        <NA>            <NA>   Improved    Nigeria      Enugu\n5                   Hand Pump       Hand Pump   Improved    Nigeria      Enugu\n6                   Hand Pump       Hand Pump   Improved    Nigeria      Benue\n7                   Hand Pump       Hand Pump   Improved    Nigeria      Benue\n8             Mechanized Pump Mechanized Pump   Improved    Nigeria      Benue\n9  Hand Pump - India Mark III       Hand Pump   Improved    Nigeria      Benue\n10 Hand Pump - India Mark III       Hand Pump   Improved    Nigeria      Benue\n      clean_adm2 clean_adm3 clean_adm4 install_ye installer rehab_year\n1           Moba       <NA>       <NA>         NA      <NA>         NA\n2  Obafemi-Owode       <NA>       <NA>         NA      <NA>         NA\n3        Ohaukwu       <NA>       <NA>         NA      <NA>         NA\n4        Isi-Uzo       <NA>       <NA>         NA      <NA>         NA\n5        Isi-Uzo       <NA>       <NA>         NA      <NA>         NA\n6        Okpokwu       <NA>       <NA>         NA      <NA>         NA\n7        Okpokwu       <NA>       <NA>         NA      <NA>         NA\n8          Gboko       <NA>       <NA>       2016      <NA>         NA\n9         Bukuru       <NA>       <NA>       2016      <NA>         NA\n10        Bukuru       <NA>       <NA>       2015      <NA>         NA\n   rehabilita manageme_2 status_cle  pay fecal_coli fecal_co_2\n1        <NA>       <NA>       <NA> <NA>       <NA>       <NA>\n2        <NA>      Other Functional   No       <NA>       <NA>\n3        <NA>       <NA>       <NA> <NA>       <NA>       <NA>\n4        <NA>       <NA>       <NA> <NA>       <NA>       <NA>\n5        <NA>       <NA>       <NA> <NA>       <NA>       <NA>\n6        <NA>       <NA>       <NA> <NA>       <NA>       <NA>\n7        <NA>       <NA>       <NA> <NA>       <NA>       <NA>\n8        <NA>       <NA>       <NA> <NA>       <NA>       <NA>\n9        <NA>       <NA>       <NA> <NA>       <NA>       <NA>\n10       <NA>       <NA>       <NA> <NA>       <NA>       <NA>\n           subjective                           activity_i scheme_id\n1                <NA> 1a117ba2-5256-4801-874c-f7611a4499dd      <NA>\n2  Acceptable quality                                 <NA>      <NA>\n3                <NA>                                 <NA>      <NA>\n4                <NA>                                 <NA>      <NA>\n5                <NA>                                 <NA>      <NA>\n6                <NA>                                 <NA>      <NA>\n7                <NA>                                 <NA>      <NA>\n8                <NA>                 NG160302LWI001005RNM      <NA>\n9                <NA>                 NG160115LOI001004RNM      <NA>\n10               <NA>                 NG150127LOI001004RNM      <NA>\n        wpdx_id     notes\n1  6FV7X4JC+222 Tap Water\n2  6FR5XH7X+R37     Ajura\n3  6FR9FWPH+QVH      <NA>\n4  6FR9PJHX+2FF      <NA>\n5  6FR9QMH7+XW9      <NA>\n6  6FR9XQ4H+6MF      <NA>\n7  6FV92R9R+4M7      <NA>\n8  6FVC8XGP+622      <NA>\n9  6FVF54C6+M26      <NA>\n10 6FVF6638+WPX      <NA>\n                                                                               orig_lnk\n1  https://nigeria.africageoportal.com/datasets/GRID3::grid3-nigeria-water-points/about\n2                                                                                  <NA>\n3                                                                                  <NA>\n4                                                                                  <NA>\n5                                                                                  <NA>\n6                                                                                  <NA>\n7                                                                                  <NA>\n8                                                                                  <NA>\n9                                                                                  <NA>\n10                                                                                 <NA>\n   photo_lnk country_id\n1       <NA>         NG\n2       <NA>         NG\n3       <NA>         NG\n4       <NA>         NG\n5       <NA>         NG\n6       <NA>         NG\n7       <NA>         NG\n8       <NA>         NG\n9       <NA>         NG\n10      <NA>         NG\n                                                                                           data_lnk\n1                   https://catalog.waterpointdata.org/datasets/grid3-nigeria-water-points-61ae7cd9\n2  https://catalog.waterpointdata.org/datasets/federal-ministry-of-water-resources-nigeria-5efb3667\n3                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n4                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n5                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n6                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n7                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n8                                         https://catalog.waterpointdata.org/datasets/test-5f17499e\n9                                         https://catalog.waterpointdata.org/datasets/test-5f17499e\n10                                        https://catalog.waterpointdata.org/datasets/test-5f17499e\n   distance_t  distance_2 distance_3 distance_4 distance_5\n1    767.3742   921.79187  3146.7332   41049.94    959.365\n2  13364.9005    48.87743  4167.5191   13898.65   9405.783\n3   9492.7619  4333.34280   693.2112   27381.92  72060.118\n4   9319.0815 23276.33227   307.7162   34823.61  31665.447\n5   5437.7141 18783.56566   134.6121   40785.89  31240.904\n6  15924.8971  5405.46137  1970.2183   46971.32  44105.500\n7  24001.9000  2251.27426  4376.8138   37454.57  45753.406\n8   1633.9414   354.17381   175.9985   66655.91  37337.052\n9   8213.0330 18316.99175   805.8909   88380.41  19153.497\n10 20473.3891 10939.38492   460.3086   94855.63   8470.018\n                                                                                                                                                                water_poin\n1                                                                              {\"2018-08-29\": {\"source\": \"GRID3\", \"status_id\": \"Unknown\", \"water_tech_clean\": \"Tapstand\"}}\n2  {\"2015-08-16\": {\"source\": \"Federal Ministry of Water Resources, Nigeria\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Mechanized Pump\"}}\n3                                            {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump\"}}\n4                                                                             {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\"}}\n5                                            {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump\"}}\n6                                            {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump\"}}\n7                                            {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump\"}}\n8                    {\"2016-10-03\": {\"source\": \"Living Water International\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Mechanized Pump\"}}\n9         {\"2016-10-03\": {\"source\": \"Living Water International\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump - India Mark III\"}}\n10        {\"2015-03-28\": {\"source\": \"Living Water International\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump - India Mark III\"}}\n   rehab_prio served_pop local_popu crucialnes pressure usage_cap is_urban\n1          NA         NA         NA         NA       NA       250     True\n2          NA        140        887  0.1578354 0.140000      1000    False\n3          NA          0          0         NA       NA       300    False\n4          NA        492        492  1.0000000 1.640000       300    False\n5          NA        868       1919  0.4523189 2.893333       300    False\n6          NA         81         81  1.0000000 0.270000       300    False\n7          NA          0          0         NA       NA       300    False\n8          NA       9969      13740  0.7255459 9.969000      1000     True\n9          NA        933        933  1.0000000 3.110000       300    False\n10         NA       1998      11854  0.1685507 6.660000       300    False\n   days_since staleness_ is_latest location_i cluster_si clean_co_2 country_na\n1        1483   62.65911         T     358773          1        NGA    Nigeria\n2        2592   44.17405         T     264633          1        NGA    Nigeria\n3         655   81.34550         T     397972          1        NGA    Nigeria\n4         655   81.34550         T     397984          1        NGA    Nigeria\n5         655   81.34550         T     397982          1        NGA    Nigeria\n6         655   81.34550         T     397976          1        NGA    Nigeria\n7         655   81.34550         T     397979          1        NGA    Nigeria\n8        2178   50.33174         T     321462          1        NGA    Nigeria\n9        2178   50.33174         T     321460          1        NGA    Nigeria\n10       2733   42.25373         T     224403          1        NGA    Nigeria\n                       water_so_3     water_tech                  status\n1                             Tap           <NA>                    <NA>\n2  Improved Tube well or borehole      Motorised Functional (and in use)\n3   Borehole fitted with Handpump           <NA>                    <NA>\n4       Gen. set powered borehole           <NA>                    <NA>\n5   Borehole fitted with Handpump           <NA>                    <NA>\n6   Borehole fitted with Handpump           <NA>                    <NA>\n7   Borehole fitted with Handpump           <NA>                    <NA>\n8                        Borehole    Submersible                    <NA>\n9                        Borehole India Mark III                    <NA>\n10                       Borehole India Mark III                    <NA>\n            adm2 adm3 management  adm1 lat_deg_or                   lat_lon_de\n1           <NA> <NA>       <NA>  <NA>         NA               (7.98?, 5.12?)\n2  Obafemi-Owode <NA>      Other  Ogun         NA     (6.9645317?, 3.5976683?)\n3           <NA> <NA>       <NA> Enugu         NA         (6.48694?, 7.92972?)\n4           <NA> <NA>       <NA> Enugu         NA         (6.72757?, 7.64867?)\n5           <NA> <NA>       <NA> Enugu         NA          (6.7799?, 7.66485?)\n6           <NA> <NA>       <NA> Enugu         NA         (6.95556?, 7.77917?)\n7           <NA> <NA>       <NA> Enugu         NA         (7.01778?, 7.84167?)\n8           <NA> <NA>       <NA>  <NA>         NA            (7.3255?, 8.985?)\n9           <NA> <NA>       <NA>  <NA>         NA        (7.171666667?, 9.11?)\n10          <NA> <NA>       <NA>  <NA>         NA (7.204866667?, 9.216866667?)\n   lon_deg_or\n1          NA\n2          NA\n3          NA\n4          NA\n5          NA\n6          NA\n7          NA\n8          NA\n9          NA\n10         NA\n                                                                                               public_dat\n1                    https://catalog.waterpointdata.org/datafiles/grid3-nigeria-water-points-61ae7cd9.csv\n2  https://catalog.waterpointdata.org/datafiles/federal-ministry-of-water-resources-nigeria-5efb3667.xlsx\n3                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n4                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n5                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n6                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n7                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n8                                          https://catalog.waterpointdata.org/datafiles/test-5f17499e.csv\n9                                          https://catalog.waterpointdata.org/datafiles/test-5f17499e.csv\n10                                         https://catalog.waterpointdata.org/datafiles/test-5f17499e.csv\n                                               converted count date_creat\n1                                                   <NA>     1 2021-12-06\n2  #status_id, #water_source, #pay, #status, #management     1 2020-06-30\n3                                                   <NA>     1 2020-12-21\n4                                                   <NA>     1 2020-12-21\n5                                                   <NA>     1 2020-12-21\n6                                                   <NA>     1 2020-12-21\n7                                                   <NA>     1 2020-12-21\n8                                                   <NA>     1 2020-07-21\n9                                                   <NA>     1 2020-07-21\n10                                                  <NA>     1 2020-07-21\n     time_creat date_updat   time_updat                  geometry\n1  21:12:57.000 2021-12-06 21:12:57.000         POINT (5.12 7.98)\n2  12:56:07.000 2020-06-30 12:56:07.000 POINT (3.597668 6.964532)\n3  19:26:15.000 2020-12-21 19:26:15.000   POINT (7.92972 6.48694)\n4  19:26:15.000 2020-12-21 19:26:15.000   POINT (7.64867 6.72757)\n5  19:26:15.000 2020-12-21 19:26:15.000    POINT (7.66485 6.7799)\n6  19:26:15.000 2020-12-21 19:26:15.000   POINT (7.77917 6.95556)\n7  19:26:15.000 2020-12-21 19:26:15.000   POINT (7.84167 7.01778)\n8  20:01:34.000 2020-07-21 20:01:34.000      POINT (8.985 7.3255)\n9  20:01:34.000 2020-07-21 20:01:34.000     POINT (9.11 7.171667)\n10 20:01:34.000 2020-07-21 20:01:34.000 POINT (9.216867 7.204867)\n\n\nFrom the above, we can see a number of NAs. We will replace NAs in ‘status_cle’ column with “unknown”. ‘status_cle’ shows the water point status and reports whether it is functional or not.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\nWe can visualise the various statuses of waterpoint using a bar chart with freq() function from funModeling library.\n\nfreq(data=wp_nga, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nAs we see, less than half of the water points in Nigeria is functional.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\nwp_nga\n\nSimple feature collection with 95008 features and 72 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   row_id                                       source  lat_deg  lon_deg\n1  429068                                        GRID3 7.980000 5.120000\n2  222071 Federal Ministry of Water Resources, Nigeria 6.964532 3.597668\n3  160612                                     WaterAid 6.486940 7.929720\n4  160669                                     WaterAid 6.727570 7.648670\n5  160642                                     WaterAid 6.779900 7.664850\n6  160628                                     WaterAid 6.955560 7.779170\n7  160632                                     WaterAid 7.017780 7.841670\n8  642747                   Living Water International 7.325500 8.985000\n9  642456                   Living Water International 7.171667 9.110000\n10 641347                   Living Water International 7.204867 9.216867\n   date_repor   time_repor status_id water_sour water_so_2\n1  2018-08-29 00:00:00.000   Unknown       <NA>       <NA>\n2  2015-08-16 00:00:00.000       Yes   Borehole       Well\n3  2020-12-04 00:00:00.000       Yes   Borehole       Well\n4  2020-12-04 00:00:00.000       Yes   Borehole       Well\n5  2020-12-04 00:00:00.000       Yes   Borehole       Well\n6  2020-12-04 00:00:00.000       Yes   Borehole       Well\n7  2020-12-04 00:00:00.000       Yes   Borehole       Well\n8  2016-10-03 00:00:00.000       Yes   Borehole       Well\n9  2016-10-03 00:00:00.000       Yes   Borehole       Well\n10 2015-03-28 00:00:00.000       Yes   Borehole       Well\n                   water_te_2     X_water_tec facility_t clean_coun clean_adm1\n1                    Tapstand        Tapstand   Improved    Nigeria      Ekiti\n2             Mechanized Pump Mechanized Pump   Improved    Nigeria       Ogun\n3                   Hand Pump       Hand Pump   Improved    Nigeria     Ebonyi\n4                        <NA>            <NA>   Improved    Nigeria      Enugu\n5                   Hand Pump       Hand Pump   Improved    Nigeria      Enugu\n6                   Hand Pump       Hand Pump   Improved    Nigeria      Benue\n7                   Hand Pump       Hand Pump   Improved    Nigeria      Benue\n8             Mechanized Pump Mechanized Pump   Improved    Nigeria      Benue\n9  Hand Pump - India Mark III       Hand Pump   Improved    Nigeria      Benue\n10 Hand Pump - India Mark III       Hand Pump   Improved    Nigeria      Benue\n      clean_adm2 clean_adm3 clean_adm4 install_ye installer rehab_year\n1           Moba       <NA>       <NA>         NA      <NA>         NA\n2  Obafemi-Owode       <NA>       <NA>         NA      <NA>         NA\n3        Ohaukwu       <NA>       <NA>         NA      <NA>         NA\n4        Isi-Uzo       <NA>       <NA>         NA      <NA>         NA\n5        Isi-Uzo       <NA>       <NA>         NA      <NA>         NA\n6        Okpokwu       <NA>       <NA>         NA      <NA>         NA\n7        Okpokwu       <NA>       <NA>         NA      <NA>         NA\n8          Gboko       <NA>       <NA>       2016      <NA>         NA\n9         Bukuru       <NA>       <NA>       2016      <NA>         NA\n10        Bukuru       <NA>       <NA>       2015      <NA>         NA\n   rehabilita manageme_2 status_cle  pay fecal_coli fecal_co_2\n1        <NA>       <NA>    Unknown <NA>       <NA>       <NA>\n2        <NA>      Other Functional   No       <NA>       <NA>\n3        <NA>       <NA>    Unknown <NA>       <NA>       <NA>\n4        <NA>       <NA>    Unknown <NA>       <NA>       <NA>\n5        <NA>       <NA>    Unknown <NA>       <NA>       <NA>\n6        <NA>       <NA>    Unknown <NA>       <NA>       <NA>\n7        <NA>       <NA>    Unknown <NA>       <NA>       <NA>\n8        <NA>       <NA>    Unknown <NA>       <NA>       <NA>\n9        <NA>       <NA>    Unknown <NA>       <NA>       <NA>\n10       <NA>       <NA>    Unknown <NA>       <NA>       <NA>\n           subjective                           activity_i scheme_id\n1                <NA> 1a117ba2-5256-4801-874c-f7611a4499dd      <NA>\n2  Acceptable quality                                 <NA>      <NA>\n3                <NA>                                 <NA>      <NA>\n4                <NA>                                 <NA>      <NA>\n5                <NA>                                 <NA>      <NA>\n6                <NA>                                 <NA>      <NA>\n7                <NA>                                 <NA>      <NA>\n8                <NA>                 NG160302LWI001005RNM      <NA>\n9                <NA>                 NG160115LOI001004RNM      <NA>\n10               <NA>                 NG150127LOI001004RNM      <NA>\n        wpdx_id     notes\n1  6FV7X4JC+222 Tap Water\n2  6FR5XH7X+R37     Ajura\n3  6FR9FWPH+QVH      <NA>\n4  6FR9PJHX+2FF      <NA>\n5  6FR9QMH7+XW9      <NA>\n6  6FR9XQ4H+6MF      <NA>\n7  6FV92R9R+4M7      <NA>\n8  6FVC8XGP+622      <NA>\n9  6FVF54C6+M26      <NA>\n10 6FVF6638+WPX      <NA>\n                                                                               orig_lnk\n1  https://nigeria.africageoportal.com/datasets/GRID3::grid3-nigeria-water-points/about\n2                                                                                  <NA>\n3                                                                                  <NA>\n4                                                                                  <NA>\n5                                                                                  <NA>\n6                                                                                  <NA>\n7                                                                                  <NA>\n8                                                                                  <NA>\n9                                                                                  <NA>\n10                                                                                 <NA>\n   photo_lnk country_id\n1       <NA>         NG\n2       <NA>         NG\n3       <NA>         NG\n4       <NA>         NG\n5       <NA>         NG\n6       <NA>         NG\n7       <NA>         NG\n8       <NA>         NG\n9       <NA>         NG\n10      <NA>         NG\n                                                                                           data_lnk\n1                   https://catalog.waterpointdata.org/datasets/grid3-nigeria-water-points-61ae7cd9\n2  https://catalog.waterpointdata.org/datasets/federal-ministry-of-water-resources-nigeria-5efb3667\n3                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n4                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n5                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n6                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n7                                 https://catalog.waterpointdata.org/datasets/rain-nigeria-5fe0f6d7\n8                                         https://catalog.waterpointdata.org/datasets/test-5f17499e\n9                                         https://catalog.waterpointdata.org/datasets/test-5f17499e\n10                                        https://catalog.waterpointdata.org/datasets/test-5f17499e\n   distance_t  distance_2 distance_3 distance_4 distance_5\n1    767.3742   921.79187  3146.7332   41049.94    959.365\n2  13364.9005    48.87743  4167.5191   13898.65   9405.783\n3   9492.7619  4333.34280   693.2112   27381.92  72060.118\n4   9319.0815 23276.33227   307.7162   34823.61  31665.447\n5   5437.7141 18783.56566   134.6121   40785.89  31240.904\n6  15924.8971  5405.46137  1970.2183   46971.32  44105.500\n7  24001.9000  2251.27426  4376.8138   37454.57  45753.406\n8   1633.9414   354.17381   175.9985   66655.91  37337.052\n9   8213.0330 18316.99175   805.8909   88380.41  19153.497\n10 20473.3891 10939.38492   460.3086   94855.63   8470.018\n                                                                                                                                                                water_poin\n1                                                                              {\"2018-08-29\": {\"source\": \"GRID3\", \"status_id\": \"Unknown\", \"water_tech_clean\": \"Tapstand\"}}\n2  {\"2015-08-16\": {\"source\": \"Federal Ministry of Water Resources, Nigeria\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Mechanized Pump\"}}\n3                                            {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump\"}}\n4                                                                             {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\"}}\n5                                            {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump\"}}\n6                                            {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump\"}}\n7                                            {\"2020-12-04\": {\"source\": \"WaterAid\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump\"}}\n8                    {\"2016-10-03\": {\"source\": \"Living Water International\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Mechanized Pump\"}}\n9         {\"2016-10-03\": {\"source\": \"Living Water International\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump - India Mark III\"}}\n10        {\"2015-03-28\": {\"source\": \"Living Water International\", \"status_id\": \"Yes\", \"water_source_clean\": \"Borehole\", \"water_tech_clean\": \"Hand Pump - India Mark III\"}}\n   rehab_prio served_pop local_popu crucialnes pressure usage_cap is_urban\n1          NA         NA         NA         NA       NA       250     True\n2          NA        140        887  0.1578354 0.140000      1000    False\n3          NA          0          0         NA       NA       300    False\n4          NA        492        492  1.0000000 1.640000       300    False\n5          NA        868       1919  0.4523189 2.893333       300    False\n6          NA         81         81  1.0000000 0.270000       300    False\n7          NA          0          0         NA       NA       300    False\n8          NA       9969      13740  0.7255459 9.969000      1000     True\n9          NA        933        933  1.0000000 3.110000       300    False\n10         NA       1998      11854  0.1685507 6.660000       300    False\n   days_since staleness_ is_latest location_i cluster_si clean_co_2 country_na\n1        1483   62.65911         T     358773          1        NGA    Nigeria\n2        2592   44.17405         T     264633          1        NGA    Nigeria\n3         655   81.34550         T     397972          1        NGA    Nigeria\n4         655   81.34550         T     397984          1        NGA    Nigeria\n5         655   81.34550         T     397982          1        NGA    Nigeria\n6         655   81.34550         T     397976          1        NGA    Nigeria\n7         655   81.34550         T     397979          1        NGA    Nigeria\n8        2178   50.33174         T     321462          1        NGA    Nigeria\n9        2178   50.33174         T     321460          1        NGA    Nigeria\n10       2733   42.25373         T     224403          1        NGA    Nigeria\n                       water_so_3     water_tech                  status\n1                             Tap           <NA>                    <NA>\n2  Improved Tube well or borehole      Motorised Functional (and in use)\n3   Borehole fitted with Handpump           <NA>                    <NA>\n4       Gen. set powered borehole           <NA>                    <NA>\n5   Borehole fitted with Handpump           <NA>                    <NA>\n6   Borehole fitted with Handpump           <NA>                    <NA>\n7   Borehole fitted with Handpump           <NA>                    <NA>\n8                        Borehole    Submersible                    <NA>\n9                        Borehole India Mark III                    <NA>\n10                       Borehole India Mark III                    <NA>\n            adm2 adm3 management  adm1 lat_deg_or                   lat_lon_de\n1           <NA> <NA>       <NA>  <NA>         NA               (7.98?, 5.12?)\n2  Obafemi-Owode <NA>      Other  Ogun         NA     (6.9645317?, 3.5976683?)\n3           <NA> <NA>       <NA> Enugu         NA         (6.48694?, 7.92972?)\n4           <NA> <NA>       <NA> Enugu         NA         (6.72757?, 7.64867?)\n5           <NA> <NA>       <NA> Enugu         NA          (6.7799?, 7.66485?)\n6           <NA> <NA>       <NA> Enugu         NA         (6.95556?, 7.77917?)\n7           <NA> <NA>       <NA> Enugu         NA         (7.01778?, 7.84167?)\n8           <NA> <NA>       <NA>  <NA>         NA            (7.3255?, 8.985?)\n9           <NA> <NA>       <NA>  <NA>         NA        (7.171666667?, 9.11?)\n10          <NA> <NA>       <NA>  <NA>         NA (7.204866667?, 9.216866667?)\n   lon_deg_or\n1          NA\n2          NA\n3          NA\n4          NA\n5          NA\n6          NA\n7          NA\n8          NA\n9          NA\n10         NA\n                                                                                               public_dat\n1                    https://catalog.waterpointdata.org/datafiles/grid3-nigeria-water-points-61ae7cd9.csv\n2  https://catalog.waterpointdata.org/datafiles/federal-ministry-of-water-resources-nigeria-5efb3667.xlsx\n3                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n4                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n5                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n6                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n7                                 https://catalog.waterpointdata.org/datafiles/rain-nigeria-5fe0f6d7.xlsx\n8                                          https://catalog.waterpointdata.org/datafiles/test-5f17499e.csv\n9                                          https://catalog.waterpointdata.org/datafiles/test-5f17499e.csv\n10                                         https://catalog.waterpointdata.org/datafiles/test-5f17499e.csv\n                                               converted count date_creat\n1                                                   <NA>     1 2021-12-06\n2  #status_id, #water_source, #pay, #status, #management     1 2020-06-30\n3                                                   <NA>     1 2020-12-21\n4                                                   <NA>     1 2020-12-21\n5                                                   <NA>     1 2020-12-21\n6                                                   <NA>     1 2020-12-21\n7                                                   <NA>     1 2020-12-21\n8                                                   <NA>     1 2020-07-21\n9                                                   <NA>     1 2020-07-21\n10                                                  <NA>     1 2020-07-21\n     time_creat date_updat   time_updat                  geometry\n1  21:12:57.000 2021-12-06 21:12:57.000         POINT (5.12 7.98)\n2  12:56:07.000 2020-06-30 12:56:07.000 POINT (3.597668 6.964532)\n3  19:26:15.000 2020-12-21 19:26:15.000   POINT (7.92972 6.48694)\n4  19:26:15.000 2020-12-21 19:26:15.000   POINT (7.64867 6.72757)\n5  19:26:15.000 2020-12-21 19:26:15.000    POINT (7.66485 6.7799)\n6  19:26:15.000 2020-12-21 19:26:15.000   POINT (7.77917 6.95556)\n7  19:26:15.000 2020-12-21 19:26:15.000   POINT (7.84167 7.01778)\n8  20:01:34.000 2020-07-21 20:01:34.000      POINT (8.985 7.3255)\n9  20:01:34.000 2020-07-21 20:01:34.000     POINT (9.11 7.171667)\n10 20:01:34.000 2020-07-21 20:01:34.000 POINT (9.216867 7.204867)\n\n\nNext we filter out water points that are functional.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n\n                   status_cle frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\nWe also filter out non functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00\n\n\nWe create another data table where status of water point is unknown.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\nlengths(st_intersects(nga, wp_nga))\n\n  [1]  17  71   0  57  48 233  34 119 152  66  39 135  63 128 348 169 106 186\n [19]  64  93  81  60  38 113  75  19  14 393 175 172  65   8 202 125 179 308\n [37]  62 227 288 156 298 256  14  47  60 180 365 105 324  96  40  69  54  73\n [55]  17  40   6  13  75  54  39   5 211 100 130  25 142  47  36 223 246 112\n [73] 112  67 556  93  26  35  40  33 894 210 316 103 280   0 349  78 265 281\n [91]  99 287 163 126 199 131 160 155 297  72  82 191  60 131 169 241 189 271\n[109]  97 776 159 167 120  97  73  98 124 358 228 129   4   2 108 177 133  22\n[127] 329  90  35 127 163  97 176   7 118  82  73  72 197  33   4 138  39  74\n[145] 203  18  64 165 115  77  54  90 299  95 211 143   8 104  13  40 110  88\n[163] 185 136  45 154  80 309  25 260 188 216 146 256  45  60  32  97 159  52\n[181]  47 486  33  68 202  90 162 234  36   2   6  65  23  24  19 207  32  34\n[199]  28  34 111  76  58  19  22  25  19  51  35  48  42  66 165  72  51  56\n[217] 364 314  63  55 345  19  13 190  71  70 153  59 445 443  81  14 433  89\n[235] 163 165 265 194 175 194   0 283 110  15 258   2  70  45  42   0  40   0\n[253]   2 117 383  67  82 343  96  22   0 114 118 124 196 104  76 126  21 202\n[271]  44 192  32   8  33 127  87  36 107  34 209 102 198 133  20  54  82  51\n[289]  59 104  28  23  49  56 103  48  61 154 197 137 178  84 155 601 126  83\n[307] 293  24  44  42  34  35 131  36  31  64  90  58 206 122  49   1  15 137\n[325]  45  21  38  97 185 201  63 240  58  47  66  33 318 107 173  29 139  42\n[343] 139  97 132 111 102 153  33 198  23  63  87 118 260 104 113 111  53  35\n[361] 106 244  58  89  64  76 155  61 123  39  32  24 143  71  60  44 255 160\n[379] 319 153   7 264  35 138 126 148 293 152  95 201 130 187  73  16 208 116\n[397] 148 246 123   0 185 206 301 178 286   0 105 300 290 127 448 139 232  68\n[415] 113 162 178 118  46 176 158 551 141  95 173 383  77  64  77  45 213  87\n[433] 499 227 552  70 148 105  20   3 361  81  58 240 154 143   0  51 128 131\n[451] 206 196 102 178 150  87 131   3 271 125  37  42   2 375  92 118 176 100\n[469] 184 147  57  37   0 175   1 100   9 251 133 170  17 100 106  92 252  96\n[487] 316 145  96 118 114   0 167  56 122 193  12  55  42  20  64 295 206 131\n[505] 115  76   0 190  26  86 175   1   1 143  32  95 148  37 100 145 159  83\n[523]  46  43 100   0 115  68 444  92  15  34  54  79  33  39  33  68  49  88\n[541]  56   1  28  66 182 166  88 173 125 202  63  66 233 239 113 172 304  77\n[559] 167 188  34  62  81  46  40 100 116 186 273  48   1  74  99  38 178 275\n[577] 357  65  38  87 273 207  74 100  41  75  74  13  59  12 148  23 181  99\n[595]  74  37  25 114 135 161 438  13  12  63  11  69  98 111 239 259  51 120\n[613]  20  20  39  41  59  66  33 150  33  23  47  44 172  62  83  77  63  44\n[631]  31  68  61 181 142  73  17  88  64 335  94 398  11 275 115  72 345  63\n[649] 132 100  44 151  91 166 144 304 185 225 396  77  43 161  62 145 109 148\n[667] 109 154  12  50 122  52 103  41  83   9 428 157 205 109 251  14  60 413\n[685]  33  25  28  31 485  41 277  60  61 189  64 128   3 445 180 187  89  64\n[703]  67 224  36 665 111 133 117   5 199 155 169 111  22 105  11  54  53  25\n[721]  88  63  42 158  90 124  54  44  74 103 151   6  48  56 229 185  11  80\n[739]  25 168  81 102 199 275  30  52   7 175 178 144 243  59 139  82  59 119\n[757] 325 339 248 226  26  27  26  13 199   6  42 423 107 389 319 190 129  70\n\n\nWe use st_intersects() to find the various status of water point in Nigeria and use length() to measure the count.\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\nLastly, we save the the output in a new data table.\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")\n\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\") +\n tm_layout(legend.outside = TRUE,\n            legend.outside.position = 'right')\nwp_functional <- qtm(nga_wp, \"wpt functional\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = 'right')\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = 'right')\nunknown <- qtm(nga_wp, \"wpt unknown\") +\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = 'right')\n\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)"
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html",
    "href": "Takehome/Takehome1/takehome1.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "In this example, we use the following libraries:\n\nsf\ntidyverse\ntmap\nspdep\nfunModeling\nshinyjs\n\nThe below code chunk below will load the following libraries. If the libraries are not installed, installation will begin and the libraries will be loaded after.\n\npacman::p_load(sf, spdep, tmap, tidyverse, funModeling, shinyjs)"
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#removing-nas",
    "href": "Takehome/Takehome1/takehome1.html#removing-nas",
    "title": "Take Home Exercise 1",
    "section": "3.1 Removing NAs",
    "text": "3.1 Removing NAs\nR interprets NA as blank when instead it actually means unknown. We can use mutate() function from dplyr package. mutate() is a window function which applies a desired operation to every row in the sf data frame. Here we will replace “NA” with “Unknown” and overwrite the wp_nga.rds file.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\nWe use fre() function from funModeling library to draw frequency bar charts of the various functions.\n\nfreq(data=wp_nga, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00"
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#categorizing-water-point-status",
    "href": "Takehome/Takehome1/takehome1.html#categorizing-water-point-status",
    "title": "Take Home Exercise 1",
    "section": "3.2 Categorizing Water Point Status",
    "text": "3.2 Categorizing Water Point Status\nWe can categorise the status into 3 groups - Functional, Non Function, Unknown\n\nWe break the category each into a dataframe on its own. We use the filter() function from dplyr.\n\n\n\n\n\n\n\nFunctional\nNon-Functional\nUnknown\n\n\n\n\nFunctional\nNon-Functional\nUnknown\n\n\nFunctional but needs repair\nNon Functional due to dry season\n\n\n\nFunctional but not in use\nAbandoned/Decommissioned\n\n\n\n\nAbandoned\n\n\n\n\nNon functional due to dry season\n\n\n\n\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#exploratory-data-analysis-of-functional-vs-non-functional-water-points",
    "href": "Takehome/Takehome1/takehome1.html#exploratory-data-analysis-of-functional-vs-non-functional-water-points",
    "title": "Take Home Exercise 1",
    "section": "3.3 Exploratory Data Analysis of Functional vs Non Functional Water Points",
    "text": "3.3 Exploratory Data Analysis of Functional vs Non Functional Water Points\nFor functional water points, the breakdown is:\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n\n                   status_cle frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\nFor non - functional water points, the breakdown is:\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00"
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#choropleth-mapping",
    "href": "Takehome/Takehome1/takehome1.html#choropleth-mapping",
    "title": "Take Home Exercise 1",
    "section": "4.1 Choropleth Mapping",
    "text": "4.1 Choropleth Mapping\nIn this section we will construct Thematic Mapping to show the spatial distribution of functional and non functional water point rate at LGA level using tmap library.\nThe thematic mapping palette can be chosen from a range of options. We can use the below code to find out the various options:\n\ntmaptools::palette_explorer()\n\nFirstly, the thematic mapping is based on the discrete data class interval classification of the percentage of functional and non functional water point. The way we classify the intervals will have an impact on the thematic representation of the map.\nThe classification options we have are: \"cat\", \"fixed\", \"sd\", \"equal\", \"pretty\", \"quantile\", \"kmeans\", \"hclust\", \"bclust\", \"fisher\", \"jenks\", \"dpih\", \"headtails\", \nThe jenk natural breaks style below classified into intervals by identifying groups of similar values and maximizes the differences.\n\ntm_shape(nga_wp)+\n  tm_fill(\"pct_nonfunc\",\n          style = \"jenks\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Non Functional water points by LGA level (Jenks classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\n\n\n\nNext, we can trying building class intervals equally.\n\ntm_shape(nga_wp)+\n  tm_fill(\"pct_nonfunc\",\n          style = \"equal\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Non Functional water points by LGA level (Equal classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\n\n\n\nWe can also use quantile.\n\ntm_shape(nga_wp)+\n  tm_fill(\"pct_nonfunc\",\n          style = \"quantile\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Non Functional water points by LGA level (Quantile classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\n\n\n\nWe can also split using bagged clustering to cluster the percentages into intervals.\n\ntm_shape(nga_wp)+\n  tm_fill(\"pct_nonfunc\",\n          style = \"bclust\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Non Functional water points by LGA level (Bagged Clustering classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nAre they different? To analyse we can use tmap_arrange() to put them together to compare side by side\n\nnf_1 <-tm_shape(nga_wp)+\n  tm_fill(\"pct_nonfunc\",\n          style = \"jenks\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Non Functioal (Jenks classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nnf_2 <- tm_shape(nga_wp)+\n  tm_fill(\"pct_nonfunc\",\n          style = \"equal\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Non Functioal (Equal classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nnf_3 <- tm_shape(nga_wp)+\n  tm_fill(\"pct_nonfunc\",\n          style = \"quantile\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Non Functioal (Quantile classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nnf_4 <- tm_shape(nga_wp)+\n  tm_fill(\"pct_nonfunc\",\n          style = \"bclust\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Non Functional (Bagged Clustering\\nclassification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\n\ntmap_arrange(nf_1, nf_2, nf_3, nf_4)\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nFrom the above, we can see the thematic of the map changes based on how we classify the data. There seems to be some clustering of similarly non functional percentage of water points in LGA level boundaries. However we should do a formal statistical test to see if there is spatial association between the LGA level boundaries instead of relying on visualisation to draw conclusions.\nWe will select bagged classification as the bagged classification is a popular clustering machine learning technique with proven good performance.\nWe do the same for functional water points.\n\na1 <-tm_shape(nga_wp)+\n  tm_fill(\"pct_func\",\n          style = \"jenks\",\n          palette = \"YlGn\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Functional Points (Jenks classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\na2 <- tm_shape(nga_wp)+\n  tm_fill(\"pct_func\",\n          style = \"equal\",\n          palette = \"YlGn\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Functional Points (Equal classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\na3<- tm_shape(nga_wp)+\n  tm_fill(\"pct_func\",\n          style = \"quantile\",\n          palette = \"YlGn\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Functional Points (Quantile classification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\na4 <- tm_shape(nga_wp)+\n  tm_fill(\"pct_func\",\n          style = \"bclust\",\n          palette = \"YlGn\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Functional Points (Bagged Clustering\\nclassification)\",\n            main.title.size = 1,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\n\ntmap_arrange(a1, a2, a3, a4)\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nWe can put functional and non functional water point distribution maps side by side\n\ntmap_arrange(a4, nf_4)\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nAs expected, polygons where there are more functional water points have less non-functional water points and vice versa.\nWe can also create an interactive map by using tmap_mode(“view”). We can add bubbles using tm_bubbles() and add labels to include the cities. Below code chunk is used to overlay the percentage of non functional water points on the map. The size of the bubble is proportion to the percentage.\n\ntmap_mode(\"view\")\ntm_shape(nga_wp) + \n  tm_bubbles(size = \"pct_nonfunc\", col = \"red\", border.lwd = 2, border.col = \"black\") +\n  tm_tiles(\"Stamen.TonerLabels\")\n\n\n\n\n\n\nWe create another version for functional water points.\n\ntmap_mode(\"view\")\ntm_shape(nga_wp) + \n  tm_bubbles(size = \"pct_func\", col = \"blue\", border.lwd = 2, border.col = \"white\") +\n  tm_tiles(\"Stamen.TonerLabels\")\n\n\n\n\n\n\nFor both functional and non functional water points, we will select the data class interval using bagged cluster style.\nNext, we reduce the overall sf data table size of nga_wp by selecting only the useful columns. We save the new table into a new .rds file\n\nnga_wp_s <- nga_wp %>%\n  select(3:4, 9:10, 18:23)\n\nwrite_rds(nga_wp_s, \"geodata/nga_wp_s.rds\")\n\n\nnga_wp_s <- read_rds(\"geodata/nga_wp_s.rds\")\nnga_wp_s\n\nSimple feature collection with 774 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28879.72 ymin: 30292.37 xmax: 1343798 ymax: 1094244\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n          ADM2_EN ADM2_PCODE ADM1_PCODE ADM0_EN total_wpt wpt_func wpt_nonfunc\n1       Aba North   NG001001      NG001 Nigeria        17        7           9\n2       Aba South   NG001002      NG001 Nigeria        71       29          35\n3          Abadam   NG008001      NG008 Nigeria         0        0           0\n4           Abaji   NG015001      NG015 Nigeria        57       23          34\n5            Abak   NG003001      NG003 Nigeria        48       23          25\n6       Abakaliki   NG011001      NG011 Nigeria       233       82          42\n7  Abeokuta North   NG028001      NG028 Nigeria        34       16          15\n8  Abeokuta South   NG028002      NG028 Nigeria       119       72          33\n9             Abi   NG009001      NG009 Nigeria       152       79          62\n10    Aboh-Mbaise   NG017001      NG017 Nigeria        66       18          26\n   wpt_unknown  pct_func pct_nonfunc                       geometry\n1            1 0.4117647   0.5294118 MULTIPOLYGON (((552560.3 12...\n2            7 0.4084507   0.4929577 MULTIPOLYGON (((551048.7 12...\n3            0 0.0000000   0.0000000 MULTIPOLYGON (((1245549 106...\n4            0 0.4035088   0.5964912 MULTIPOLYGON (((510602.3 57...\n5            0 0.4791667   0.5208333 MULTIPOLYGON (((598086 1218...\n6          109 0.3519313   0.1802575 MULTIPOLYGON (((663801.7 25...\n7            3 0.4705882   0.4411765 MULTIPOLYGON (((81132.88 37...\n8           14 0.6050420   0.2773109 MULTIPOLYGON (((109265.1 34...\n9           11 0.5197368   0.4078947 MULTIPOLYGON (((635478 2187...\n10          22 0.2727273   0.3939394 MULTIPOLYGON (((543608.8 15..."
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#choosing-a-spatial-weighting-method",
    "href": "Takehome/Takehome1/takehome1.html#choosing-a-spatial-weighting-method",
    "title": "Take Home Exercise 1",
    "section": "5.1 Choosing a Spatial Weighting Method",
    "text": "5.1 Choosing a Spatial Weighting Method\nSpatial association analysis always involves neighbours of the polygon in focus. We assign weights to the neighbours surrounding the polygon being studied in a matrix by calculating and summing up their weighted average.\nThere are several methods assigning spatial weighting methods:\n\nContiguity based weighting method (based on shared boundaries)\nDistanced based weighting method\nInverse distance weighting method\nK nearest neighbour weighting method\n\nAs seen from base map, there is a wide variation in polygon size across Nigeria. Additionally wp_nga is a point data. Hence I will be choosing the distance based weighting method.\nThere are 2 options for distance based weighting methods:\n\nFixed distance weight matrix\nAdaptive distance weight matrix\n\nI will be using the adaptive distance weight matrix because the polygons of the LGA boundaries in nga_wp are in different shapes and sizes. If fixed distance is used, larger polygons may have less neighbours compared to smaller polygons with the same centroid to centroid distance. Also more dense areas have more neighbours than less dense areas.\nThe below code chunk identifies the longitude and latitude of each centroid using st_centroid function().\n\nlongitude <- map_dbl(nga_wp_s$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(nga_wp_s$geometry, ~st_centroid(.x)[[2]])\n\nWe combine them together using cbind() by joining them column wise.\n\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n     longitude  latitude\n[1,]  549364.0  123694.9\n[2,]  547123.4  120376.5\n[3,] 1189496.9 1059770.9\n[4,]  489057.4  534262.6\n[5,]  593718.2  113824.1\n[6,]  642618.7  251222.3\n\n\nI will use the knn2nb() function from spdep package to create a neighbour list of class nb. knearneigh() identifies the neighbours of each polygon and knn2nb() puts them in a list. In this scenario, we are using K nearest neighbour adaptive distance approach to identify the neighbours. We select 6 neighbours to start with.\n\nset.seed(1)\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4644 \nPercentage nonzero weights: 0.7751938 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nWe take a glimpse of the list of neighbours with str().\n\nstr(knn6)\n\nList of 774\n $ : int [1:6] 2 364 548 597 624 721\n $ : int [1:6] 1 548 597 624 721 725\n $ : int [1:6] 250 261 447 507 509 526\n $ : int [1:6] 20 263 446 454 466 690\n $ : int [1:6] 203 208 331 334 539 738\n $ : int [1:6] 170 217 218 337 379 553\n $ : int [1:6] 8 176 214 281 544 555\n $ : int [1:6] 7 214 281 306 544 555\n $ : int [1:6] 18 19 218 337 576 757\n $ : int [1:6] 25 216 325 528 552 632\n $ : int [1:6] 26 27 68 191 565 762\n $ : int [1:6] 135 263 417 446 690 695\n $ : int [1:6] 31 37 393 570 583 584\n $ : int [1:6] 170 363 546 577 581 589\n $ : int [1:6] 22 49 177 297 306 580\n $ : int [1:6] 30 187 296 328 357 360\n $ : int [1:6] 35 295 378 460 638 639\n $ : int [1:6] 9 19 218 574 576 601\n $ : int [1:6] 9 18 103 376 574 576\n $ : int [1:6] 4 106 239 419 454 466\n $ : int [1:6] 60 61 162 269 520 596\n $ : int [1:6] 49 297 326 443 515 623\n $ : int [1:6] 54 291 292 537 618 619\n $ : int [1:6] 123 476 527 652 673 761\n $ : int [1:6] 10 181 216 314 325 552\n $ : int [1:6] 11 27 191 336 562 762\n $ : int [1:6] 11 26 191 439 663 762\n $ : int [1:6] 29 178 299 300 358 369\n $ : int [1:6] 173 178 358 378 460 591\n $ : int [1:6] 16 39 41 186 192 360\n $ : int [1:6] 13 211 289 570 583 584\n $ : int [1:6] 51 62 461 462 515 693\n $ : int [1:6] 166 227 238 655 743 750\n $ : int [1:6] 42 104 136 213 559 757\n $ : int [1:6] 17 275 276 277 295 460\n $ : int [1:6] 107 247 408 455 681 759\n $ : int [1:6] 38 40 570 583 584 629\n $ : int [1:6] 39 40 41 186 320 570\n $ : int [1:6] 30 38 40 41 186 320\n $ : int [1:6] 37 38 39 41 186 570\n $ : int [1:6] 30 38 39 40 192 634\n $ : int [1:6] 86 136 137 499 613 718\n $ : int [1:6] 11 68 157 524 590 645\n $ : int [1:6] 45 192 303 328 360 634\n $ : int [1:6] 44 290 303 328 360 599\n $ : int [1:6] 387 429 438 521 668 742\n $ : int [1:6] 33 166 234 238 698 750\n $ : int [1:6] 65 113 265 386 482 701\n $ : int [1:6] 22 297 326 515 623 693\n $ : int [1:6] 36 98 107 409 432 681\n $ : int [1:6] 32 62 461 462 623 693\n $ : int [1:6] 78 165 293 532 602 636\n $ : int [1:6] 52 78 80 165 621 636\n $ : int [1:6] 23 79 293 294 532 536\n $ : int [1:6] 122 246 333 430 571 605\n $ : int [1:6] 77 376 533 576 601 728\n $ : int [1:6] 58 199 312 322 621 622\n $ : int [1:6] 57 322 323 603 621 622\n $ : int [1:6] 88 128 129 493 700 748\n $ : int [1:6] 61 563 578 592 596 626\n $ : int [1:6] 21 60 269 578 596 626\n $ : int [1:6] 32 51 461 462 515 693\n $ : int [1:6] 90 384 416 467 765 772\n $ : int [1:6] 48 65 74 113 131 407\n $ : int [1:6] 48 64 74 113 265 683\n $ : int [1:6] 103 104 331 338 351 574\n $ : int [1:6] 347 348 566 609 640 694\n $ : int [1:6] 43 157 191 549 590 645\n $ : int [1:6] 140 146 274 473 500 512\n $ : int [1:6] 71 299 341 343 344 610\n $ : int [1:6] 173 298 299 343 344 625\n $ : int [1:6] 566 567 568 609 638 639\n $ : int [1:6] 361 374 377 404 665 666\n $ : int [1:6] 65 109 265 683 741 754\n $ : int [1:6] 272 398 422 433 485 501\n $ : int [1:6] 254 427 470 547 647 677\n $ : int [1:6] 56 195 533 534 579 728\n $ : int [1:6] 52 79 165 215 532 636\n $ : int [1:6] 54 78 165 532 618 636\n $ : int [1:6] 52 53 78 165 215 739\n $ : int [1:6] 99 145 233 426 689 760\n $ : int [1:6] 15 49 51 177 352 580\n $ : int [1:6] 132 258 383 414 529 767\n $ : int [1:6] 24 148 437 482 673 692\n $ : int [1:6] 105 394 654 675 707 712\n $ : int [1:6] 42 136 137 499 613 718\n $ : int [1:6] 149 151 221 226 399 486\n $ : int [1:6] 59 150 489 648 700 714\n $ : int [1:6] 260 408 463 542 674 676\n $ : int [1:6] 63 163 236 237 384 710\n $ : int [1:6] 160 271 406 475 492 525\n $ : int [1:6] 119 390 391 392 487 656\n $ : int [1:6] 354 402 594 607 665 666\n $ : int [1:6] 31 158 436 561 596 709\n $ : int [1:6] 390 391 392 405 469 656\n $ : int [1:6] 97 139 389 420 451 653\n $ : int [1:6] 96 389 420 451 662 773\n $ : int [1:6] 50 117 153 231 432 696\n $ : int [1:6] 81 145 426 667 760 769\n  [list output truncated]\n - attr(*, \"region.id\")= chr [1:774] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nWe can also visualise the neighbourhood linkages using a plot. See the code chunk below:\n\nplot(nga_wp_s$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.3, add = TRUE, col = \"red\")\n\n\n\n\nThe above knn2b() stores the neighbours into a list but it is not a spatial weight matrix. We can convert it into a spatial object object using nb2listw() function.\nThe style argument can take in “W”, “B”, “C”, “U”, “minmax” and “S”.\n\n“B” - basic binary coding\n“W” - row standardised\n“C” - globally standardised\n“U” - “C” but divided by total number of neighbours\n“S” - Variance stabilising encoding\n\nWe will use the basic binary coding here for simplicity.\n\nknn_lw <- nb2listw(knn6, style = 'B', zero.policy = TRUE)\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4644 \nPercentage nonzero weights: 0.7751938 \nAverage number of links: 6 \nNon-symmetric neighbours list\nLink number distribution:\n\n  6 \n774 \n774 least connected regions:\nwith 6 links\n774 most connected regions:\nwith 6 links\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0   S1     S2\nB 774 599076 4644 8342 113854"
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#measuring-global-spatial-autocorrelation",
    "href": "Takehome/Takehome1/takehome1.html#measuring-global-spatial-autocorrelation",
    "title": "Take Home Exercise 1",
    "section": "5.2 Measuring Global Spatial Autocorrelation",
    "text": "5.2 Measuring Global Spatial Autocorrelation\nWe need to check if there is Global Spatial Autocorrelation. This can be performed using statistical testing to determine if there is spatial autocorrelation globally. The hypothesis are below:\nH0: Observed spatial pattern of values is likely as any other spatial pattern. Values at one location do not depend on neighbouring location. There is spatial randomness and changing values of one location does not affect another.\nH1: There is spatial dependencies. Changing values of one location affects another.\nThere are are 2 ways of measuring global spatial autocorrelation:\n\nGlobal Moran’s I\nGlobal Geary’s C\n\n\n5.2.1 Using Global Moran’s I\n\n\n\n\n\nThe Moran I statistics can be calculated as above. The assumption to use the test is that the spatial data is normal and randomised.\nPositive I (I>0) means a feature has neighbouring features that are similar and this is a cluster feature. Zero I (I=0) means a feature has neighbouring features that are randomly distributed. There is no association. Negative I (I<0) eans a feature has neighbouring features that are dissimilar and this is an dispursed feature.\nWe can use moran.test() of spdep package to run the test. The zero.policy argument adds in a list of 0 vectors for polygons who do not have neighbours.\nNon Functional water points\n\nmoran.test(nga_wp_s$pct_nonfunc, \n           listw=knn_lw, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp_s$pct_nonfunc  \nweights: knn_lw    \n\nMoran I statistic standard deviate = 24.73, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4830241817     -0.0012936611      0.0003835295 \n\n\nBased on the results above, P value < 0.05. We can reject the null hypothesis, that there is spatial autocorrelation between neighbours. Moran’s I statistics is also positive so it points towards clustered observations.\n\nSince we are unsure whether the spatial data conforms to normality and randomisation, we can calculate the mean value of Moran’s I using a Monte Carlo simulation with 1000 rounds.\n\nset.seed(1)\n\nmonte_moran_test <- moran.mc(nga_wp_s$pct_nonfunc, \n                listw=knn_lw, \n                nsim=999,\n                zero.policy = TRUE, \n                na.action=na.omit)\n\nmonte_moran_test\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp_s$pct_nonfunc \nweights: knn_lw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.48302, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nhist(nga_wp_s$pct_nonfunc, \n     freq=TRUE, \n     breaks=20, \n     xlab= \"Monte Carlo Global Moran's I Sampling\")\nabline(v=0, \n       col=\"blue\")\n\n\n\n\nComparing the Global Moran’s I statisitcs between monte carlo simulation and without, they are largely similar. The p values are both < 0.05 and hence we can confidently reject the null hypothesis that for proportion of non functional water point in Nigeria, there is spatial autocorrelation. This means the distribution of non functional water point in Nigeria is uneven and is higher than it would have been if randomly distributed.\nFunctional water points\nWe perform the similar steps for proportion of functional water point.\n\nset.seed(1)\n\nmc_mtest_f <- moran.mc(nga_wp_s$pct_func, \n                listw=knn_lw, \n                nsim=999,\n                zero.policy = TRUE, \n                na.action=na.omit)\n\nmc_mtest_f\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp_s$pct_func \nweights: knn_lw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.5356, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince p value < 0.05, we rejct null hypothesis. we can conclude that for proportion of functional water point in Nigeria, there is spatial autocorrelation. This means the distribution of functional water point in Nigeria is not even and is higher than it would have been if randomly distribution.\n\n\n5.2.2 Using Global Geary’s C\nApart from Moran’s I, we can also use Global Geary’s C.\n\n\n\n\n\nLarge C (C>3) means a feature has neighbouring features that are dissimilar and this is a dispersed feature. C =1 means a feature and neighbouring features are randomly arranged. Small C (C<1) means a feature has neighbouring features that are similar and this is a cluster feature.\nNon Functional water points\n\nset.seed(1)\nmc_gc_nf <- geary.mc(nga_wp_s$pct_nonfunc, \n               listw=knn_lw,\n               zero.policy = TRUE,\n               nsim=999)\nmc_gc_nf\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp_s$pct_nonfunc \nweights: knn_lw \nnumber of simulations + 1: 1000 \n\nstatistic = 0.507, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nGeary C test results align with Moran’s I with a small C statistics result that is statistically significant. We are confident there are spatial autocorrelation in the distribution of non functional water point across Nigeria.\nFunctional water points\n\nset.seed(1)\nmc_gc_f <- geary.mc(nga_wp_s$pct_func, \n               listw=knn_lw,\n               zero.policy = TRUE,\n               nsim=999)\nmc_gc_f\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp_s$pct_func \nweights: knn_lw \nnumber of simulations + 1: 1000 \n\nstatistic = 0.4571, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nGeary C test results align with Moran’s I with a small C statistics result that is statistically significant. We are confident there are spatial autocorrelation in the distribution of functional water points across Nigeria."
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#spatial-correlogram",
    "href": "Takehome/Takehome1/takehome1.html#spatial-correlogram",
    "title": "Take Home Exercise 1",
    "section": "5.3 Spatial Correlogram",
    "text": "5.3 Spatial Correlogram\nIn this section we will identify how the non functional and functional water points proportion varies with increasing distance from each polygon for each polygon. We use sp.correlogram() from spdep to compute the spatially lagged values and use plot() to display the information on a plot.\nStyle = “B” means binary encoding. Method = “I” means using Moran’s I statistics.\nNon Functional water points\n\nGC_corr_nf <- sp.correlogram(knn6, \n                          nga_wp_s$pct_nonfunc, \n                          order=20, \n                          method=\"I\", \n                          style=\"B\",\n                          zero.policy = TRUE)\nplot(GC_corr_nf)\n\n\n\n\nAs we can see, there are autocorrelations with up to 10 lags. We need to consider more neighbours in our analysis for non functional water points.\nFunctional water points\n\nGC_corr_f <- sp.correlogram(knn6, \n                          nga_wp_s$pct_func, \n                          order=20, \n                          method=\"I\", \n                          style=\"B\",\n                          zero.policy = TRUE)\nplot(GC_corr_f)\n\n\n\n\nAs we can see, there are autocorrelations with up to 12 lags. We need to consider more neighbours in our analysis for functional water points."
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#cluster-and-outlier-analysis",
    "href": "Takehome/Takehome1/takehome1.html#cluster-and-outlier-analysis",
    "title": "Take Home Exercise 1",
    "section": "5.4 Cluster and Outlier Analysis",
    "text": "5.4 Cluster and Outlier Analysis\nGlobal Moran I and Global Geary C statistics are only able to tell us if there are global spatial autocorrelation. We concluded that there is. However to identify which polygon has spatial autocorrelation and which does not we will need to turn towards local indicators of spatial association (LISA).\nLISA can be computed using Local Moran I statistics with localmoran() function from spdep library. It will output a matrix with:\n\nIi: local Moran’s I statistics\nE.Ii: expectation of local moran statistic\nVar.Ii: variance of local moran statistic\nZ.Ii: standard deviate of local moran statistic\nPr(): p-value of local moran statistic\n\nNon Functional water points\n\nlocalMI_nf <- localmoran(nga_wp_s$pct_nonfunc, knn_lw)\nhead(localMI_nf)\n\n         Ii         E.Ii    Var.Ii      Z.Ii Pr(z != E(Ii))\n1  2.340371 -0.005088610  3.909757 1.1861866   2.355486e-01\n2  2.946740 -0.003141883  2.414802 1.8982955   5.765716e-02\n3 17.532309 -0.022680865 17.375361 4.2114695   2.537148e-05\n4  1.184000 -0.009891309  7.593749 0.4332483   6.648344e-01\n5  5.580031 -0.004588478  3.525782 2.9741707   2.937816e-03\n6  3.550849 -0.005630315  4.325577 1.7100084   8.726431e-02\n\n\n\ncolnames(cbind(nga_wp_s,localMI_nf))\n\n [1] \"ADM2_EN\"        \"ADM2_PCODE\"     \"ADM1_PCODE\"     \"ADM0_EN\"       \n [5] \"total_wpt\"      \"wpt_func\"       \"wpt_nonfunc\"    \"wpt_unknown\"   \n [9] \"pct_func\"       \"pct_nonfunc\"    \"Ii\"             \"E.Ii\"          \n[13] \"Var.Ii\"         \"Z.Ii\"           \"Pr.z....E.Ii..\" \"geometry\"      \n\n\nNext we append the local Moran I values into the nga_wp_s data table\n\nnga_wp_s_lmi_nf <- cbind(nga_wp_s,localMI_nf) %>%\n  rename(\"Prob(Li)\"=\"Pr.z....E.Ii..\")\n\n\n5.4.1 Visualizing Moran I values\nWe can plot a choropleth mapping using tm_shape() and tm_fill() from tmap library. The thematic mapping will be based on the Prob(Li) values.\n\nprob_nf <- tm_shape(nga_wp_s_lmi_nf) +\n  tm_fill(col = \"Prob(Li)\", \n          breaks=c(-Inf, 0.01, 0.025, 0.05, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I pvalues\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Non Functional Water Points by\\nLocal Moran P-value\",\n            main.title.size = 1,\n            main.title.position = \"centre\")\n\nprob_nf\n\n\n\n\n\n\nLGA boundary areas where Local Moran I pvalues are greater than 0.05 are not significant. This means the proportion of non functional water points in these areas are not outliers or cluster.\n\nli_nf <- tm_shape(nga_wp_s_lmi_nf) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"Local Moran I statisyics \") +\n  tm_layout(main.title = \"Non Functional Water Points by\\nLocal Moran Statistics\",\n            main.title.size = 1,\n            main.title.position = \"centre\",\n            legend.outside = TRUE) +\n  tm_borders(alpha = 0.5)\n\nli_nf\n\n\n\n\n\n\nIf we plot a Local Moran I statistics, we can see largely most of the LGA boundaries is a cluster or outlier and there is spatial autocorrelation between the boundaries.\n\n\n5.4.2 Identifying whether LGA Boundary is a cluster or outlier\nWhen Local Moran I statistics is significant, we can conclude the area is either a cluster or outlier. The first step is to plot the Moran scatter plot. The scatter plot shows the relationship between a chosen attribute and its spatially lagged values at neighbouring location. It helps us identify locations of clusters and outliers.\nClusters:\n\nHH cluster means centre spatial unit value is high and neighbouring values are also high\nLL cluster means centre spatial unit value is low and neighbouring values are also low\n\nOutliers:\n\nLH outlier means centre spatial unit value is low but neighbouring values are high\nHL outlier means centre spatial unit value is high but neighbouring values are low\n\nFirst, we scale the percentage of non functional water points in each polygon. This allows a fairer comparison between the spatially lagged average non functional water point percentage and the non functional water point of a polygon.\nWe standardise the data using scale().\n\nnonfunc_std <- scale(nga_wp_s$pct_nonfunc) %>% \n  as.vector \n\nWe use moran.plot() to plot the moran scatter plot.\n\nmoran.plot(nonfunc_std, knn_lw,\n           labels=as.character(nga_wp_s$ADM2_EN),\n           xlab=\"z-Non functional water point\", \n           ylab=\"Spatially Lag z-Non functional water point\",\n           pch=19,\n           cex = 0.3)\n\n\n\n\nInterpretating the scatter plot:\nThe Moran coefficient is equivalent to the slope of regression line on Moran plot. For each axis, the dotted lines represent the average of that attribute. There are also 4 quadrants created by the dotted lines in scatter plot. Each quadrant represents a cluster or outlier.\nTop right hand quadrant represents the HH cluster and bottom left represents the LL cluster. A cluster means the centre spatial unit is positively autocorrelated with its neighbours. HH cluster means a polygon is high value and neighbours also high value. LL cluster means a polygon is low value and neighbours low value.\nTop left hand quadrant represents the LH outlier and bottom right represents the HL outlier. Outlier means the centre spatial unit is negatively autocorrelated with its neighbours. LH outlier means the polygon is low in value but neighbours are high in value so it is a low outlier. HL outlier means the polygon in the centre is high in value but neighbours are low so it is a high outlier.\nWe can further analyse to see which LGA boundaries are low or high outliers or low or high clusters. We initialise a zero vector with same length as local MI matrix.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI_nf))\n\nWe centre the spatially lagged variable around the mean.\n\nnga_wp_s_lmi_nf$lag_pct <- lag.listw(knn_lw, nga_wp_s$pct_nonfunc)\nDV <- nga_wp_s_lmi_nf$lag_pct - mean(nga_wp_s_lmi_nf$lag_pct)\n\nWe also compute average of the local MI statistics to centre the values around the mean. Level of significance will be set at 0.05.\n\nLM_I <- localMI_nf[,1] - mean(localMI_nf[,1])   \nsignif <- 0.05\n\nIf LM_I >0, it is positive. It is a cluster. If LM_I<0 it is negative. It is outlier\nIf DV> 0 means the spatially lagged variable is high. If DV<0 means spatially lagged variable is low.\nWe put all insignificant LGA boundaries into class 0 and the rest into class 1, 2, 3, 4.\n\nquadrant[DV <0 & LM_I>0] <- 1 # LL\nquadrant[DV >0 & LM_I<0] <- 2 # LH\nquadrant[DV <0 & LM_I<0] <- 3 # HL\nquadrant[DV >0 & LM_I>0] <- 4 # HH\nquadrant[localMI_nf[,5] > signif] <- 0\n\n\ntable(quadrant)\n\nquadrant\n  0   1   2   3   4 \n551  88  14  22  99 \n\n\n\nnga_wp_s_lmi_nf$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nnga_wp_s_lmi_nf <- rename(nga_wp_s_lmi_nf, \"category\"=\"quadrant\")\n\ntmap_mode(\"plot\")\n\nclus_nf <- tm_shape(nga_wp_s_lmi_nf) +\n  tm_fill(col = \"category\",\n          style = \"cat\",\n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1])+\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title = \"Non Functional Water Points with\\nSpatial Autocorrelation\",\n            main.title.size = 1,\n            main.title.position = \"centre\")\nclus_nf \n\n\n\n\nFor non functional water points, we can see the there is a region of high value clusters located at South West of Nigeria while the low value cluster is diagnoally opposite and located at North East Nigeria.\nFor outliers, there are some LH outliers located around South West and off central while for HL outliers, they are scattered around the upper half of Nigeria, towards Northern and Eastern parts.\n\ntmap_arrange(prob_nf,clus_nf)\n\n\n\n\n\ntmap_arrange(li_nf,clus_nf)\n\n\n\n\n\n\n5.4.3 Functional water points Analysis\nFunctional water points\nIn the following section, we will perform the same analysis as previously shown but for functional water points.\n\nlocalMI_f <- localmoran(nga_wp_s$pct_func, knn_lw)\n\nnga_wp_s_lmi_f <- cbind(nga_wp_s,localMI_f) %>%\n  rename(\"Prob(Li)\"=\"Pr.z....E.Ii..\")\n\n\nprob_f <- tm_shape(nga_wp_s_lmi_f) +\n  tm_fill(col = \"Prob(Li)\", \n          breaks=c(-Inf, 0.01, 0.025, 0.05, Inf),\n          palette=\"-Reds\", \n          title = \"Local Moran's I pvalues\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Functional Water Points by\\nLocal Moran P-value\",\n            main.title.size = 1,\n            main.title.position = \"centre\")\nprob_f\n\n\n\n\n\nli_f <- tm_shape(nga_wp_s_lmi_f) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"Local Moran I statisyics \") +\n  tm_layout(main.title = \"Functional Water Points by\\nLocal Moran Statistics\",\n            main.title.size = 1,\n            main.title.position = \"centre\",\n            legend.outside = TRUE) +\n  tm_borders(alpha = 0.5)\n\nli_f\n\n\n\n\n\nclass_f <- vector(mode=\"numeric\",length=nrow(localMI_f))\nnga_wp_s_lmi_f$lag_pct <- lag.listw(knn_lw, nga_wp_s$pct_func)\nDV <- nga_wp_s_lmi_f$lag_pct - mean(nga_wp_s_lmi_f$lag_pct)\nLM_I <- localMI_f[,1] - mean(localMI_f[,1])   \nsignif <- 0.05\nclass_f[DV <0 & LM_I>0] <- 1 # LL\nclass_f[DV >0 & LM_I<0] <- 2 # LH\nclass_f[DV <0 & LM_I<0] <- 3 # HL\nclass_f[DV >0 & LM_I>0] <- 4 # HH\nclass_f[localMI_f[,5] > signif] <- 0\n\n\nnga_wp_s_lmi_f$class <- class_f\ncolors <-  c(\"#ffffff\", \"#CCFFFF\", \"#CCCCFF\", \"#FFFF99\", \"#FF6666\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nclus_f <- tm_shape(nga_wp_s_lmi_f) +\n  tm_fill(col = \"class\",\n          style = \"cat\",\n          palette = colors[c(sort(unique(class_f)))+1], \n          labels = clusters[c(sort(unique(class_f)))+1])+\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title = \"Functional Water Points with\\nSpatial Autocorrelation\",\n            main.title.size = 1,\n            main.title.position = \"centre\")\nclus_f \n\n\n\n\n\ntmap_arrange(clus_nf, clus_f)\n\n\n\n\nFrom both graphs above, we can conclude statisitcally and significantly that there are more functional water points in the Northern/ upper half of Nigeria than southern Nigeria/ lower half."
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#hotspot-analysis",
    "href": "Takehome/Takehome1/takehome1.html#hotspot-analysis",
    "title": "Take Home Exercise 1",
    "section": "6.1 Hotspot Analysis",
    "text": "6.1 Hotspot Analysis\nApart from cluster and outlier detection, we can use LISA to determine hotspots and coldspots. We will use a different statistics known as local Getis and Ord’s G-statistics.\n\n\n\n\n\nH0: Spatial distribution of feature attribute is random spatial process\nH1: Spatial distribution of feature attribute is not a random spatial process\nG -statistics >0 means there is association with relatively high values of the surrounding locations.\nG -statistics< 0 means there is association with relatively low values of the surrounding locations.\nIt looks at neighbours within a defined proximity to identify where either high or low value areas spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas neighbouring are high in values too. Coldspots are areas of low values where other areas neighbouring are low in values.\nHotspot: high values cluster , Coldspot: low values cluster\nNon Functional Water Point\n\ngi <- localG(nga_wp_s$pct_nonfunc, knn_lw)\nnpa_wp_s_nf_gi <- cbind(nga_wp_s, as.matrix(gi)) %>%\n  rename(\"gstat_adaptive\" = \"as.matrix.gi.\")\n\n\nhead(gi)\n\n[1]  1.1861866  1.8982955 -4.2114695  0.4332483  2.9741707 -1.7100084\n\n\n\nhotspot_nf <- tm_shape(npa_wp_s_nf_gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Non Functional Water Points Hotspots\",\n            main.title.size = 1,\n            main.title.position = \"centre\")\nhotspot_nf\n\n\n\n\nBased on the above, for non functional water points proportion, there is higher proportion of non functional water points in South and South West Nigeria (hot spot). There is lower proportion of non functional water points in North and North East Nigeria. This conclusion aligns with the cluster and outlier analysis. Additionally, in the west, there seems to be cold spot which means there is lower percentage of non functional water point.\n\nFunctional Water Point\n\ngi_f <- localG(nga_wp_s$pct_func, knn_lw)\nnpa_wp_s_f_gi <- cbind(nga_wp_s, as.matrix(gi_f)) %>%\n  rename(\"gstat_adaptive\" = \"as.matrix.gi_f.\")\n\n\nhotspot_f <- tm_shape(npa_wp_s_f_gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Functional Water Points Hotspots\",\n            main.title.size = 1,\n            main.title.position = \"centre\")\nhotspot_f\n\n\n\n\nRed areas are hot spots with higher proportion of functioning water point."
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#non-functional-water-point",
    "href": "Takehome/Takehome1/takehome1.html#non-functional-water-point",
    "title": "Take Home Exercise 1",
    "section": "7.1 Non Functional Water point",
    "text": "7.1 Non Functional Water point\nWe can put count analysis, cluster analysis and hotspot analysis side by side using tmap_arrange() function.\n\ntmap_arrange(clus_nf,hotspot_nf, nf_4)\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nOverall, the 3 graphs are largely aligned with one another. From the above we can see that we should not rely only on 1 graph for our data analytics interpretation.\nIf we have looked only at the percentage analysis by LGA level (bottom left graph), we would have placed more urgency for repairs in LGA areas where there are higher percentage of non functional water points. This will mean repairing the water points in North West Nigeria regions and LGA areas dispersed across Nigeria where repair efforts will be divided.\nHowever when we look at the spatial autocorrelation analysis (top left), we realise there is high portion of non functioning water point cluster in the South West Nigeria. Repair efforts should be focused in this area first. This was not being highlighted in the graph of percentage analysis by LGA level.\nThe hotspot analysis has also shown us within a high high cluster, not all LGA areas in the high high cluster have the same severity of non functional water points. For example within the high high cluster identified by the cluster graph, there is a point with hotspot higher than the other surrounding hotspot as shown by the hotspot graph.\nThe region of higher spatial autorcorrelation and hotspot should be repaired first. This is because a hotspot and autocorrelation mean that the specific LGA area and its neighbouring LGA area have high non functional water points. These areas are areas with lower access to water and should be prioritized to provide a steady water supply to its people.\nWe take our analysis further be finding out the LGA areas where there are highest percentage of non functional water points,is a high high cluster and a hotpot with the below code chunk.\n\nnpa_wp_s_nf_gi_cpy <- npa_wp_s_nf_gi\nnpa_nf <- cbind(npa_wp_s_nf_gi_cpy,nga_wp_s_lmi_nf$category)\n\nnpa_nf %>%\n  filter(nga_wp_s_lmi_nf.category == 4) %>%\n  arrange(.,desc(gstat_adaptive), desc(pct_nonfunc)) %>%\n  select(ADM2_EN) %>%\n  head(5)\n\nSimple feature collection with 5 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 311733 ymin: 73672.86 xmax: 625884.3 ymax: 421507.8\nProjected CRS: Minna / Nigeria West Belt\n    ADM2_EN                       geometry\n1 Etim Ekpo MULTIPOLYGON (((583649.6 11...\n2 Oruk Anam MULTIPOLYGON (((596319.7 98...\n3       Apa MULTIPOLYGON (((624282.4 41...\n4  Ukanafun MULTIPOLYGON (((581423 1045...\n5    Burutu MULTIPOLYGON (((364659.6 15...\n\n\nEtim Ekpo, Oruk Anam, Apa, Ukanafun and Burutu should be areas where the water humanitarian aid should focus first as these are the areas with lowest access to water."
  },
  {
    "objectID": "Takehome/Takehome1/takehome1.html#functional-water-point",
    "href": "Takehome/Takehome1/takehome1.html#functional-water-point",
    "title": "Take Home Exercise 1",
    "section": "7.2 Functional Water point",
    "text": "7.2 Functional Water point\n\ntmap_arrange(clus_f,hotspot_f)\n\n\n\n\n\ntmap_arrange(a4)\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nFrom the 3 graphs above, we can see the northern region of Nigeria has a high proportion of functioning water point. Research study can be done on it to identify what are the reasons why these areas have statically significantly higher functioning water points than other areas of Nigeria. The learning can then be applied to other areas of Nigeria in managing water points.\nWe can also see the tip of the North West Region in fact does not have a high percentage of functioning water points too. Since it does not have high non functioning, and high functioning water points, data here seems to be not clean or missing and more should be looked into"
  },
  {
    "objectID": "Hands-on/Handson_Ex3/Handson3.html",
    "href": "Hands-on/Handson_Ex3/Handson3.html",
    "title": "Hands On Exercise 3",
    "section": "",
    "text": "We can cluster similar regions together using algorithms.\n\npacman::p_load(rgdal, spdep, tmap, sf, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse)\n\n\n\n\nshan_sf <- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") #no need CRS. Needed only when dealing with distance stuff. Requires projection.\n\nReading layer `myanmar_township_boundaries' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on/Handson_Ex3/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nshan_sf\n\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE             DT   DT_PCODE           TS\n1       250       Kachin   MMR001        Mohnyin MMR001D002      Hpakant\n2       163 Shan (North)   MMR015        Mongmit MMR015D008      Mongmit\n3        96  Bago (East)   MMR007           Bago MMR007D001          Waw\n4       147  Bago (West)   MMR008           Pyay MMR008D001   Paukkhaung\n5       263     Mandalay   MMR010     Pyinoolwin MMR010D002       Mogoke\n6       167       Kachin   MMR001          Bhamo MMR001D003       Shwegu\n7        25  Bago (East)   MMR007        Taungoo MMR007D002     Kyaukkyi\n8       300       Yangon   MMR013 Yangon (South) MMR013D003      Thongwa\n9       284       Yangon   MMR013 Yangon (South) MMR013D003     Kyauktan\n10      148        Kayin   MMR003         Hpa-An MMR003D001 Thandaunggyi\n    TS_PCODE               ST_2              LABEL2 SELF_ADMIN  ST_RG\n1  MMR001009       Kachin State     Hpakant\\n169795       <NA>  State\n2  MMR015017 Shan State (North)      Mongmit\\n61072       <NA>  State\n3  MMR007004 Bago Region (East)         Waw\\n199032       <NA> Region\n4  MMR008002 Bago Region (West)  Paukkhaung\\n117164       <NA> Region\n5  MMR010011    Mandalay Region      Mogoke\\n191775       <NA> Region\n6  MMR001011       Kachin State       Shwegu\\n84750       <NA>  State\n7  MMR007011 Bago Region (East)    Kyaukkyi\\n106008       <NA> Region\n8  MMR013025      Yangon Region     Thongwa\\n158876       <NA> Region\n9  MMR013024      Yangon Region    Kyauktan\\n162931       <NA> Region\n10 MMR003004        Kayin State Thandaunggyi\\n93611       <NA>  State\n     T_NAME_WIN T_NAME_M3      AREA                       geometry\n1       zm;uefU     ဖားကန့် 5761.2964 MULTIPOLYGON (((96.15953 26...\n2      rdk;rdwf      မိုးမိတ် 2703.6114 MULTIPOLYGON (((96.96001 23...\n3           a0g       ဝေါ  952.4398 MULTIPOLYGON (((96.61505 17...\n4   aygufacgif; ပေါက်ခေါင်း 1918.6734 MULTIPOLYGON (((95.82708 19...\n5      rdk;ukwf      မိုးကုတ် 1178.5076 MULTIPOLYGON (((96.22371 23...\n6         a&Tul       ရွှေကူ 3088.8291 MULTIPOLYGON (((96.68573 24...\n7    ausmufBuD;  ကျောက်ကြီး 2022.9520 MULTIPOLYGON (((96.65263 18...\n8        oHk;cG       သုံးခွ  721.6046 MULTIPOLYGON (((96.77887 16...\n9    ausmufwef;  ကျောက်တန်း  802.1361 MULTIPOLYGON (((96.64264 16...\n10 oHawmiffBuD;  သံတောင်ကြီး 3635.2799 MULTIPOLYGON (((96.93287 18...\n\n\nFilter out Shan areas.\n\nshan_sf <- shan_sf %>%\n   filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\nNext we import the aspatial data.\n\nict <- read_csv (\"data/aspatial/Shan-ICT.csv\")\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n#read_csv() imports as tibble. Field names are preserved. If used read.csv(), imports as base R DF and field names chnage (\" \" replaced with \".\")\n\nWe might be bias if we look at the absolute number itself. Hence we will turn the absolute value into percentage. We define the penetration rate using the code below.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`)\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\n\n\n\nWe plot distribution of variables using a histogram.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"grey\")\n\n\n\n\nTo detect outliers, we can plot a box plot to help us.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nWe plot the new penetration rate.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nFor easy comparison, we can plot the penetration rates of the different histograms into. We plot the individual histograms then arrange them together.\n\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n## Putting all of them together\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\nWe need data from geospatial file and from aspatial file. We join using left_join() and join by sha_sf.TS_PCODE = ict_derived.TS_PCODE\n\nshan_sf <- left_join(shan_sf, \n                     ict_derived, \n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))  #need to be left is geometry data, right attribute. Otherwise lose geometry data if reversed.\n\nshan_sf has now both data. We plot a simple map.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\nWe will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map).\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nRegions with more people have higher radio ownership.\nWe repeat above but plot with radio penetration rate.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\n\ncluster_vars.cor = cor(ict_derived[,12:17]) #only column 12 to 17\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\nFirst, extract clustering variables. We select “TS.x”, “RADIO_PR”, “TV_PR”, “LLPHONE_PR”, “MPHONE_PR”, “COMPUTER_PR” columns.\n\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>% #to drop the geometry column becos cannot cluster it\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nWe removed internet PR because it is highly correlated with Computer PR. We just need one to reduce multicolinearity problem.\nWe change index from row number to row name. Then delete TS.x column.\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nDelete TS.x column.\n\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nClustering methods need standardisation. Otherwise the clustering will be biased to those with large value range. We use min max standardisation. All data fall within 0-1.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nWe can do z score normalisation too.\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\n\n\n\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"No Standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\nAfter standardisation, become less skewed.\n\n\n\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix. We measure distances between the different cities.\n\nproxmat <- dist(shan_ict, method = 'euclidean')\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n\nWe start the hierarchical clustering.\nhclust() employs agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nWe use ward.D.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\nWe can visualize the tree.\n\nplot(hclust_ward, cex = 0.6) #CEX is to scale down resolution to 60% to avoid overlapping\n\n\n\n\n\n\n\nagnes()function of cluster package functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nWe try the different model\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac #output ac which is index value\n}\n\nmap_dbl(m, ac) #functional programming method - map a list of inputs to a function. Something like looping\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n#coefficien measures the homogenity\n\nWard has highest coefficient. It is the best. We will use wards from here onwards.\n\n\n\n3 ways\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\nGAP Method\n\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nHigher the better. 1 cluster does not make sense, same for 2. At least have 3, so we will select 6.\n\n\n\nEach leaf is one observation. As u move from bottom to top, the most similar leaves will join and eventually the most similar branches will join. The height of the branches represent dissimilarities. Higher, the less similar.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, #number of clusters\n            border = 2:8)\n\n\n\n\n\n\n\n\nWe need data to be a data matrix form to create a heatmap.\n\nshan_ict_mat <- data.matrix(shan_ict)\n\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\n#Create groups\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.\n\n\n\n\nWe convert shan_df into SpatialPolygonDataFrame because SKATER function only works with sp objects.\n\n#Turn into spatial\nshan_sp <- as_Spatial(shan_sf)\n\nCreate neighbor list to create minimum spanning tree.\n\nshan.nb <- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\nplot(shan_sp, \n     border=grey(.5))\nplot(shan.nb, \n     coordinates(shan_sp), \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge which is the distance between the node.\n\nlcosts <- nbcosts(shan.nb, shan_ict)\n\nWe convert the neighbour list into a cost matrix.\n\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\nshan.mst <- mstree(shan.w)\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\n\nplot(shan_sp, border=gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\nNumber of connections between nodes have been reduced.\n\n\n\nclust6 <- skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\nccs6 <- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\n\nplot(shan_sp, border=gray(.5))\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\n\n\n\nNext we try mapping it on a choropleth map\n\ngroups_mat <- as.matrix(clust6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`) #make sure order is the same before binding\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\n\n\n\nThe original one and the one with spatially constrained. Latter is more cohesive."
  },
  {
    "objectID": "Inclass/Inclass3/Inclass3.html",
    "href": "Inclass/Inclass3/Inclass3.html",
    "title": "Hands On Exercise 3",
    "section": "",
    "text": "In this section, we will analysis the dataset using ClustGeo method which is a soft classifier. ClustGeo method has a limitation. It only allows using the ward method for hierarchical clustering.\n\n\n\n\n\nFirst we prepare the data needed. These data has been pre-prepared from handson exer\n\n\nReading layer `myanmar_township_boundaries' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Inclass/Inclass3/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nClustGeo package has a hclustgeo() function. We use this function to perform ward-like hierarchical clustering. This is same as hclust() function and selecting method as ward. This is another option to use compared to hclust. Either which, there is no spatial constrained applied here.\nSince this is a non-spatially constrained hierarchical cluster, we only need the dissimilarity, matrix. The matrix needs to be a dist() object class.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\n\n#draw colour boxes for each cluster\nrect.hclust(nongeo_cluster,\n           k = 6,\n           border = 1:6)\n\n\n\n\n\n\nWe can plot the clusters onto the map. We convert the clusters values into a factor/category. nongeo_cluster builds a tree. We use cutree() to cut the tree into k number of groups then convert into factor\n\ngroups<-as.factor(cutree(nongeo_cluster, k= 6))\n\n#add to shan_sf data table\nshan_sf_nego_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_nego_cluster, \"CLUSTER\")\n\n\n\n\nWithout considering the effects of geospatial effect, we can see the clustering is a fragmented.\n\n\n\nWe need a spatial distance matrix. This can be computed using st_distance() of sf package. We use as.dist() to convert dist into a matrix.\n\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\nWe can tune the weight of spatial constraint effect on the hierarchical clustering using the choicealpha(). To visualise the impact of the choice alpha, we can plot a graph and select a choice alpha that is the best trade off between cluster attribute effect and geospatial attribute effect.\n0 <= Choice alpha <= 1\nChoice alpha of 0 means we consider the least geospatial attribute effect.\nChoice alpha of 1 means we consider maximum effect of geospatial attribute effect.\nFirst graph is Q and second graph is Qnorm. Q norm is normalised version of Q and used when cluster attribute is skewed.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\nFrom above, we will select choice alpha 0.3. This selects 70% impact of spatial effect and 70% of clustering attribute effect.\nWe build the clustG model with alpha = 0.3.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\n\ngroups <- as.factor(cutree(clustG, k=6))\n\n\n#add groups to sf data table\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\nWith spatial effect taken into account, the clustering is more cohesive."
  },
  {
    "objectID": "Hands-on/Handson_Ex4/Handson4.html",
    "href": "Hands-on/Handson_Ex4/Handson4.html",
    "title": "Handson4",
    "section": "",
    "text": "The R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for calibrating geographical weighted family of models\n\nGWmodel\n\nR package for multivariate data visualization and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nWe import and download the packages.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\nNext we import the data needed. Data is in SVY21 projected CRS coordinates.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on/Handson_Ex4/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe transform into CRS = 3414.\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nWe verified that has been changed to EPSG 3414.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\nWe read in the condo resale data.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nWe can zoom into the longitude and latitude and check the summary statistics.\n\n#X coordinate\nhead(condo_resale$LONGITUDE)\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n#Y coordinate\nhead(condo_resale$LATITUDE)\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\nThe condo resale data is aspatial. We convert it into a sf object and transform it to CRS = 3414 coordinates from wgs84.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\n\n\n\nWe plot distribution of selling price.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nAbove shows a right skew distribution. Prices transacted at relatively lower prices. We can log transform the data to reduce its skewness.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nSkewness has been reduced after transformation as seen from above.\nWe can also plot multiple histogram in 1 plot using the ggarrange() from ggpubr package.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\nWe can plot dots on the map. We can use the set.zoom.limits to adjust in tm_view().\n\ntmap_mode(\"view\")\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\nHedonic pricing model considers both internal and external factor of the underlying in determining its price. We analyse the price of condominium using lm() by building a simple linear regression model. We regress area_sqm against selling_price.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nWe access the summary\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nWe can also visualise it in a graph plot.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n\nThere can be more than 1 variables in modelling the price of condominiums. Before so we check if variables are correlated. This is known as problem of collinearity.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR.\nWe build a linear regression model.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\nNot all variables are statistically significant. We remove those that are not statistically significant.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.592 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.592                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nWe can also use tbl_regression() to create the regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nIf we want to add report of statistical results at footer.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nAs long as less than 10, we can conclude no multi-collinearity.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\n\n\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nFrom above, we can see it confirms to normal distribution. We can also do a statistical method instead of through visualization.\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nP value above are all < 0.05. We can reject null hypothesis. Residuals are not normally distributed.\n\n\n\nData needs to be in SpatialPointsDataFrame format. We convert it into this format.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n#Convert\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nWe can see from above there is spatial correlation visually. We confirm statistically through Moran’s I test.\n\n#Create neighbour list\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n#Create spatial weights\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nP value < 0.05. There is autocorrelation. Global Moran I is also positive, hence it is a a cluster.\n\n\n\n\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.379526e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3396 CV score: 4.721292e+14 \nFixed bandwidth: 971.3402 CV score: 4.721292e+14 \nFixed bandwidth: 971.3398 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3399 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \n\n\nBuilding the model.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\n\n\n\n\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nBuilding the model.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\n\n\n\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21\n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.95        0   -0.72065801   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nVisualising local R2.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\nWarning: The shape mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ] is\ninvalid. See sf::st_is_valid"
  },
  {
    "objectID": "Inclass/Inclass4/Inclass4.html",
    "href": "Inclass/Inclass4/Inclass4.html",
    "title": "In Class Exercise 4",
    "section": "",
    "text": "The R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for constructing geographical data analytics processes (ie weighted regression and summary) statistics\n\nGWmodel\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nWe import and download the packages.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\nNext we import the data needed. Data is in SVY21 projected CRS coordinates. There is some local adjustment.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Inclass/Inclass4/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe transform into CRS = 3414 to remove any transformation. This can also be defined in previous step.\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nWe verified that has been changed to EPSG 3414.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\nWe read in the condo resale data.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nWe can zoom into the longitude and latitude and check the summary statistics.\n\n#X coordinate\nhead(condo_resale$LONGITUDE)\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n#Y coordinate\nhead(condo_resale$LATITUDE)\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\nThe condo resale data is aspatial. We convert it into a sf object and transform it to CRS = 3414 coordinates from wgs84.\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\n\n\n\nWe plot distribution of selling price.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nAbove shows a right skew distribution. Prices transacted at relatively lower prices. We can log transform the data to reduce its skewness.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nSkewness has been reduced after transformation as seen from above.\nWe can also plot multiple histogram in 1 plot using the ggarrange() from ggpubr package.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\nWe can plot dots on the map. We can use the set.zoom.limits to adjust in tm_view().\n\ntmap_mode(\"view\")\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n#Might have error because of missing polygon. \n\nWe can use this code below to by pass error\n\ntmap_options(check.and.fix = TRUE)\n\nWe insert it into the polygon layer as it is the layer causing the error.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\n\n\nHedonic pricing model considers both internal and external factor of the underlying in determining its price. We analyse the price of condominium using lm() by building a simple linear regression model. We regress area_sqm against selling_price.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nWe access the summary\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nWe can also visualise it in a graph plot.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n\nThere can be more than 1 variables in modelling the price of condominiums. Before so, we check if variables are correlated. This is known as problem of collinearity.\nWe should not be using the condo_resale.sf as this is a sf data table object. There will be error. We will use condo_resale which is a non geometric data.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. We remove the latter and build a linear regression model.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\nNot all variables are statistically significant. We remove those that are not statistically significant.\nAfter way of generating the summary table above is to use ols_regress(). It gives us a tidier report than the normal lm() summary report.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.592 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.592                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nApart from looking at significance level, we should also look at the beta values and its signs to see if it makes sense. We remove variables that do no make sense and rebuild the model.\nWe can also use tbl_regression() to create the regression report. This is from gt_summary library.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nIf we want to add report of statistical results at footer, we can use add_glance_source_note().\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n\nVariance Inflation Factor (VIF) is a method where we run a regression for each of the independent variables against the other independent variable to see if there are any correlation. The is another step to check for multi-conlinearity after building the model to ensure robustly there is no multi-collinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nAs long as VIF is less than 10, we can conclude there is no multi-collinearity.\nNext we also check for other linear regression assumptions such as the linearity assumption.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nFrom above, we can see most of the residual points are spreaded across the 0 line. We can conclude the independent and dependent variables are linearly related.\n\n\n\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nFrom above, we can see the residual conforms to this shape, confirming it is normally distribution. We can also do a statistical method instead of through visualization.\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nP value above are all < 0.05. We can reject null hypothesis. Residuals are not normally distributed.\n\n\n\nData needs to be in SpatialPointsDataFrame format. We convert it into this format.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n#Convert\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nWe can see from above there is spatial correlation visually. However we should confirm statistically through Moran’s I test.\n\n#Create neighbour list\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n#Create spatial weights\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nP value < 0.05. There is autocorrelation. Global Moran I is also positive, hence it is a cluster.\n\n\n\n\nSince data is spatial non-stationary, we cannot ignore its spatial autocorrelation. We will use geographically weighted regression model instead of a global regression model that is non geographical.\nWe use the bw.gr() of GwModel to determine the optimal fixed bandwidth to use in the model. We set adaptive parameter as FALSE. We can change the kernel to other types. In this example we will use “gaussian”.\nWe load in the variable from the regression analysis and calculate the bandwidth. We calculate the Cross validation score using the cross validation method by setting the approach argument as “CV”. It will stop when the change of CV score is no longer significant.\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.379526e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3396 CV score: 4.721292e+14 \nFixed bandwidth: 971.3402 CV score: 4.721292e+14 \nFixed bandwidth: 971.3398 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3399 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \n\n\nWe look at the last line. 971.34 is the fixed bandwidth we will use that has the lowest AIC score. Now, we can start building the model.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE) #if true treat point as degree and use the great circle method to change into projected coordinate system\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\n\nNext we check the geogrpahically weighted regession with fixed bandwidth model.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 14:31:46 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.34 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3599e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7426e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5001e+06 -1.5970e+05  3.1970e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8074e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112794435\n   AREA_SQM                 21575\n   AGE                     434203\n   PROX_CBD               2704604\n   PROX_CHILDCARE         1654086\n   PROX_ELDERLYCARE      38867861\n   PROX_URA_GROWTH_AREA  78515805\n   PROX_MRT               3124325\n   PROX_PARK             18122439\n   PROX_PRIMARY_SCH       4637517\n   PROX_SHOPPING_MALL     1529953\n   PROX_BUS_STOP         11342209\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720745\n   FREEHOLD               6073642\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3807 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6193 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.534069e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430418 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 14:31:48 \n\n\nFrom above we can see the geographically weighted regression is a better model with lower AIC than a global multiple linear regression model. There is improvement in adjusted R^2 too.\n\n\n\nAnother type of bandwidth is adaptive. It keeps the number of neighbours in the bandwidth region the same by having a adaptive bandwidth length.\nWe use the below chunk to build the bandwidth.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\n30 is the recommended number of data points to be used.\nNext we build the model with adaptive bandwith.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\n\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 14:31:57 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 14:31:58 \n\n\nAgain it is an improvement over the global regression model. AIC for adpative bandwidth is lower than AIC for fixed bandwidth. We will use the adaptive bandwidth.\n\n\nWe can visualise metrics such as condition number, local R2, predicted, residuals, coefficient standard error. But first we need to make the model into sf data frame format.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21\n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.95        0   -0.72065801   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\n\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14)) #this line sets the zoom limit\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n\nWe can map 2 maps side by side using tmap_arrange() for easy toggling.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also select a specific region. For example we select central region and look at its Local R2 statistics.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\nWarning: The shape mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ] is\ninvalid. See sf::st_is_valid"
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html",
    "href": "Takehome/Takehome 2/takehome2.html",
    "title": "Takehome Exercise 2",
    "section": "",
    "text": "Water is a precious resource. In Nigeria there are water points where villagers rely for their water consumption. However the access to water is not equal. Some parts of Nigeria have better access to water than other parts. In planning for water point management, it is important to understand which areas have similar water access situation and which areas are different so the right solution can be prioritized and prescribed."
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#importing-aspatial-data",
    "href": "Takehome/Takehome 2/takehome2.html#importing-aspatial-data",
    "title": "Takehome Exercise 2",
    "section": "1.1 Importing Aspatial Data",
    "text": "1.1 Importing Aspatial Data\nWe use read_csv() of of readr package to read in the waterpoint CSV file. The file contains countries beyond Nigeria. As we are focusing our analysis on Nigeria, we use filter() to filter our records that are from Nigeria and save it into a tibble dataframe.\n\nwp_nga <- read_csv(\"geodata/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\nWe can look at the columns and its attributes using glimpse(). There are 95,008 rows by 70 columns.\n\nglimpse(wp_nga)\n\nRows: 95,008\nColumns: 70\n$ row_id                        <dbl> 429068, 222071, 160612, 160669, 160642, …\n$ `#source`                     <chr> \"GRID3\", \"Federal Ministry of Water Reso…\n$ `#lat_deg`                    <dbl> 7.980000, 6.964532, 6.486940, 6.727570, …\n$ `#lon_deg`                    <dbl> 5.120000, 3.597668, 7.929720, 7.648670, …\n$ `#report_date`                <chr> \"08/29/2018 12:00:00 AM\", \"08/16/2015 12…\n$ `#status_id`                  <chr> \"Unknown\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"…\n$ `#water_source_clean`         <chr> NA, \"Borehole\", \"Borehole\", \"Borehole\", …\n$ `#water_source_category`      <chr> NA, \"Well\", \"Well\", \"Well\", \"Well\", \"Wel…\n$ `#water_tech_clean`           <chr> \"Tapstand\", \"Mechanized Pump\", \"Hand Pum…\n$ `#water_tech_category`        <chr> \"Tapstand\", \"Mechanized Pump\", \"Hand Pum…\n$ `#facility_type`              <chr> \"Improved\", \"Improved\", \"Improved\", \"Imp…\n$ `#clean_country_name`         <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#clean_adm1`                 <chr> \"Ekiti\", \"Ogun\", \"Ebonyi\", \"Enugu\", \"Enu…\n$ `#clean_adm2`                 <chr> \"Moba\", \"Obafemi-Owode\", \"Ohaukwu\", \"Isi…\n$ `#clean_adm3`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#clean_adm4`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#install_year`               <dbl> NA, NA, NA, NA, NA, NA, NA, 2016, 2016, …\n$ `#installer`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehab_year`                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehabilitator`              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management_clean`           <chr> NA, \"Other\", NA, NA, NA, NA, NA, NA, NA,…\n$ `#status_clean`               <chr> NA, \"Functional\", NA, NA, NA, NA, NA, NA…\n$ `#pay`                        <chr> NA, \"No\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ `#fecal_coliform_presence`    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#fecal_coliform_value`       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#subjective_quality`         <chr> NA, \"Acceptable quality\", NA, NA, NA, NA…\n$ `#activity_id`                <chr> \"1a117ba2-5256-4801-874c-f7611a4499dd\", …\n$ `#scheme_id`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#wpdx_id`                    <chr> \"6FV7X4JC+222\", \"6FR5XH7X+R37\", \"6FR9FWP…\n$ `#notes`                      <chr> \"Tap Water\", \"Ajura\", NA, NA, NA, NA, NA…\n$ `#orig_lnk`                   <chr> \"https://nigeria.africageoportal.com/dat…\n$ `#photo_lnk`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#country_id`                 <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\"…\n$ `#data_lnk`                   <chr> \"https://catalog.waterpointdata.org/data…\n$ `#distance_to_primary_road`   <dbl> 767.3742, 13364.9005, 9492.7619, 9319.08…\n$ `#distance_to_secondary_road` <dbl> 921.79187, 48.87743, 4333.34280, 23276.3…\n$ `#distance_to_tertiary_road`  <dbl> 3146.733237, 4167.519068, 693.211204, 30…\n$ `#distance_to_city`           <dbl> 41049.944, 13898.649, 27381.922, 34823.6…\n$ `#distance_to_town`           <dbl> 959.365, 9405.783, 72060.118, 31665.447,…\n$ water_point_history           <chr> \"{\\\"2018-08-29\\\": {\\\"source\\\": \\\"GRID3\\\"…\n$ rehab_priority                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ water_point_population        <dbl> NA, 140, 0, 492, 868, 81, 0, 9969, 933, …\n$ local_population_1km          <dbl> NA, 887, 0, 492, 1919, 81, 0, 13740, 933…\n$ crucialness_score             <dbl> NA, 0.1578354, NA, 1.0000000, 0.4523189,…\n$ pressure_score                <dbl> NA, 0.1400000, NA, 1.6400000, 2.8933333,…\n$ usage_capacity                <dbl> 250, 1000, 300, 300, 300, 300, 300, 1000…\n$ is_urban                      <lgl> TRUE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ days_since_report             <dbl> 1483, 2592, 655, 655, 655, 655, 655, 217…\n$ staleness_score               <dbl> 62.65911, 44.17405, 81.34550, 81.34550, …\n$ latest_record                 <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE…\n$ location_id                   <dbl> 358773, 264633, 397972, 397984, 397982, …\n$ cluster_size                  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ `#clean_country_id`           <chr> \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\"…\n$ `#country_name`               <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#water_source`               <chr> \"Tap\", \"Improved Tube well or borehole\",…\n$ `#water_tech`                 <chr> NA, \"Motorised\", NA, NA, NA, NA, NA, \"Su…\n$ `#status`                     <chr> NA, \"Functional (and in use)\", NA, NA, N…\n$ `#adm2`                       <chr> NA, \"Obafemi-Owode\", NA, NA, NA, NA, NA,…\n$ `#adm3`                       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management`                 <chr> NA, \"Other\", NA, NA, NA, NA, NA, NA, NA,…\n$ `#adm1`                       <chr> NA, \"Ogun\", \"Enugu\", \"Enugu\", \"Enugu\", \"…\n$ `New Georeferenced Column`    <chr> \"POINT (5.12 7.98)\", \"POINT (3.5976683 6…\n$ lat_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ lat_lon_deg                   <chr> \"(7.98°, 5.12°)\", \"(6.9645317°, 3.597668…\n$ lon_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ public_data_source            <chr> \"https://catalog.waterpointdata.org/data…\n$ converted                     <chr> NA, \"#status_id, #water_source, #pay, #s…\n$ count                         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ created_timestamp             <chr> \"12/06/2021 09:12:57 PM\", \"06/30/2020 12…\n$ updated_timestamp             <chr> \"12/06/2021 09:12:57 PM\", \"06/30/2020 12…\n\n\nWe check if there are missing values using is.na(). It will return number of missing values and sum() will sum up the number of missing values.\n\nsum(is.na(wp_nga))\n\n[1] 1520020\n\n\nAs we can some of the columns contain NA values. There are 1520020 NAs in total. We will need to handle this later.\nWe also check if the geospatial attribute is in the right format. From glimpse() above, we can see “New Georeferenced Column” column is in <CHR> character format. This is aspatial format. We will need to clean this up.\n\nhead(wp_nga$`New Georeferenced Column`,2)\n\n[1] \"POINT (5.12 7.98)\"           \"POINT (3.5976683 6.9645317)\"\n\n\nThe geometry column in character format is known as Well Known Text (wkt) format. We will convert this aspatial format into sf data frame using st_as_sfc(). In SF library, we have 3 object types: sg object, sfc object and sf object.\n\nsg object has the lowest information richness. It only contains coordinates information\nsfc objects includes EPSG code information\nsf object is a sfc object with additional data columns.\n\nIn below code chunk, we turn New Georeferenced Column into a sfc object and append it as a new column into wp_nga tibble data table.\n\nwp_nga$Geometry <- st_as_sfc(wp_nga$`New Georeferenced Column`)\nhead(wp_nga$Geometry)\n\nGeometry set for 6 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3.597668 ymin: 6.48694 xmax: 7.92972 ymax: 7.98\nCRS:           NA\nFirst 5 geometries:\n\n\nOnce new column has been added, we convert the wp_nga tibble data frame into sf data table using st_sf() and name the data table wp_sf.\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …"
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#importing-geospatial-data",
    "href": "Takehome/Takehome 2/takehome2.html#importing-geospatial-data",
    "title": "Takehome Exercise 2",
    "section": "1.2 Importing Geospatial Data",
    "text": "1.2 Importing Geospatial Data\nWe import the Local Government Area data using st_read(). The towns in Nigeria are divided into multiple local government areas. Each government area is a polygon by itself. We import it and name the data as nga with EPSG 4326.\n\nnga <- st_read(dsn = \"geodata\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Takehome/Takehome 2/geodata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nThere might be duplicates in the shapeNames. We run a check to see using duplicated() if base R.\n\nnga$shapeName[duplicated(nga$shapeName)]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nThere are some duplicated shapeNames. We find out the indexes in the list of duplicates and return the shapeNames.\n\nduplicated_name <- nga$shapeName[duplicated(nga$shapeName)]\ndup_idx <- which(nga$shapeName %in% duplicated_name)\nnga[dup_idx,]\n\nSimple feature collection with 12 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3.316459 ymin: 6.459038 xmax: 9.020704 ymax: 12.05035\nGeodetic CRS:  WGS 84\nFirst 10 features:\n    shapeName                       geometry\n94      Bassa MULTIPOLYGON (((6.708541 7....\n95      Bassa MULTIPOLYGON (((8.823522 10...\n304  Ifelodun MULTIPOLYGON (((4.664107 8....\n305  Ifelodun MULTIPOLYGON (((4.721977 7....\n355  Irepodun MULTIPOLYGON (((5.05493 8.0...\n356  Irepodun MULTIPOLYGON (((4.543349 7....\n519  Nasarawa MULTIPOLYGON (((8.554589 11...\n520  Nasarawa MULTIPOLYGON (((7.493228 8....\n546       Obi MULTIPOLYGON (((8.191919 6....\n547       Obi MULTIPOLYGON (((9.008576 8....\n\n\nIndex 94, 95, 304, 305, 355, 356, 519, 520, 546 and 547 have duplicated shapeNames. We save all the indexes into a vector called dup_idx. Next we need to identify these duplicated boundary names. We plot the polygons in an interactive map using openstreet maps layer and rely on its labels to identify the duplicated shapeNames and make comparison to Google Maps.\n\ntmap_mode('view')\n  tm_shape(nga[dup_idx,]) +\n  #tm_shape(nga[519,])+\n  tm_polygons()\n\n\n\n\n\n\nBased on a visual analysis, the correct ShapeName should follow the table below. We overwrite the ShapeName of the indexes according to the table below.\n\n\n\nRow\nRenamed ShapeName\n\n\n\n\n94\nBassa-kogi\n\n\n95\nBassa-plateau\n\n\n304\nIfelodun-kwara\n\n\n305\nIfelodun-Osun\n\n\n355\nIrepodun-Kwara\n\n\n356\nIrepodun-Osun\n\n\n519\nKano\n\n\n520\nNassarawa\n\n\n546\nObi-Benue\n\n\n547\nObi-Nasarawa\n\n\n693\nSurulere-lagos\n\n\n694\nSurulere-Oyo\n\n\n\nSource: (Ong, 2022)\nThe code chunk below is used to rename the duplciated shapeNames.\n\nnga$shapeName[dup_idx] <- c(\"Bassa-kogi\", \"Bassa-plateau\", \"Ifelodun-kwara\", \"Ifelodun-Osun\", \"Irepodun-Kwara\", \"Irepodun-Osun\", \"Kano\", \"Nassarawa\", \"Obi-Benue\", \"Obi-Nasarawa\", \"Surulere-lagos\", \"Surulere-Oyo\")\n\nWe check if there are any duplicated shapeNames once again after the overwrite step above. If there are, return the index.\n\nwhich(nga$shapeName %in% nga$shapeName[duplicated(nga$shapeName)])\n\ninteger(0)\n\n\nGreat! There are no more duplicated shapeNames. We are now ready to combine the aspatial and geospatial data together."
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#table-join",
    "href": "Takehome/Takehome 2/takehome2.html#table-join",
    "title": "Takehome Exercise 2",
    "section": "1.3 Table Join",
    "text": "1.3 Table Join\nWe are interested to find out the statistical attributes of each polygon. Ideally we need a sf data table where it has the geometry information and the statisical attributes for each geometry. We can map the attributes of the wp_nga table into nga using st_join(). Data is joined in the same method as st_intersects().\n\nwp_sf_2 <- st_join(wp_sf, nga)\nwp_sf_2\n\nSimple feature collection with 95008 features and 71 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 72\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 63 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nAfter the join, there are 95,008 rows and 72 columns."
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#data-wrangling",
    "href": "Takehome/Takehome 2/takehome2.html#data-wrangling",
    "title": "Takehome Exercise 2",
    "section": "1.4 Data Wrangling",
    "text": "1.4 Data Wrangling\n\ncolnames(wp_sf_2)\n\n [1] \"row_id\"                      \"#source\"                    \n [3] \"#lat_deg\"                    \"#lon_deg\"                   \n [5] \"#report_date\"                \"#status_id\"                 \n [7] \"#water_source_clean\"         \"#water_source_category\"     \n [9] \"#water_tech_clean\"           \"#water_tech_category\"       \n[11] \"#facility_type\"              \"#clean_country_name\"        \n[13] \"#clean_adm1\"                 \"#clean_adm2\"                \n[15] \"#clean_adm3\"                 \"#clean_adm4\"                \n[17] \"#install_year\"               \"#installer\"                 \n[19] \"#rehab_year\"                 \"#rehabilitator\"             \n[21] \"#management_clean\"           \"#status_clean\"              \n[23] \"#pay\"                        \"#fecal_coliform_presence\"   \n[25] \"#fecal_coliform_value\"       \"#subjective_quality\"        \n[27] \"#activity_id\"                \"#scheme_id\"                 \n[29] \"#wpdx_id\"                    \"#notes\"                     \n[31] \"#orig_lnk\"                   \"#photo_lnk\"                 \n[33] \"#country_id\"                 \"#data_lnk\"                  \n[35] \"#distance_to_primary_road\"   \"#distance_to_secondary_road\"\n[37] \"#distance_to_tertiary_road\"  \"#distance_to_city\"          \n[39] \"#distance_to_town\"           \"water_point_history\"        \n[41] \"rehab_priority\"              \"water_point_population\"     \n[43] \"local_population_1km\"        \"crucialness_score\"          \n[45] \"pressure_score\"              \"usage_capacity\"             \n[47] \"is_urban\"                    \"days_since_report\"          \n[49] \"staleness_score\"             \"latest_record\"              \n[51] \"location_id\"                 \"cluster_size\"               \n[53] \"#clean_country_id\"           \"#country_name\"              \n[55] \"#water_source\"               \"#water_tech\"                \n[57] \"#status\"                     \"#adm2\"                      \n[59] \"#adm3\"                       \"#management\"                \n[61] \"#adm1\"                       \"New Georeferenced Column\"   \n[63] \"lat_deg_original\"            \"lat_lon_deg\"                \n[65] \"lon_deg_original\"            \"public_data_source\"         \n[67] \"converted\"                   \"count\"                      \n[69] \"created_timestamp\"           \"updated_timestamp\"          \n[71] \"Geometry\"                    \"shapeName\""
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#deriving-new-metrics",
    "href": "Takehome/Takehome 2/takehome2.html#deriving-new-metrics",
    "title": "Takehome Exercise 2",
    "section": "1.5 Deriving new metrics",
    "text": "1.5 Deriving new metrics\nIn order to regionalise the data by the measures defined, we need to create new metrics. The process will be to first check if there are empty data points for these related data points. If there are, we fill the blanks with “Unknown”. Then we compute these metrics:\n\nTotal number of functional water points\n\nCount of functional water points\n\nTotal number of non-functional water points\n\nCount of non-functional water points\n\nPercentage of functional water points\n\nCount of functional water points/ total count of water points\n\nPercentage of non-functional water points\n\nCount of non-functional water points/ total count of water points\n\nPercentage of main water point technology (i.e. Hand Pump)\n\nCount of water point technology/ total count of water points\n\nPercentage of non-high vs high usage capacity (i.e. < 1000, >=1000)\n\nCount of water points with high usage capacity/ total count of water points\nCount of water points with non-high usage capacity/ total count of water points\n\nPercentage of rural water points\n\nCount of rural water points / total count of water points\nCount of rural urban points / total count of water points\n\n\n\n1.51 Water point Functionality\nThe below code chunk is used to check the frequency distribution of the water point functionality.\n\nfreq(wp_sf_2$`#status_clean`)\n\n\n\n\n                               var frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nFrom above we can see there are many NAs for status clean column. We will remove the NAs\n\nwp_sf_2 <-wp_sf_2 %>%\n  mutate(`#status_clean` = replace_na(`#status_clean`, \"Unknown\"))\n\nfreq(wp_sf_2$`#status_clean`)\n\n\n\n\n                               var frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nWe create new variables using the filter() and then do a point in polygon count, and save the data in nga_wp data frame which originates from nga data table.\n\n# Functional Waterpoint\nwpt_functional <- wp_sf_2 %>%\n  filter(`#status_clean` %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n#Non Functional Waterpoint\nwpt_nonfunctional <- wp_sf_2 %>%\n  filter(`#status_clean` %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n#Unknown Waterpoint\nwpt_unknown <- wp_sf_2 %>%\n  filter(`#status_clean` == \"Unknown\")\n\n#Count of waterpoint functioning/ not functioning\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_sf_2))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\nWe have created 4 columns - Total wpt, wpt functional, wpt non-functional, wpt unknown.\n\n\n1.52 Water point technology\nWe check the categories of water point technology using the freq() function.\n\n#Check out unique categories\nfreq(wp_sf_2$`#water_tech_category`)\n\n\n\n\n              var frequency percentage cumulative_perc\n1       Hand Pump     58755      61.84           61.84\n2 Mechanized Pump     25644      26.99           88.83\n3            <NA>     10055      10.58           99.41\n4        Tapstand       553       0.58           99.99\n5 Rope and Bucket         1       0.00          100.00\n\n\nThere are NAs. We will need to remove them before computing the metrics.\n\nwp_sf_2 <-wp_sf_2 %>%\n  mutate(`#water_tech_category` = replace_na(`#water_tech_category`, \"Unknown\"))\n\nfreq(wp_sf_2$`#water_tech_category`)\n\n\n\n\n              var frequency percentage cumulative_perc\n1       Hand Pump     58755      61.84           61.84\n2 Mechanized Pump     25644      26.99           88.83\n3         Unknown     10055      10.58           99.41\n4        Tapstand       553       0.58           99.99\n5 Rope and Bucket         1       0.00          100.00\n\n\nWe create new variables using the filter() and then do a point in polygon count and save the data in nga_wp data frame. Note that there is only 1 rope and bucket hand pump count.\n\n#Declaring categories\ntpstand <- wp_sf_2 %>%\n  filter(`#water_tech_category` == \"Tapstand\")\n\nm_pump <- wp_sf_2 %>%\n  filter(`#water_tech_category` == \"Mechanized Pump\")\n\nh_pump <- wp_sf_2 %>%\n  filter(`#water_tech_category` == \"Hand Pump\")\n\nunknown_pump <- wp_sf_2 %>%\n  filter(`#water_tech_category` == \"Unknown\")\n\nrpe_buc_pump <- wp_sf_2 %>%\n  filter(`#water_tech_category` == \"Rope and Bucket\")\n\n#Count of waterpoint technology categories\nnga_wp <- nga_wp %>% \n  mutate(`wpt_tpstand` = lengths(\n    st_intersects(nga, tpstand))) %>%\n  mutate(`wpt_m_pump` = lengths(\n    st_intersects(nga, m_pump))) %>%\n  mutate(`wpt_h_pump` = lengths(\n    st_intersects(nga, h_pump))) %>%\n  mutate(`wpt_unknown` = lengths(\n    st_intersects(nga, unknown_pump))) %>%\n  mutate(`wpt_rpe_buc_pump` = lengths(\n    st_intersects(nga, rpe_buc_pump)\n  ))\n\nWe created 5 columns : wpt_tpstand, wpt_m_pump, wpt_h_pump, wpt_unknown, wpt_pe_buc_pump.\n\n\n1.53 Water point usage capacity\nWe check the usages of water point technology using the freq() function.\n\nfreq(data = wp_sf_2,\n     input = \"usage_capacity\")\n\n\n\n\n  usage_capacity frequency percentage cumulative_perc\n1            300     68789      72.40           72.40\n2           1000     25644      26.99           99.39\n3            250       573       0.60           99.99\n4             50         2       0.00          100.00\n\n\nThere are 4 categories. We bin the capacity into 2 categories - Waterpoint less than 1000 and waterpoint more than 1000. The former implies water usage capacity is low while latter is high. We create new variables using the filter() and then do a point in polygon count and save the data in nga_wp data frame.\n\nwpt_l_1000 <- wp_sf_2 %>%\n  filter(usage_capacity %in% c(50,250,300))\n\nwpt_m_1000 <- wp_sf_2%>%\n  filter(usage_capacity %in% c(1000))\n\n#Count of capacity more than and less than 1000\nnga_wp <- nga_wp %>% \n  mutate(`wtp_m1000` = lengths(\n    st_intersects(nga, wpt_m_1000))) %>%\n  mutate(`wtp_l1000` = lengths(\n    st_intersects(nga, wpt_l_1000)))\n\nWe added 2 columns - wtp_m1000 and wtp_l1000.\n\n\n1.54 Water point location\nThe water point has a metric that “is_urban” that classifies whether it is in rural area or non rural area. There are a lot more water point in non urban areas than rural areas. For simplicity, I define non urban as rural.\n\ntable(wp_sf_2$is_urban)\n\n\nFALSE  TRUE \n75444 19564 \n\n\nWe create new variables using the filter() and then do a point in polygon count and save the data in nga_wp data frame.\n\nwpt_rural <- wp_sf %>%\n  filter(is_urban == FALSE)\n\nwpt_urban <- wp_sf %>%\n  filter(is_urban == TRUE)\n\n#Count of urban water point vs non urban water point\nnga_wp <- nga_wp %>% \n  mutate(`rural_count` = lengths(\n    st_intersects(nga, wpt_rural))) %>%\n  mutate(`urban_count` = lengths(\n    st_intersects(nga, wpt_urban)))"
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#deriving-percentages-of-each-metric",
    "href": "Takehome/Takehome 2/takehome2.html#deriving-percentages-of-each-metric",
    "title": "Takehome Exercise 2",
    "section": "1.6 Deriving percentages of each metric",
    "text": "1.6 Deriving percentages of each metric\nWe cannot use the absolute count in our analysis as some areas might have more water point than others and hence the clustering algorithm might be biased towards polygons with greater counts of water points. We compute the percentage value instead of count as seen below:\n\nnga_wp <- nga_wp %>%\n  mutate(`pct_functional` = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  mutate(`pct_tpstand` = `wpt_tpstand`/`total wpt`) %>%\n  mutate(`pct_mpump` = `wpt_m_pump`/`total wpt`) %>%\n  mutate(`pct_hpump` = `wpt_h_pump`/`total wpt`) %>%\n  mutate(`pct_unknown` = `wpt_unknown`/`total wpt`) %>%\n  mutate(`pct_rbpump` = `wpt_rpe_buc_pump`/`total wpt`) %>%\n  mutate(`pct_wptm1000` = `wtp_m1000`/`total wpt`) %>%\n  mutate(`pct_wptl1000` = `wtp_l1000`/`total wpt`) %>%\n  mutate(`pct_rural` = `rural_count`/`total wpt`) %>%\n  mutate(`pct_urban` = `urban_count`/`total wpt`)\n\nWe save the data table in a smaller file for easy access\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")\nnga_wp <-read_rds(\"geodata/nga_wp.rds\")\nnga_wp\n\nSimple feature collection with 774 features and 25 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\nFirst 10 features:\n        shapeName                       geometry total wpt wpt functional\n1       Aba North MULTIPOLYGON (((7.401109 5....        17              7\n2       Aba South MULTIPOLYGON (((7.334479 5....        71             29\n3          Abadam MULTIPOLYGON (((13.83477 13...         0              0\n4           Abaji MULTIPOLYGON (((7.045872 9....        57             23\n5            Abak MULTIPOLYGON (((7.811244 5....        48             23\n6       Abakaliki MULTIPOLYGON (((8.4109 6.28...       233             82\n7  Abeokuta North MULTIPOLYGON (((3.143903 7....        34             16\n8  Abeokuta South MULTIPOLYGON (((3.301615 7....       119             72\n9             Abi MULTIPOLYGON (((8.153282 5....       152             79\n10    Aboh-Mbaise MULTIPOLYGON (((7.321909 5....        66             18\n   wpt non-functional wpt unknown wpt_tpstand wpt_m_pump wpt_h_pump wpt_unknown\n1                   9           1           0         14          2           1\n2                  35           7           0         62          7           2\n3                   0           0           0          0          0           0\n4                  34           0           0         34         23           0\n5                  25           0           0         44          4           0\n6                  42         109          36         22        102          73\n7                  15           3           0         26          5           3\n8                  33          14           0         84         20          15\n9                  62          11           0         50         91          11\n10                 26          22           0         43          1          22\n   wpt_rpe_buc_pump wtp_m1000 wtp_l1000 rural_count urban_count pct_functional\n1                 0        14         3           0          17      0.4117647\n2                 0        62         9           4          67      0.4084507\n3                 0         0         0           0           0            NaN\n4                 0        34        23          48           9      0.4035088\n5                 0        44         4          40           8      0.4791667\n6                 0        22       211         204          29      0.3519313\n7                 0        26         8           7          27      0.4705882\n8                 0        84        35           0         119      0.6050420\n9                 0        50       102         145           7      0.5197368\n10                0        43        23          48          18      0.2727273\n   pct_non-functional pct_tpstand pct_mpump  pct_hpump pct_unknown pct_rbpump\n1           0.5294118   0.0000000 0.8235294 0.11764706  0.05882353          0\n2           0.4929577   0.0000000 0.8732394 0.09859155  0.02816901          0\n3                 NaN         NaN       NaN        NaN         NaN        NaN\n4           0.5964912   0.0000000 0.5964912 0.40350877  0.00000000          0\n5           0.5208333   0.0000000 0.9166667 0.08333333  0.00000000          0\n6           0.1802575   0.1545064 0.0944206 0.43776824  0.31330472          0\n7           0.4411765   0.0000000 0.7647059 0.14705882  0.08823529          0\n8           0.2773109   0.0000000 0.7058824 0.16806723  0.12605042          0\n9           0.4078947   0.0000000 0.3289474 0.59868421  0.07236842          0\n10          0.3939394   0.0000000 0.6515152 0.01515152  0.33333333          0\n   pct_wptm1000 pct_wptl1000  pct_rural  pct_urban\n1     0.8235294   0.17647059 0.00000000 1.00000000\n2     0.8732394   0.12676056 0.05633803 0.94366197\n3           NaN          NaN        NaN        NaN\n4     0.5964912   0.40350877 0.84210526 0.15789474\n5     0.9166667   0.08333333 0.83333333 0.16666667\n6     0.0944206   0.90557940 0.87553648 0.12446352\n7     0.7647059   0.23529412 0.20588235 0.79411765\n8     0.7058824   0.29411765 0.00000000 1.00000000\n9     0.3289474   0.67105263 0.95394737 0.04605263\n10    0.6515152   0.34848485 0.72727273 0.27272727"
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#exploratory-data-analysis",
    "href": "Takehome/Takehome 2/takehome2.html#exploratory-data-analysis",
    "title": "Takehome Exercise 2",
    "section": "2. Exploratory Data Analysis",
    "text": "2. Exploratory Data Analysis\n\n2.1 Histogram of distribution\nWe use the summary() to obtain summary statistics.\n\nsummary(nga_wp[,5:length(nga_wp)])\n\n wpt non-functional  wpt unknown      wpt_tpstand        wpt_m_pump    \n Min.   :  0.00     Min.   :  0.00   Min.   : 0.0000   Min.   :  0.00  \n 1st Qu.: 12.25     1st Qu.:  0.00   1st Qu.: 0.0000   1st Qu.: 11.00  \n Median : 34.00     Median :  0.00   Median : 0.0000   Median : 25.50  \n Mean   : 41.60     Mean   : 13.76   Mean   : 0.7145   Mean   : 33.12  \n 3rd Qu.: 60.75     3rd Qu.: 17.75   3rd Qu.: 0.0000   3rd Qu.: 46.00  \n Max.   :278.00     Max.   :219.00   Max.   :42.0000   Max.   :245.00  \n                                                                       \n   wpt_h_pump      wpt_unknown     wpt_rpe_buc_pump     wtp_m1000     \n Min.   :  0.00   Min.   :  0.00   Min.   :0.000000   Min.   :  0.00  \n 1st Qu.:  6.00   1st Qu.:  0.00   1st Qu.:0.000000   1st Qu.: 11.00  \n Median : 47.00   Median :  1.00   Median :0.000000   Median : 25.50  \n Mean   : 75.89   Mean   : 12.99   Mean   :0.001292   Mean   : 33.12  \n 3rd Qu.:111.00   3rd Qu.: 15.00   3rd Qu.:0.000000   3rd Qu.: 46.00  \n Max.   :764.00   Max.   :213.00   Max.   :1.000000   Max.   :245.00  \n                                                                      \n   wtp_l1000       rural_count      urban_count     pct_functional  \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00   Min.   :0.0000  \n 1st Qu.: 16.00   1st Qu.: 23.00   1st Qu.:  0.00   1st Qu.:0.3333  \n Median : 60.00   Median : 64.00   Median :  9.00   Median :0.4792  \n Mean   : 89.59   Mean   : 97.45   Mean   : 25.27   Mean   :0.5070  \n 3rd Qu.:127.75   3rd Qu.:141.00   3rd Qu.: 33.00   3rd Qu.:0.6749  \n Max.   :767.00   Max.   :894.00   Max.   :324.00   Max.   :1.0000  \n                                                    NA's   :13      \n pct_non-functional  pct_tpstand         pct_mpump        pct_hpump     \n Min.   :0.0000     Min.   :0.000000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2211     1st Qu.:0.000000   1st Qu.:0.1250   1st Qu.:0.1860  \n Median :0.3559     Median :0.000000   Median :0.3193   Median :0.5255  \n Mean   :0.3654     Mean   :0.005893   Mean   :0.3818   Mean   :0.4956  \n 3rd Qu.:0.5082     3rd Qu.:0.000000   3rd Qu.:0.5843   3rd Qu.:0.7857  \n Max.   :1.0000     Max.   :0.328947   Max.   :1.0000   Max.   :1.0000  \n NA's   :13         NA's   :13         NA's   :13       NA's   :13      \n  pct_unknown        pct_rbpump        pct_wptm1000     pct_wptl1000   \n Min.   :0.00000   Min.   :0.000000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.00000   1st Qu.:0.000000   1st Qu.:0.1250   1st Qu.:0.4157  \n Median :0.01124   Median :0.000000   Median :0.3193   Median :0.6807  \n Mean   :0.11672   Mean   :0.000011   Mean   :0.3818   Mean   :0.6182  \n 3rd Qu.:0.18518   3rd Qu.:0.000000   3rd Qu.:0.5843   3rd Qu.:0.8750  \n Max.   :1.00000   Max.   :0.008696   Max.   :1.0000   Max.   :1.0000  \n NA's   :13        NA's   :13         NA's   :13       NA's   :13      \n   pct_rural        pct_urban               geometry  \n Min.   :0.0000   Min.   :0.0000   MULTIPOLYGON :774  \n 1st Qu.:0.5922   1st Qu.:0.0000   epsg:4326    :  0  \n Median :0.8717   Median :0.1283   +proj=long...:  0  \n Mean   :0.7395   Mean   :0.2605                      \n 3rd Qu.:1.0000   3rd Qu.:0.4078                      \n Max.   :1.0000   Max.   :1.0000                      \n NA's   :13       NA's   :13                          \n\n\nAs seen from above, there are some NAs. We dive deeper into it to identify these NAs using is.na() and which() to identify the indexes. There are 13 NAs.\n\nwhich(is.na(nga_wp$ pct_functional))\n\n [1]   3  86 241 250 252 261 400 406 447 473 492 507 526\n\nwhich(is.na(nga_wp$pct_wptm1000))\n\n [1]   3  86 241 250 252 261 400 406 447 473 492 507 526\n\n\n\ntable(nga_wp$`total wpt`)\n\n\n  0   1   2   3   4   5   6   7   8   9  11  12  13  14  15  16  17  18  19  20 \n 13   6   5   3   2   2   4   3   3   2   4   4   6   4   3   1   4   1   5   5 \n 21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40 \n  2   4   5   3   7   4   1   4   1   1   3   5  11   7   6   5   4   4   6   6 \n 41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 \n  4   8   2   7   5   3   5   5   3   1   5   3   2   7   2   5   2   5   6   7 \n 61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80 \n  4   4   9   9   3   6   3   5   2   4   3   4   5   6   3   4   6   1   1   2 \n 81  82  83  84  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 102 \n  5   5   4   1   1   5   5   3   5   1   3   2   1   4   4   6   2   3   9   4 \n103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 122 123 \n  4   4   4   3   3   1   3   2   6   2   4   3   4   2   2   6   2   2   3   2 \n124 125 126 127 128 129 130 131 132 133 135 136 137 138 139 141 142 143 144 145 \n  3   3   4   3   3   2   2   6   2   4   2   1   2   2   4   1   2   4   2   3 \n146 147 148 150 151 152 153 154 155 156 157 158 159 160 161 162 163 165 166 167 \n  1   1   6   2   2   2   3   4   4   1   1   2   3   2   2   2   3   3   2   3 \n168 169 170 172 173 175 176 177 178 179 180 181 182 184 185 186 187 188 189 190 \n  1   3   1   3   3   5   3   1   6   1   2   2   1   1   5   2   2   2   2   3 \n191 192 193 194 196 197 198 199 201 202 203 205 206 207 208 209 210 211 213 216 \n  1   1   1   2   2   2   2   4   2   4   1   1   4   2   1   1   1   2   1   1 \n223 224 225 226 227 228 229 232 233 234 239 240 241 243 244 246 248 251 252 255 \n  1   1   1   1   2   1   1   1   2   1   2   2   1   1   1   2   1   2   1   1 \n256 258 259 260 264 265 271 273 275 277 280 281 283 286 287 288 290 293 295 297 \n  2   1   1   2   1   2   2   2   3   1   1   1   1   1   1   1   1   2   1   1 \n298 299 300 301 304 308 309 314 316 318 319 324 325 329 335 339 343 345 348 349 \n  1   1   1   1   2   1   1   1   2   1   2   1   1   1   1   1   1   2   1   1 \n357 358 361 364 365 375 383 389 393 396 398 413 423 428 433 438 443 444 445 448 \n  1   1   1   1   1   1   2   1   1   1   1   1   1   1   1   1   1   1   2   1 \n485 486 499 551 552 556 601 665 776 894 \n  1   1   1   1   1   1   1   1   1   1 \n\n\nThe reason of the NAs is because there are some polygons that have no water point and hence it is a result of a 0 division. For metrics that are NA, we replace them with 0 using the below code chunk.\n\nnga_wp$pct_functional[is.nan(nga_wp$pct_functional)] <- 0\nnga_wp$`pct_non-functional`[is.nan(nga_wp$`pct_non-functional`)] <- 0\nnga_wp$pct_tpstand[is.nan(nga_wp$pct_tpstand)] <- 0\nnga_wp$pct_mpump[is.nan(nga_wp$pct_mpump)] <- 0\nnga_wp$pct_hpump[is.nan(nga_wp$pct_hpump)] <- 0\nnga_wp$pct_unknown[is.nan(nga_wp$pct_unknown)] <- 0\nnga_wp$pct_rbpump[is.nan(nga_wp$pct_rbpump)] <- 0\nnga_wp$pct_wptm1000[is.nan(nga_wp$pct_wptm1000)] <- 0\nnga_wp$pct_wptl1000[is.nan(nga_wp$pct_wptl1000)] <- 0\nnga_wp$pct_rural[is.nan(nga_wp$pct_rural)] <- 0\nnga_wp$pct_urban[is.nan(nga_wp$pct_urban)] <- 0\n\nsummary(nga_wp[,5:length(nga_wp)])\n\n wpt non-functional  wpt unknown      wpt_tpstand        wpt_m_pump    \n Min.   :  0.00     Min.   :  0.00   Min.   : 0.0000   Min.   :  0.00  \n 1st Qu.: 12.25     1st Qu.:  0.00   1st Qu.: 0.0000   1st Qu.: 11.00  \n Median : 34.00     Median :  0.00   Median : 0.0000   Median : 25.50  \n Mean   : 41.60     Mean   : 13.76   Mean   : 0.7145   Mean   : 33.12  \n 3rd Qu.: 60.75     3rd Qu.: 17.75   3rd Qu.: 0.0000   3rd Qu.: 46.00  \n Max.   :278.00     Max.   :219.00   Max.   :42.0000   Max.   :245.00  \n   wpt_h_pump      wpt_unknown     wpt_rpe_buc_pump     wtp_m1000     \n Min.   :  0.00   Min.   :  0.00   Min.   :0.000000   Min.   :  0.00  \n 1st Qu.:  6.00   1st Qu.:  0.00   1st Qu.:0.000000   1st Qu.: 11.00  \n Median : 47.00   Median :  1.00   Median :0.000000   Median : 25.50  \n Mean   : 75.89   Mean   : 12.99   Mean   :0.001292   Mean   : 33.12  \n 3rd Qu.:111.00   3rd Qu.: 15.00   3rd Qu.:0.000000   3rd Qu.: 46.00  \n Max.   :764.00   Max.   :213.00   Max.   :1.000000   Max.   :245.00  \n   wtp_l1000       rural_count      urban_count     pct_functional  \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.00   Min.   :0.0000  \n 1st Qu.: 16.00   1st Qu.: 23.00   1st Qu.:  0.00   1st Qu.:0.3261  \n Median : 60.00   Median : 64.00   Median :  9.00   Median :0.4741  \n Mean   : 89.59   Mean   : 97.45   Mean   : 25.27   Mean   :0.4984  \n 3rd Qu.:127.75   3rd Qu.:141.00   3rd Qu.: 33.00   3rd Qu.:0.6699  \n Max.   :767.00   Max.   :894.00   Max.   :324.00   Max.   :1.0000  \n pct_non-functional  pct_tpstand         pct_mpump        pct_hpump     \n Min.   :0.0000     Min.   :0.000000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2105     1st Qu.:0.000000   1st Qu.:0.1220   1st Qu.:0.1670  \n Median :0.3505     Median :0.000000   Median :0.3127   Median :0.5099  \n Mean   :0.3592     Mean   :0.005794   Mean   :0.3754   Mean   :0.4873  \n 3rd Qu.:0.5076     3rd Qu.:0.000000   3rd Qu.:0.5771   3rd Qu.:0.7778  \n Max.   :1.0000     Max.   :0.328947   Max.   :1.0000   Max.   :1.0000  \n  pct_unknown       pct_rbpump         pct_wptm1000     pct_wptl1000   \n Min.   :0.0000   Min.   :0.000e+00   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000e+00   1st Qu.:0.1220   1st Qu.:0.3968  \n Median :0.0100   Median :0.000e+00   Median :0.3127   Median :0.6703  \n Mean   :0.1148   Mean   :1.124e-05   Mean   :0.3754   Mean   :0.6078  \n 3rd Qu.:0.1816   3rd Qu.:0.000e+00   3rd Qu.:0.5771   3rd Qu.:0.8735  \n Max.   :1.0000   Max.   :8.696e-03   Max.   :1.0000   Max.   :1.0000  \n   pct_rural        pct_urban               geometry  \n Min.   :0.0000   Min.   :0.0000   MULTIPOLYGON :774  \n 1st Qu.:0.5727   1st Qu.:0.0000   epsg:4326    :  0  \n Median :0.8645   Median :0.1195   +proj=long...:  0  \n Mean   :0.7271   Mean   :0.2561                      \n 3rd Qu.:1.0000   3rd Qu.:0.3844                      \n Max.   :1.0000   Max.   :1.0000                      \n\n\nFinally, all the NaNs are removed! Next we plot the distributions of the different metrics.\nHistogram of Functionality of Water points\n\n# pct_functional\n# pct_non-functional\n# pct_tpstand\n# pct_mpump\n# pct_hpump\n# pct_unknown\n# pct_rbpump\n# pct_wptm1000\n# pct_wptl1000\n# pct_rural\n# pct_urban\n\n\np1 <- ggplot(data=nga_wp,\n             aes(x= pct_functional)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"white\")\n\np2 <- ggplot(data=nga_wp,\n             aes(x= `pct_non-functional`)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"white\")\n\np3 <- ggplot(data=nga_wp,\n             aes(x= `pct_unknown`)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"white\")\n\nggarrange(p1,p2,p3,\n          ncol = 2, \n          nrow = 2)\n\n\n\n\nAs we can see, all 3 are right skewed. This means most metrics have more lower percentages than higher percentages. This is more true for Local government areas with non-functioning and unknown functioning proportion fo water points.\nHistogram of Water point Technology\n\np4 <- ggplot(data=nga_wp,\n             aes(x= pct_tpstand)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"grey\")\n\np5 <- ggplot(data=nga_wp,\n             aes(x= pct_mpump)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"grey\")\n\np6 <- ggplot(data=nga_wp,\n             aes(x= pct_hpump)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"grey\")\n\np7 <- ggplot(data=nga_wp,\n             aes(x= pct_unknown)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"grey\")\n\np8 <- ggplot(data=nga_wp,\n             aes(x= pct_rbpump)) +\n  geom_histogram(bins=3,\n                 color=\"black\",\n                 fill=\"grey\")\n\nggarrange(p4,p5,p6,p7,p8,\n          ncol = 2, \n          nrow = 3)\n\n\n\n\nPercentage of tapstand, unknown and rope and bucket pump types are right skewed. Rope and bucket type only has a count of one hence has the following histogram shape.\nHistogram of Waterpoint Usage (High vs Low)\n\np9 <- ggplot(data=nga_wp,\n             aes(x= pct_wptm1000)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"blue\")\n\np10 <- ggplot(data=nga_wp,\n             aes(x= pct_wptl1000)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"blue\")\n\nggarrange(p9,p10)\n\n\n\n\nAs expected, the 2 histograms are inverse of each other as they are the complement of each other.\nHistogram of Waterpoint Rural vs Urban Areas\n\np11 <- ggplot(data=nga_wp,\n             aes(x= pct_rural)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"red\")\n\np12 <- ggplot(data=nga_wp,\n             aes(x= pct_urban)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"red\")\nggarrange(p11,p12)\n\n\n\n\nAs expected, the 2 histograms are inverse of each other as they are the complement of each other.\n\n\n2.2 Choropleth Mapping\nWe can visualise the metrics in a choropleth mapping. We select “jenks” for the classification option. The jenk natural breaks style below classified into intervals by identifying groups of similar values and maximizes the differences.\nFunctionality of Waterpoint Usage\n\ntmap_mode('plot')\n\nfunc.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_functional\",\n          style = \"jenks\",\n          palette = \"YlGn\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Functional water points\\nby LGA level (Jenks classification)\",main.title.size = 0.7,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nnonfunc.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_non-functional\",\n          style = \"jenks\",\n          palette = \"YlGn\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Non-Functional water points\\nby LGA level (Jenks classification)\",\n            main.title.size = 0.7,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\ntmap_arrange(func.map, nonfunc.map,\n             asp=NA, ncol=2)\n\n\n\n\nThere are more functioning water point up north compared to south part of Nigeria. There seems to be some spatial autocorrelation in where the functioning and non-functioning water points are located.\nWater point Technology\n\ntmap_mode('plot')\ntpstand.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_tpstand\",\n          style = \"jenks\",\n          palette = \"Purples\",\n          n=3,\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Tapstand type\\nby LGA (Jenks)\",main.title.size = 0.7,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nmpump.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_mpump\",\n          style = \"jenks\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Mechanised Pump type\\nby LGA (Jenks)\",\n            main.title.size = 0.7,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nhpump.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_hpump\",\n          style = \"jenks\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Hand Pump type\\nby LGA (Jenks)\",\n            main.title.size = 0.7,\n            legend.outside = TRUE)+\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nunknown.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_unknown\",\n          style = \"jenks\",\n          palette = \"Purples\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Unknown type\\nby LGA (Jenks)\",main.title.size = 0.7,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nrbpump.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_rbpump\",\n          style = \"jenks\",\n          palette = \"Purples\",\n          n=2,\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Rope & Bucket type\\nby LGA (Jenks)\",main.title.size = 0.7,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\n\ntmap_arrange(hpump.map, mpump.map,\n             asp=NA, ncol=2)\n\n\n\n\nHandpumps are generally distributed around Nigeria except for the North eastern tip and South western tip with many located in the Northern part. Whereas in North eastern part and South western part there are more mechanized pump type.\n\ntmap_arrange(tpstand.map,unknown.map, rbpump.map,\n             asp=NA, ncol=2)\n\n\n\n\nSouth eastern and western areas of Nigeria has many unknown types of water point. Perhaps more data collection and cleaning effort should be done here. For rope and and bucket pump type, the distribution is as per expected as there is only a count of 1. For tapstand water point, it appears as a cluster near the South western tip. There seems to be spatial autocorrelation.\nUsage Capacity\n\nhigh.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_wptm1000\",\n          style = \"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of High water usage\\nby LGA level (Jenks)\",main.title.size = 0.7,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nlow.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_wptl1000\",\n          style = \"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Low water usage\\nby LGA level (Jenks)\",main.title.size = 0.7,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\ntmap_arrange(high.map, low.map,\n             asp=NA, ncol=2)\n\n\n\n\nThe South Western part of Nigeria seems to have higher water usage capacity compared to other parts of Nigeria. The Northern part of Nigeria seem to have lower water usage capacity.\nWater point in Rural Area vs Non Rural\n\nrural.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_rural\",\n          style = \"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Rural\\nby LGA level (Jenks)\",main.title.size = 0.7,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nurban.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct_urban\",\n          style = \"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Distribution of Urban\\nby LGA level (Jenks)\",main.title.size = 0.7,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\ntmap_arrange(rural.map, urban.map,\n             asp=NA, ncol=2)\n\n\n\n\nFrom above, most of the water points are in rural area.\n\n\n2.3 Correlation Analysis\nFor cluster analysis, the variables cannot be highly correlated. We check if variables are highly correlated using a correlation table.\nFor our cluster analysis, we will only look at the percentage values and non absolute values. Hence we slice the data frame. We will also need to convert the sf dataframe into tibble format in order for the cor() function to work.\n\ncor(as_tibble(nga_wp)[,16:length(nga_wp)])\n\n                   pct_functional pct_non-functional pct_tpstand   pct_mpump\npct_functional        1.000000000        -0.48270425 -0.05708402 -0.11358193\npct_non-functional   -0.482704249         1.00000000 -0.05118631  0.36138355\npct_tpstand          -0.057084018        -0.05118631  1.00000000 -0.07007182\npct_mpump            -0.113581926         0.36138355 -0.07007182  1.00000000\npct_hpump             0.471483730        -0.09399316 -0.03631427 -0.76074385\npct_unknown          -0.463986648        -0.24470399  0.02483472 -0.10902452\npct_rbpump            0.057759161        -0.04213629  0.26679828 -0.03980782\npct_wptm1000         -0.113581926         0.36138355 -0.07007182  1.00000000\npct_wptl1000          0.226937841        -0.25724412  0.07907765 -0.90557046\npct_rural             0.101581068         0.21058043 -0.02718971 -0.15521298\npct_urban             0.004698693        -0.12737248  0.03830851  0.23013682\n                     pct_hpump pct_unknown  pct_rbpump pct_wptm1000\npct_functional      0.47148373 -0.46398665  0.05775916  -0.11358193\npct_non-functional -0.09399316 -0.24470399 -0.04213629   0.36138355\npct_tpstand        -0.03631427  0.02483472  0.26679828  -0.07007182\npct_mpump          -0.76074385 -0.10902452 -0.03980782   1.00000000\npct_hpump           1.00000000 -0.42974182  0.02295350  -0.76074385\npct_unknown        -0.42974182  1.00000000 -0.02096105  -0.10902452\npct_rbpump          0.02295350 -0.02096105  1.00000000  -0.03980782\npct_wptm1000       -0.76074385 -0.10902452 -0.03980782   1.00000000\npct_wptl1000        0.82782919  0.14207537  0.04094963  -0.90557046\npct_rural           0.31989334 -0.11442452 -0.07730901  -0.15521298\npct_urban          -0.25261992  0.15268593  0.08227999   0.23013682\n                   pct_wptl1000   pct_rural    pct_urban\npct_functional       0.22693784  0.10158107  0.004698693\npct_non-functional  -0.25724412  0.21058043 -0.127372478\npct_tpstand          0.07907765 -0.02718971  0.038308506\npct_mpump           -0.90557046 -0.15521298  0.230136821\npct_hpump            0.82782919  0.31989334 -0.252619918\npct_unknown          0.14207537 -0.11442452  0.152685927\npct_rbpump           0.04094963 -0.07730901  0.082279992\npct_wptm1000        -0.90557046 -0.15521298  0.230136821\npct_wptl1000         1.00000000  0.27716436 -0.179131237\npct_rural            0.27716436  1.00000000 -0.920056182\npct_urban           -0.17913124 -0.92005618  1.000000000\n\n\nWe visualise it in a plot for easier viewing.\n\nclustvarcor <- cor(as_tibble(nga_wp)[,16:length(nga_wp)])\ncorrplot.mixed(clustvarcor,\n         lower = \"ellipse\",\n         addCoef.col = 1,\n         number.cex = 0.5,\n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nFor variables that has a correlation efficient of higher than 0.80, we remove them as a cluster variable.\n\nabs(cor(as_tibble(nga_wp)[,16:length(nga_wp)])) > 0.8\n\n                   pct_functional pct_non-functional pct_tpstand pct_mpump\npct_functional               TRUE              FALSE       FALSE     FALSE\npct_non-functional          FALSE               TRUE       FALSE     FALSE\npct_tpstand                 FALSE              FALSE        TRUE     FALSE\npct_mpump                   FALSE              FALSE       FALSE      TRUE\npct_hpump                   FALSE              FALSE       FALSE     FALSE\npct_unknown                 FALSE              FALSE       FALSE     FALSE\npct_rbpump                  FALSE              FALSE       FALSE     FALSE\npct_wptm1000                FALSE              FALSE       FALSE      TRUE\npct_wptl1000                FALSE              FALSE       FALSE      TRUE\npct_rural                   FALSE              FALSE       FALSE     FALSE\npct_urban                   FALSE              FALSE       FALSE     FALSE\n                   pct_hpump pct_unknown pct_rbpump pct_wptm1000 pct_wptl1000\npct_functional         FALSE       FALSE      FALSE        FALSE        FALSE\npct_non-functional     FALSE       FALSE      FALSE        FALSE        FALSE\npct_tpstand            FALSE       FALSE      FALSE        FALSE        FALSE\npct_mpump              FALSE       FALSE      FALSE         TRUE         TRUE\npct_hpump               TRUE       FALSE      FALSE        FALSE         TRUE\npct_unknown            FALSE        TRUE      FALSE        FALSE        FALSE\npct_rbpump             FALSE       FALSE       TRUE        FALSE        FALSE\npct_wptm1000           FALSE       FALSE      FALSE         TRUE         TRUE\npct_wptl1000            TRUE       FALSE      FALSE         TRUE         TRUE\npct_rural              FALSE       FALSE      FALSE        FALSE        FALSE\npct_urban              FALSE       FALSE      FALSE        FALSE        FALSE\n                   pct_rural pct_urban\npct_functional         FALSE     FALSE\npct_non-functional     FALSE     FALSE\npct_tpstand            FALSE     FALSE\npct_mpump              FALSE     FALSE\npct_hpump              FALSE     FALSE\npct_unknown            FALSE     FALSE\npct_rbpump             FALSE     FALSE\npct_wptm1000           FALSE     FALSE\npct_wptl1000           FALSE     FALSE\npct_rural               TRUE      TRUE\npct_urban               TRUE      TRUE\n\n\nWe can see:\n\npct_wptm1000 is highly correlated to pct_mpump and pct_wptl1000\n\npct_wptm1000 and pct_mpump has a coefficient of 1. This means likely only mechanised pump is able to output a capacity more than 1000.\n\npct_wptl1000 is highly correlated to pct_mpump, pct_hpump and pct_wptm1000\npct_rural is highly correlated to pct_urban\n\nFrom above, if we remove pct_wptl1000 and pct_wptm1000, we lose information on usage capacity. If we keep pct_wptm1000, it will be highly correlated to pct_mpump with a correlation coefficient of 1. If we keep pct_wptl1000, it will be highly correlated to pct_mpump, pct_hpump. However it will be better to remove pct_wptm1000 as correlation is too highly.\nIn conclusion, we will remove pct_wptm1000 and pct_urban from our analysis.\n\nclustvar <- colnames(nga_wp[,16:length(nga_wp)])\nclustvar <- clustvar[-c(8, 11, 12)]\nclustvar\n\n[1] \"pct_functional\"     \"pct_non-functional\" \"pct_tpstand\"       \n[4] \"pct_mpump\"          \"pct_hpump\"          \"pct_unknown\"       \n[7] \"pct_rbpump\"         \"pct_wptl1000\"       \"pct_rural\""
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#hierarchy-cluster-analysis",
    "href": "Takehome/Takehome 2/takehome2.html#hierarchy-cluster-analysis",
    "title": "Takehome Exercise 2",
    "section": "3. Hierarchy Cluster Analysis",
    "text": "3. Hierarchy Cluster Analysis\nWe perform a hierarchical clustering without geographical constraint. Clustering will be performed based on the variables without accounting for the observations’ position geographically.\nWe prepare the dataframe and drop the geometry column using st_set_geometry(NULL).\n\nclust_var_df <- nga_wp %>%\n  st_set_geometry(NULL) %>% \n  select(\"shapeName\", clustvar)\n\nhead(clust_var_df)\n\n  shapeName pct_functional pct_non-functional pct_tpstand pct_mpump  pct_hpump\n1 Aba North      0.4117647          0.5294118   0.0000000 0.8235294 0.11764706\n2 Aba South      0.4084507          0.4929577   0.0000000 0.8732394 0.09859155\n3    Abadam      0.0000000          0.0000000   0.0000000 0.0000000 0.00000000\n4     Abaji      0.4035088          0.5964912   0.0000000 0.5964912 0.40350877\n5      Abak      0.4791667          0.5208333   0.0000000 0.9166667 0.08333333\n6 Abakaliki      0.3519313          0.1802575   0.1545064 0.0944206 0.43776824\n  pct_unknown pct_rbpump pct_wptl1000  pct_rural\n1  0.05882353          0   0.17647059 0.00000000\n2  0.02816901          0   0.12676056 0.05633803\n3  0.00000000          0   0.00000000 0.00000000\n4  0.00000000          0   0.40350877 0.84210526\n5  0.00000000          0   0.08333333 0.83333333\n6  0.31330472          0   0.90557940 0.87553648\n\n\nWe will use the shapeName as the index of the dataframe and drop shapeName column using the below code chunk.\n\nrow.names(clust_var_df) <- clust_var_df$\"shapeName\"\nclust_var_df <- clust_var_df[-c(1)]\nhead(clust_var_df,10)\n\n               pct_functional pct_non-functional pct_tpstand pct_mpump\nAba North           0.4117647          0.5294118   0.0000000 0.8235294\nAba South           0.4084507          0.4929577   0.0000000 0.8732394\nAbadam              0.0000000          0.0000000   0.0000000 0.0000000\nAbaji               0.4035088          0.5964912   0.0000000 0.5964912\nAbak                0.4791667          0.5208333   0.0000000 0.9166667\nAbakaliki           0.3519313          0.1802575   0.1545064 0.0944206\nAbeokuta North      0.4705882          0.4411765   0.0000000 0.7647059\nAbeokuta South      0.6050420          0.2773109   0.0000000 0.7058824\nAbi                 0.5197368          0.4078947   0.0000000 0.3289474\nAboh-Mbaise         0.2727273          0.3939394   0.0000000 0.6515152\n                pct_hpump pct_unknown pct_rbpump pct_wptl1000  pct_rural\nAba North      0.11764706  0.05882353          0   0.17647059 0.00000000\nAba South      0.09859155  0.02816901          0   0.12676056 0.05633803\nAbadam         0.00000000  0.00000000          0   0.00000000 0.00000000\nAbaji          0.40350877  0.00000000          0   0.40350877 0.84210526\nAbak           0.08333333  0.00000000          0   0.08333333 0.83333333\nAbakaliki      0.43776824  0.31330472          0   0.90557940 0.87553648\nAbeokuta North 0.14705882  0.08823529          0   0.23529412 0.20588235\nAbeokuta South 0.16806723  0.12605042          0   0.29411765 0.00000000\nAbi            0.59868421  0.07236842          0   0.67105263 0.95394737\nAboh-Mbaise    0.01515152  0.33333333          0   0.34848485 0.72727273\n\n\nNext, we standardise the percentage columns. As seen previously in histogram, many of these columns are skewed. Standardisation can help to make them less skewed. This is important as clustering algorithms are sensitive to skewness of data. We create clust_var_df.z variable.\n\nclust_var_df.z <- scale(clust_var_df)\ndescribe(clust_var_df.z)\n\nclust_var_df.z \n\n 9  Variables      774  Observations\n--------------------------------------------------------------------------------\npct_functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      774         0       619         1 3.214e-16     1.141   -1.5425   -1.2147 \n      .25       .50       .75       .90       .95 \n  -0.7119   -0.1005    0.7083    1.4846    1.7279 \n\nlowest : -2.058859 -1.987641 -1.933688 -1.829379 -1.783483\nhighest:  2.018130  2.031671  2.034561  2.054983  2.071774\n--------------------------------------------------------------------------------\npct_non-functional \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      774         0       618         1 -7.28e-16     1.139  -1.67369  -1.38449 \n      .25       .50       .75       .90       .95 \n -0.70720  -0.04174   0.70553   1.35134   1.75002 \n\nlowest : -1.708296 -1.688966 -1.665457 -1.662129 -1.646541\nhighest:  2.347601  2.367581  2.404301  2.470507  3.046894\n--------------------------------------------------------------------------------\npct_tpstand \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       774          0         57      0.208 -4.036e-16      0.363    -0.1876 \n       .10        .25        .50        .75        .90        .95 \n   -0.1876    -0.1876    -0.1876    -0.1876    -0.1876     0.4998 \n\nlowest : -0.1875803289 -0.0681238734 -0.0355958245 -0.0311904766 -0.0004548987\nhighest:  7.4129664955  8.4451395210  9.9288882452 10.1258460405 10.4613339596\n--------------------------------------------------------------------------------\npct_mpump \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       774          0        632          1 -6.806e-16      1.126    -1.2311 \n       .10        .25        .50        .75        .90        .95 \n   -1.1146    -0.8670    -0.2145     0.6902     1.6241     1.8970 \n\nlowest : -1.284605 -1.266140 -1.265972 -1.253843 -1.253728\nhighest:  2.074185  2.085707  2.089359  2.106728  2.137558\n--------------------------------------------------------------------------------\npct_hpump \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      774         0       619     0.999 1.783e-15     1.151  -1.49121  -1.43909 \n      .25       .50       .75       .90       .95 \n -0.98007   0.06924   0.88910   1.33976   1.44345 \n\nlowest : -1.491211 -1.463640 -1.462064 -1.451465 -1.450405\nhighest:  1.538273  1.541677  1.552523  1.552673  1.569186\n--------------------------------------------------------------------------------\npct_unknown \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      774         0       385     0.911 1.291e-17    0.9258   -0.6301   -0.6301 \n      .25       .50       .75       .90       .95 \n  -0.6301   -0.5752    0.3670    1.4657    2.2355 \n\nlowest : -0.6301490 -0.6191449 -0.6174676 -0.6151051 -0.6136346\nhighest:  4.0764365  4.0982262  4.1952897  4.3616841  4.8608674\n--------------------------------------------------------------------------------\npct_rbpump \n        n   missing  distinct      Info      Mean       Gmd \n      774         0         2     0.004 2.889e-16   0.07189 \n                                  \nValue      -0.03594426 27.78491123\nFrequency          773           1\nProportion       0.999       0.001\n--------------------------------------------------------------------------------\npct_wptl1000 \n        n   missing  distinct      Info      Mean       Gmd       .05       .10 \n      774         0       632         1 1.487e-16     1.127   -1.9260   -1.6277 \n      .25       .50       .75       .90       .95 \n  -0.7061    0.2089    0.8892    1.1216    1.2093 \n\nlowest : -2.034040 -2.003892 -1.986908 -1.983337 -1.972070\nhighest:  1.282184  1.282297  1.294157  1.294321  1.312377\n--------------------------------------------------------------------------------\npct_rural \n         n    missing   distinct       Info       Mean        Gmd        .05 \n       774          0        447      0.976 -2.381e-16      1.043    -2.2280 \n       .10        .25        .50        .75        .90        .95 \n   -1.8822    -0.4730     0.4211     0.8363     0.8363     0.8363 \n\nlowest : -2.2279624 -2.2025325 -2.1993241 -2.1963717 -2.1854027\nhighest:  0.8147612  0.8171289  0.8178811  0.8245095  0.8363408\n--------------------------------------------------------------------------------\n\n\n\nclustdf <- as.data.frame(clust_var_df.z)\n\na1 <- ggplot(data=clustdf,\n             aes(x= `pct_functional`)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"white\")\n\na2 <- ggplot(data=clustdf,\n             aes(x= `pct_non-functional`)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"white\")\n\na3 <- ggplot(data=clustdf,\n             aes(x= `pct_unknown`)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"white\")\n\nggarrange(a1,a2,a3,\n          ncol = 2, \n          nrow = 2)\n\n\n\n\n\na4 <- ggplot(data=clustdf,\n             aes(x= pct_tpstand)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"grey\")\n\na5 <- ggplot(data=clustdf,\n             aes(x= pct_mpump)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"grey\")\n\na6 <- ggplot(data=clustdf,\n             aes(x= pct_hpump)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"grey\")\n\na7 <- ggplot(data=clustdf,\n             aes(x= pct_hpump)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"grey\")\n\na8 <- ggplot(data=clustdf,\n             aes(x= pct_rbpump)) +\n  geom_histogram(bins=3,\n                 color=\"black\",\n                 fill=\"grey\")\n\nggarrange(a4,a5,a6,a7,a8,\n          ncol = 2, \n          nrow = 3)\n\n\n\n\n\na10 <- ggplot(data=clustdf,\n             aes(x= pct_wptl1000)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"blue\")\n\nggarrange(p10,a10)\n\n\n\n\n\na11 <- ggplot(data=clustdf,\n             aes(x= pct_rural)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"red\")\n\nggarrange(p11,a11)\n\n\n\n\nAll the data is less skewed after standardization.\n\n3.1 Computing Proximity Matrix\nNext we compute the proximity matrix using the euclidean distance method. This is a matrix that stores the distance between the data attributes in space. It is multi-dimension and measures similarity or dissimilarities.\n\nproxmat <- dist(clust_var_df.z, method = 'euclidean')\n\n\n\n3.2 Performing the Clustering\nThey are several clustering method to calculate the linkage which is the pairwise dissimilarity between local government areas attributes. To determine the best method, we can try them out using the map_dbl() function and a vector with the names of the vector defined.\n\nmthd <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(mthd) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\ntryfunc <- function(x) {\n  agnes(clust_var_df.z, method = x)$ac\n}\n\nmap_dbl(mthd, tryfunc)\n\n  average    single  complete      ward \n0.9819422 0.9832072 0.9819055 0.9896034 \n\n\nSince ward D has the highest agglomerative coefficient, it suggests there is strongest clustering structure. We complete the analysis using the ward D method. Ward D minimises the total within-cluster variance and combines with another cluster with the least between-cluster distance at each step in an agglomerative bottom up manner until all nodes are one big single cluster.\nTo perform the hierachical clustering, we use the hclust(), input the proximity matrix and define to use Ward D hierachical clustering.\n\nhc_wd <- hclust(proxmat, method = 'ward.D')\n\nWe will visualise the cluster using the dendrogram after determining optimal number of clusters.\n\n\n3.3 Determining the optimal number of clusters\nWhile hiercachical clustering can help to perform the cluster, it does not select the optimal number of clusters. We can use the gap statistics to determine optimal number of clusters. The optimal number of cluster is the number that maximizes the gap statistics. The greatest gap statistics will create a clustering structure that is furthest as compared to uniform random distribution of points. We set.seed(1) so that the analysis can be repeatable. We also limit k to 10 such that it will not create too many clusters. We set B=50 such that 50 Monte Carlo bootstraps sample are run. This is the best trade off between efficiency and performance.\n\nset.seed(1)\n\ngap_stat <- clusGap(clust_var_df.z, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n\nprint(gap_stat)\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = clust_var_df.z, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstSEmax', SE.factor=1): 2\n          logW   E.logW      gap      SE.sim\n [1,] 6.571709 7.945149 1.373440 0.009068259\n [2,] 6.404602 7.799240 1.394637 0.010683196\n [3,] 6.381232 7.731649 1.350417 0.010331229\n [4,] 6.283786 7.673126 1.389341 0.010829094\n [5,] 6.213170 7.633438 1.420268 0.010706411\n [6,] 6.162280 7.599305 1.437026 0.009771909\n [7,] 6.064064 7.569076 1.505012 0.009360635\n [8,] 6.013346 7.542039 1.528694 0.009437631\n [9,] 5.970321 7.517707 1.547386 0.009244255\n[10,] 5.929072 7.495600 1.566528 0.008783855\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nIdeally, we should be choosing the number of clusters with the highest gap statistics. However in this scenario, the gap statistics keeps increasing, even past 10. This will mean there could be 20 or even 30 optimal clusters. This might be too fragmented.\nAs such, I will apply the Tibshirani 1-standard-error method which suggest to choose the optimal number of cluster where the rate of change of gap statistics start to slow down.\n\n\n\n\n\nIn this case, it will be 2 optimal clusters. However, 2 is too few. I will select the next best, which is 5 clusters. We define 5 clusters and plot a dendrogram to represent the clusters.\n\nplot(hc_wd, cex = 0.1)\nrect.hclust(hc_wd, \n            k = 5, \n            border = 2:6)\n\n\n\n\nFrom above, there are too many towns. As such it is difficult to view the towns using the dendrogram. We draw 5 rectangular boxes to indicate the 5 clusters using rect.hclust(). In a dendrogram, the 2 nodes that combines through a edge means there are the most similar. The height of the edge between 2 nodes also represents the similarities of the clusters.\nWe will build an interactive map below to help visualize and analyse the clusters\n\n\n3.4 Hierarchical Clustering Analysis\n\nclust_var_df_mat <- data.matrix(clust_var_df)\n\nheatmaply(normalize(clust_var_df_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,100,50,NA),\n          fontsize_row = 4,\n          fontsize_col = 3,\n          main=\"Segmentation of Nigeria by\\nWater Point Characteristics\",\n          cellnote_size = 6,\n          xlab = \"Water Point Characteristics\",\n          ylab = \"Nigeria Towns\"\n          )\n\n\n\n\n\nPurple Cluster:\nPurple cluster contain areas that generally have low to moderate percentage of water points in rural areas. It has relatively lower usage capacity. There are no rope and bucket pumps, high proportion of hand pumps, low proportion of mechanized pumps, no tap stand and the water points in this area highly functional.\nBlue Cluster:\nBlue cluster contain areas that generally have high percentage of water points in rural areas. There is a mix between high and low water usage capacity. There are high proportion of unknown pump types, slightly higher proportion , low proportion of mechanized pumps, no tapstand and the water points in this area are evenly split between functional and non functional.\nGreen Cluster:\nGreen cluster is the largest cluster. It contains areas that generally have high percentage of water points in rural areas. Majority of water points in these areas have low water usage capacity. There are high proportion of hand pump types, lower proportion of mechanized pumps. The only few tapstands in Nigeria belong in this area and the water points in this area are evenly split between functional and non functional.\nBrown Cluster:\nBrown cluster is the second largest cluster. It contains areas with a mix between high and low percentage of water points in rural areas. Majority of water points in these areas have low water usage capacity. There are high proportion of mechincal pump types, lower proportion of hand pumps. The only few tapstands in Nigeria belong in this area and the water points in this area have more non-functional than functional.\nPink Cluster:\nPink cluster contains areas with high percentage of water points in urban areas. Majority of water points in these areas have low water usage capacity. These areas mainly contain mechanised water pumps and are functional.\n\n\n3.5 Visualising clusters on choropleth map\nWe can also view it on a map. We save the cluster group information to nga_wp sf data table using cbind() and use qtm() to generate the map.\n\ngroups <- as.factor(cutree(hc_wd, k=5))\n\n\nnga_wp_hclust <- cbind(nga_wp, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(nga_wp_hclust, \"CLUSTER\") +\n  tm_layout(main.title = \"Nigeria Segementation by Water Pump charcteristics\\n (Hierachical Clustering)\",main.title.size = 1,legend.outside = TRUE)\n\n\n\n\nFrom above observation, the clusters are fragmented. For example, cluster 4 (red) appears in the south Nigeria but also in west Nigeria. However can we really ignore geographical impact on clustering?\nAs seen earlier there seems to be spatial autocorrelation. If there is, we can introduce spatial constraint into our clustering. We can determine if there is spatial autocorrelation statically using our Moran I.\n\n\n3.6 Test for Global Spatial Autocorrelation with Moran I\nSince distance based matrix is needed, we need to convert the Geographic Coordinate System of nga_wp to a Projected Cordinate System. We choose crs = 26391 which is Minna/ Nigeria West Belt.\n\nnga_wp_p <- st_transform(nga_wp, crs = 26391)\nst_geometry(nga_wp_p)\n\nGeometry set for 774 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28879.72 ymin: 30292.37 xmax: 1343798 ymax: 1094244\nProjected CRS: Minna / Nigeria West Belt\nFirst 5 geometries:\n\n\nAs seen from above, it now has a Projected CRS with Minna/ Nigeria West Belt.\nWe also need to compute the coordinates, which are the centroids of each polygon. We can do so using st_centroid() and combining them by column using cbind() to form a pair of coordinates.\n\nlongitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\nWe also need to create a neighbour list. We perform a adaptive distance approach using K Nearest Neighbour to creare the neighbour list using knn2nb(). After that, we compute the spatial weights using nb2listw() and run Global Moran I test using moran.test().\nWe perform attribute by attribute. We start with checking if there is spatial correlation in the proportion of mechanized pumps.\n\nset.seed(1)\nnga_wp_p_sp <- as_Spatial(nga_wp_p)\n\n#KNN based weight matrix, select 6 neighbours\nknn6 <- knn2nb(knearneigh(coords, k=6))\n\n#Spatial weights\nknn_lw <- nb2listw(knn6, style = 'W')\n\n#Moran test \nmoran.test(nga_wp_p_sp$wpt_m_pump, knn_lw)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp_p_sp$wpt_m_pump  \nweights: knn_lw    \n\nMoran I statistic standard deviate = 15.634, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.3029132355     -0.0012936611      0.0003786196 \n\n\nLooking at percentage of mechanical pump, there is spatial autocorrelation since the p value < 0.05. We can reject null hypothesis that the distribution of proportion of mechnaised pump is not random. We can perform another global Moran I test. This time it is on water usage capacity.\n\n#Moran test \nmoran.test(nga_wp_p_sp$wtp_l1000, knn_lw)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp_p_sp$wtp_l1000  \nweights: knn_lw    \n\nMoran I statistic standard deviate = 28.426, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.5522158074     -0.0012936611      0.0003791576 \n\n\nGlobal Moran test shows the same result where P value < 0.05 for areas with lower water usage capacity. We can reject the null hypothesis that the\nBased on our result, we can conclude there is spatial autocorrelation. This means we cannot do a clustering analysis without accounting for the geographical impact. Thus we take our clustering analysis further with Spatially Constrained Hierarchical Clustering."
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#spatially-constrained-cluster-analysis",
    "href": "Takehome/Takehome 2/takehome2.html#spatially-constrained-cluster-analysis",
    "title": "Takehome Exercise 2",
    "section": "4. Spatially Constrained Cluster Analysis",
    "text": "4. Spatially Constrained Cluster Analysis\nWe can use the SKATER method to perform spatially constrained clustering. SKATER is known as Spatial ’K’luster Analysis by Tree Edge Removal. The SKATER method uses the Tree Edge Removal Assuncao algorithm.\n\nStep 1: It constructs a minimum spanning tree from adjacency graph. A minimum spanning tree is a tree that connects all nodes together with the least possible edge weight.\n\nAt each step each node will look for the shortest path/ least weighted path to connect to the next node. Iteration ends when all the nodes are connected.\nStep 2: Next it prunes the tree edges to maximize internal homogeneity.\n\n\nThe algorithm will find the largest edge weight and prune the tree. Thus clusters are formed. Clusters formed will maximize homogeneity while also maximizing heterogeneity with other clusters.\nWe use can use skater() to derive spatially constrained cluster. We will be using the neighbour list created above. Neighbour list created using K Nearest Method is preferred because it ensures every polygon will have a neighbor.\n\nknn6\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4644 \nPercentage nonzero weights: 0.7751938 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nWe can visualize the neighbor list with the below code chunk.\n\nplot(nga_wp_p_sp, border=grey(.7))\n\nplot(knn6, \n     coordinates(nga_wp_p_sp), \n     col=\"Red\",\n     pch = 19,\n     cex = 0.3,\n     add=TRUE)\n\n\n\n\n\n4.1 Calculating Edge Cost\nThe SKATER method requires edge to edge cost. We compute the edge to edge cost using nbcosts(). We use the cost as weights of the matrix and ensure cost values are not row standardised.\n\nedge_cost <- nbcosts(knn6, clust_var_df)\nknn6nb <- nb2listw(knn6, edge_cost, style=\"B\")\nsummary(knn6nb)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4644 \nPercentage nonzero weights: 0.7751938 \nAverage number of links: 6 \nNon-symmetric neighbours list\nLink number distribution:\n\n  6 \n774 \n774 least connected regions:\nwith 6 links\n774 most connected regions:\nwith 6 links\n\nWeights style: B \nWeights constants summary:\n    n     nn       S0       S1       S2\nB 774 599076 2650.475 3790.096 44640.92\n\n\n\n\n4.2 Building Minimum Spanning Tree\nNext we can start building the minimum spanning tree. We build a minimum spanning tree using the mstree() function.\n\nknntree <- mstree(knn6nb)\n \nplot(nga_wp_p_sp, border=grey(.7))\n\nplot(knntree, \n     coordinates(nga_wp_p_sp), \n     col=\"Red\",\n     pch = 19,\n     cex.circles = 0.3,\n     cex.lab = 0.3,\n     add=TRUE)\n\n\n\n\nA minimum spanning tree is created connecting all the nodes together as seen above.\n\n\n4.3 Performing SKATER\nWe use the skater() method and define the edges using the knntree minimum spanning tree variable created above. We use n = 4 cuts as 4 here means there will be a total of 5 cuts.\n\nclust5 <- skater(edges = knntree[,1:2], \n                 data = clust_var_df, \n                 method = \"euclidean\", \n                 ncuts = 4)\n\ntable(clust5$groups)\n\n\n  1   2   3   4   5 \n422 168 120  40  24 \n\n\nThere are 422 LGAs in segment 1, 168 in segment 2, 120 in segment 3, 40 in segment 4 and 24 in segment 5.\nWe can visualise it in the below map.\n\nplot(nga_wp_p_sp, border=grey(.7))\nplot(clust5, \n     coordinates(nga_wp_p_sp), \n     pch = 19,\n     cex.circles = 0.4,\n     cex.lab = 0.2,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"pink\",\"purple\"),\n     add=TRUE)\n\n\n\n\n\n\n4.4 Building choropleth map\nFor more clarity, we can view the SKATER cluster in a choropleth map.\n\nclust5mat <- as.matrix(clust5$groups)\n\nnga_wp_cluster <- cbind(nga_wp, as.factor(clust5mat)) %>%\n  rename(`skater_clust`=`as.factor.clust5mat.`)\n\n\nskater_clus_map <- tm_shape(nga_wp_cluster) + \n  tm_fill(col = \"skater_clust\",\n          palette = \"Spectral\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Nigeria Segementation by Water Pump\\ncharcteristics (SKATER)\",main.title.size = 1,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\n\nskater_clus_map\n\n\n\n\nWith geographical constrain considered in the clustering, the segmentation are no longer fragmented. We can see areas near each other are cluster together.\n\nh_clus_map <- tm_shape(nga_wp_hclust) + \n  tm_fill(col = \"CLUSTER\",\n          palette = \"RdYlGn\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Nigeria Segementation by Water Pump\\ncharcteristics (Hierarchical)\",main.title.size = 1,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\ntmap_arrange(skater_clus_map, h_clus_map)\n\n\n\n\nWe put them side by side for easier comparison.\n\n\n4.5 Tuning Impact of Geographical Constraint\nAs we can see geographical constrain has an impact on the clustering but the impact of geographical constraint might be too strong. We can tune the impact of the geographical constraint, or optimize it. To do this we will need to use the clustgeo library as the choicealpha() function comes from there.\n\nnongeo_cluster <- hclustgeo(proxmat)\ngroups <- as.factor(cutree(nongeo_cluster, k=5))\n\nWe create a distance matrix and put everything into choicealpa(). Choice alpha allows user to select the impact of spatial constraint when performing clustering. A choice alpha of 0 means we do not consider any spatial impact. If 1, it means we maxmise the impact of spatial constraint.\n\ndist <- st_distance(nga_wp_p, nga_wp_p)\ndistmat <- as.dist(dist)\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=5, graph = TRUE)\n\n\n\n\n\n\n\nD0: Impact of clustering variable\nD1: Impact of spatial constraint\nFrom above we want to balance the impact of clustering variable and spatial constraint. Hence we will choose alpha of 0.12.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.12)\ngroups <- as.factor(cutree(clustG, k=5))\n\nnga_wp_p_Gcluster <- cbind(nga_wp_p, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nskater_a_map <- tm_shape(nga_wp_p_Gcluster) + \n  tm_fill(col = \"CLUSTER\",\n          palette = \"PRGn\",\n          legend.hist = TRUE) +\n  tm_layout(main.title = \"Nigeria Segementation by Water Pump\\ncharcteristics (SKATER with alpha)\",main.title.size = 1,legend.outside = TRUE) +\n  tm_borders(lwd = 0.5,  alpha = 1, col = \"black\")\n\nskater_a_map\n\n\n\n\nFrom above, we can see the spatial impact on clustering has been reduced. Some of the clusters are no longer as homogeneous as before. it now contains another segment. For example in Southern tip, we can see some of the purple segment contains some spill over from the white segment.\nWe put SKATER clustering along with SKATER clustering with alpha.\n\ntmap_arrange(skater_clus_map, skater_a_map)\n\n\n\n\nWe put hierarchical clustering along with SKATER clustering with alpha.\n\ntmap_arrange(h_clus_map, skater_a_map)"
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#cluster-analysis-and-conclusion",
    "href": "Takehome/Takehome 2/takehome2.html#cluster-analysis-and-conclusion",
    "title": "Takehome Exercise 2",
    "section": "5. Cluster Analysis and Conclusion",
    "text": "5. Cluster Analysis and Conclusion\nWe look at the clustering performed by SKATER with alpha using parallel cordinates\n\nnga_wp_p_Gcluster %>%\n  filter(`CLUSTER` %in% c(1,2,3)) %>%\n  ggparcoord(., \n           columns = c(15,18, 19,23,24), \n           scale = \"globalminmax\",\n           alphaLines = 0.1,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots by Cluster 1,2,3\")+\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\nnga_wp_p_Gcluster %>%\n  filter(`CLUSTER` %in% c(4,5)) %>%\n  ggparcoord(., \n           columns = c(15,18,19,23,24), \n           scale = \"globalminmax\",\n           alphaLines = 0.1,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots by Cluster 4 and 5\")+\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\nskater_a_map\n\n\n\n\nCluster 1 (Dark purple): Areas in cluster 1 have high percentage of mechanical pumps and the water usage capacity is higher that other clusters. It is also located in rural areas and lower proportion of working pumps.\nCluster 2 (Light purple): Areas in cluster 2 have low percentage of mechanical pumps but high percentage of hand pumps. Water usage capacity is lower than other segments. It is also located in rural areas and moderate proportion of working pumps. Many towns lie in this cluster.\nCluster 3 (White): Areas in cluster 3 have moderate percentage of mechanical pumps, low to moderate hand pumps, relatively lower water usage capacity and a mix of water points in rural and non rural areas.\nCluster 4 (Light green): Areas in cluster 4 have low percentage of mechanical pumps, high proportions of hand pumps, low water usage capacity and are located mainly in rural areas. Thankfully the pumps are functional. Many of the points lie in this cluster.\nCluster 5 (Green): Areas in cluster 5 have low percentage of mechanical pumps, high proportions of hand pumps, low water usage capacity and are located mainly in urban areas. Proportion of this working pumps are also high."
  },
  {
    "objectID": "Takehome/Takehome 2/takehome2.html#conclusion",
    "href": "Takehome/Takehome 2/takehome2.html#conclusion",
    "title": "Takehome Exercise 2",
    "section": "Conclusion:",
    "text": "Conclusion:\n\ntable(nga_wp_p_Gcluster$CLUSTER)\n\n\n  1   2   3   4   5 \n165 141 240 227   1 \n\n\nIn clustering data, it is perfectly fine clustering without considering spatial effect as it is our choice. However rarely that spatial data have attributes that are constant in space. Hence clustering while considering spatial impact is a better clustering technique than without.\nDepending on which columns you drop due to multicollinearity issue, we might get a different clustering result. Additionanlly, although we chose 5 clusters, the clustering results seem to be more suited to 4 clusters as cluster 5 only has 1 member. Cluster 5 might be an outlier\nFuture work:\n\nTry dropping different combinations of correlated columns and choose the best cluster result\nTry increasing number of clusters such that there is global maximum of gap statistics\nCluster based on 4 classes\nExplore optimal number of classes to optimse\nTry other linkage methods to build proximity matrix and see if clustering performance improves."
  }
]