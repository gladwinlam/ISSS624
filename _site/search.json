[
  {
    "objectID": "Inclass-ex1/inclass-ex1.html",
    "href": "Inclass-ex1/inclass-ex1.html",
    "title": "Inclass Excercise 1",
    "section": "",
    "text": "In this section. I will showcase how to compute spatial weights and how to apply spatial weights in a real world context.\nIn this tutorial, we will be using these packages: sf, readr, dplyr, spdep\n\n\nThe code chunk below will install and load the sf, readr, dplyr and spdep packages\n\npacman::p_load(sf,tidyverse, spdep, tmap)\n\nNext, we will read in the data for this exercise.\nThe data type of this file is in shapefile format. We will use the st_read() function of the sf package to import the file. Output will be a simple features object.\n\nhunan <- st_read(dsn = \"data/geospatial\",\n                layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Inclass-ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\nFor the other file, it is in csv format. We can use read_csv() from readr package to import the file.\n\nhunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(hunan2012, 7)\n\n# A tibble: 7 × 29\n  County City  avg_w…¹ depos…²    FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO   Loan\n  <chr>  <chr>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <dbl>  <dbl>  <dbl>\n1 Anhua  Yiya…   30544  10967   6832.    457.   2703  13225  14567  9277.  3955.\n2 Anren  Chen…   28058   4599.  6386.    221.   1455.  4941. 12761  4189.  2555.\n3 Anxia… Chan…   31935   5517.  3541     244.   1780. 12482  23667  5109.  2807.\n4 Baoji… Huna…   30843   2250   1005.    193.   1379.  4088. 14563  3624.  1254.\n5 Chali… Zhuz…   31251   8241.  6508.    620.   1947  11585  20078  9158.  4287.\n6 Chang… Heng…   28518  10860   7920     770.   2632. 19886  24418 37392   4243.\n7 Chang… Chan…   54540  24332  33624    5350    7886. 88009  88656 51361  40534 \n# … with 18 more variables: NIPCR <dbl>, Bed <dbl>, Emp <dbl>, EmpR <dbl>,\n#   EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>, Household <dbl>,\n#   Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>, Pop_T <dbl>,\n#   Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>, ROREmp <dbl>, and\n#   abbreviated variable names ¹​avg_wage, ²​deposite\n\n\n\n\n\nWe will join the SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. They are joined by row level.\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\"\n\nhead(hunan, 5)\n\nSimple feature collection with 5 features and 35 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 111.2145 ymin: 28.61762 xmax: 112.3013 ymax: 29.95847\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n\n\n\n\n\nIn this section, we will be creating a base map and a coloured map known as choropleth map.\nA choropleth map is a thematic map that uses the gradient of a colour to indicate the variation of a variable across the geographical locations.\nWe will use qtm( ) function of tmap function to visualize the GDP per capital pattern across the geographical location of Hunan!\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size = 0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ngdppc\n\n\n\n\nIf we want to display basemap and choropleth map together, we can use tmap_arange() function.\n\ntmap_arrange(basemap, gdppc, asp = 1, ncol = 2) # one row, 2 columns\n\n\n\n\n\n\n\nContiguity means 2 spatial units share a common border. There are several ways accounting the sharing of border.\n\n\nOne is rook’s method and another queen’s method. Either which, it will express the structure in a matrix W.\n\n\n\n\n\nwij refers to the neighbouring effect between spatial unit i and spatial unit j. wii will be zero as there is no effect with itself. Wij is a binary element. However usually in practice we do row standardisation and it is computed by wij/sum of wij across row j.\nWe will use poly2nb() from spdep package to compute the contiguity weight matrix. We can make use of the “queen” argument to decide if we want to account for neighbour effect using queen. By default it is True.\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q) # checking neighbouring effect\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nHow do we interpret the results above?\nThere are 88 spatial units in Hunan. The most connected spatial unit (85) has 11 neighbors. There are two spatial units (30 & 65) with only one neighbors.\nWe can also check the neighbors of a specified spatial units\n\nwm_q[[1]]   #It is connected with spatial unit 2, 3, 4, 57, 85\n\n[1]  2  3  4 57 85\n\n\nTo extract county name\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo extract multiple names, we can define a vector\n\n#Neighbors of 1\nhunan$NAME_3[c(2, 3, 4, 57, 85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nTo find the GDP per capital of these neighbors of 1 using queen’s contiguity method\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nIf we want to view entire spatial weight matrix, W, we can use str() function\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nWe compute the contiguity weight matrix using the Rook’s method.\n\nwm_r <- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\n\nWe can connect a spatial unit to its neighbour using lines. To do so we will need to compute centroids of each spatial unit and connect to its neighbors using the centroids.\nCentroids can be calculated using st_centroid() function. We will use a map function to map each element of human$geometry through st_centroid() function.\n\n#[1] is longitude\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\n#[2] is latitude\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nWe bind the longitude and latitude together\n\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nWe can control the size of dot using cex and marker design using pch.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\nWe use par() function to control the subplots. Left is queen, right is rook’s.\nmfrow: determines a vector with row and column values for the grid.\n\npar(mfrow = c(1,2)) # 1row, 2 columns\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")\n\n\n\n\n\n\n\n\nAnother way of representing neighbours can be done computing distanced based weight matrices. Only neighbours that fall within a defined range of Euclidean distance will be accounted for.\nFirst, we find the k nearest neighbors of the coordinates. We can use k parameter to set how many neighbours we want to look at.\n\nknearneigh(coords, k=10)\n\n$nn\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    3   57   64    5    4    2   58   85   78    68\n [2,]   78   58   57    1   85    3    5   68    8    64\n [3,]    1    5    4   57    2   85   64   58    6    69\n [4,]    5    3    1    6   85   69   57    2   64    58\n [5,]    4    3    1   85    6   69    2   57   64    58\n [6,]   69    5    4   75    3   85    1   32   55     2\n [7,]   67   84   71   66   74    9   68   86   73    76\n [8,]   46   47   78    9   86   80   35   68    2    84\n [9,]   84   68   46    8   66   86   78   47   58    74\n[10,]   70   16   22   72   73   19   17   20   11    21\n[11,]   72   17   14   16   10   70   22   83   15    73\n[12,]   63   13   60   83   61   15   18   62   87    59\n[13,]   12   60   15   83   63   61   59   87   62    18\n[14,]   17   11   15   16   72   83   10   13   22    70\n[15,]   13   83   12   60   14   17   63   16   61    22\n[16,]   22   17   10   83   72   11   70   20   18    14\n[17,]   16   14   11   72   10   83   22   15   70    13\n[18,]   20   22   63   83   23   77   82   12   16    61\n[19,]   21   73   20   74   10   82   86   22   70    71\n[20,]   82   22   18   19   21   23   10   16   35    41\n[21,]   19   82   86   20   74   35   47   46   73    71\n[22,]   16   20   10   18   83   19   17   70   82    63\n[23,]   41   77   82   18   79   20   35   38   45    21\n[24,]   54   31   25   28   52   81   50   32   49    33\n[25,]   81   24   28   33   31   54   39   26   49    42\n[26,]   81   27   42   33   25   29   30   37   39    28\n[27,]   29   26   42   37   30   81   33   25   39    43\n[28,]   49   33   25   54   52   24   81   51   30    50\n[29,]   27   37   42   26   81   43   30   33   44    39\n[30,]   33   26   28   27   49   81   25   42   29    51\n[31,]   24   40   36   25   54   39   32   81   34    56\n[32,]   50   54   31   24   55   56   75   52   69    85\n[33,]   28   30   81   25   26   49   24   27   54    42\n[34,]   45   36   80   41   56   40   79   35   31    47\n[35,]   47   82   41   80   21   46   86    8   23    45\n[36,]   34   56   45   40   31   80   79   41   32    24\n[37,]   42   29   43   44   27   26   39   81   38    40\n[38,]   44   77   79   43   62   23   41   40   45    39\n[39,]   43   40   81   42   44   25   31   79   26    37\n[40,]   39   79   45   31   36   43   34   44   41    24\n[41,]   23   35   45   79   80   82   34   47   77    38\n[42,]   37   26   81   43   39   27   29   44   25    33\n[43,]   44   39   42   40   37   79   38   81   26    45\n[44,]   43   38   79   37   39   42   40   77   62    45\n[45,]   34   79   41   80   36   40   35   23   56    31\n[46,]   47    8   86    9   35   78   21   74   80    84\n[47,]   46   35    8   86   80   21   82    9   78    41\n[48,]   51   52   50   55   53   49   54   28   75    32\n[49,]   28   52   51   54   33   48   25   24   50    30\n[50,]   52   55   54   48   51   32   24   49   53    75\n[51,]   48   52   49   50   54   28   55   53   24    33\n[52,]   54   51   50   49   48   28   24   55   25    32\n[53,]   55   48   50   51   75   52   54   49   32    69\n[54,]   52   24   50   28   49   51   25   48   32    31\n[55,]   50   75   53   48   52   32   51   54   69    49\n[56,]   36   34   85   80   78   32   45   31    2     8\n[57,]   58   64    1    2    3   68   76   78   66     5\n[58,]   57   68   64    2   66   78    1   76    9     3\n[59,]   87   88   60   61   13   12   62   63   15    83\n[60,]   13   12   61   59   63   87   15   62   83    88\n[61,]   63   62   60   87   12   13   59   77   83    18\n[62,]   61   87   77   63   38   12   60   18   88    23\n[63,]   12   61   18   62   83   60   13   77   87    22\n[64,]   57    1   58   76    3   68   66   65    2     4\n[65,]   76   67   66   64   68   58   57   84    7     1\n[66,]   68   76   84   58    9   67   65   57    7    64\n[67,]    7   66   84   76   65   68    9   71   58    74\n[68,]   66   58    9   84   57   78   76    8    2    64\n[69,]    6   75   85    5    4   32    3   55   56    50\n[70,]   10   73   72   19   16   22   11   71   17    74\n[71,]   74   73    7   86   84   19   21   70    9    46\n[72,]   11   70   10   17   16   14   73   22   19    83\n[73,]   70   19   71   74   10   21   86   72   20    22\n[74,]   71   86   21   19   73   84   46    9   47     7\n[75,]   55   69   53    6   50   32   48   52   85    54\n[76,]   65   66   64   68   58   67   57   84    9     1\n[77,]   38   62   23   63   18   61   79   41   44    87\n[78,]    2    8   58   68    9   46   47   57   80    56\n[79,]   45   40   41   38   44   43   23   34   39    77\n[80,]   34   35   45   47   41   36    8   56   46    78\n[81,]   25   26   33   39   42   28   24   43   31    27\n[82,]   21   20   35   23   41   19   47   18   86    22\n[83,]   12   13   63   16   15   22   18   17   60    61\n[84,]    9   66    7   68   74   71   67   86   46     8\n[85,]    5    2   56    3   69    4    1   78   32     6\n[86,]   74   46   21   47    9    8   19   35   71    84\n[87,]   61   62   88   59   60   63   12   77   13    38\n[88,]   87   59   62   61   60   63   12   77   38    13\n\n$np\n[1] 88\n\n$k\n[1] 10\n\n$dimension\n[1] 2\n\n$x\n      longitude latitude\n [1,]  112.1531 29.44362\n [2,]  112.0372 28.86489\n [3,]  111.8917 29.47107\n [4,]  111.7031 29.74499\n [5,]  111.6138 29.49258\n [6,]  111.0341 29.79863\n [7,]  113.7065 28.23215\n [8,]  112.3460 28.13081\n [9,]  112.8169 28.28918\n[10,]  113.3534 26.57906\n[11,]  113.8942 25.98122\n[12,]  112.4006 25.63215\n[13,]  112.5542 25.33880\n[14,]  113.6636 25.54967\n[15,]  112.9206 25.26722\n[16,]  113.1883 26.21248\n[17,]  113.4521 25.93480\n[18,]  112.4209 26.36132\n[19,]  113.0152 27.08120\n[20,]  112.6350 26.75969\n[21,]  112.7087 27.27930\n[22,]  112.9095 26.42079\n[23,]  111.9522 26.80117\n[24,]  110.2606 27.89384\n[25,]  110.0921 27.54115\n[26,]  109.7985 26.91321\n[27,]  109.5765 26.54507\n[28,]  109.7211 27.78801\n[29,]  109.7339 26.21157\n[30,]  109.1537 27.22941\n[31,]  110.6442 27.83407\n[32,]  110.5916 28.57282\n[33,]  109.5984 27.39828\n[34,]  111.4783 27.67997\n[35,]  112.1745 27.46256\n[36,]  111.2315 27.86930\n[37,]  110.3149 26.32113\n[38,]  111.3248 26.48991\n[39,]  110.5859 27.10164\n[40,]  110.9593 27.34884\n[41,]  111.8296 27.18765\n[42,]  110.1926 26.70972\n[43,]  110.7334 26.78494\n[44,]  110.9123 26.54354\n[45,]  111.4599 27.42910\n[46,]  112.5268 27.92456\n[47,]  112.3406 27.77407\n[48,]  109.5602 28.66808\n[49,]  109.5071 28.01142\n[50,]  109.9954 28.60033\n[51,]  109.4273 28.42749\n[52,]  109.7587 28.31518\n[53,]  109.5044 29.21940\n[54,]  109.9899 28.16053\n[55,]  109.9664 29.01206\n[56,]  111.3785 28.28449\n[57,]  112.4350 29.23817\n[58,]  112.5558 28.97135\n[59,]  111.7379 24.97087\n[60,]  112.1831 25.31559\n[61,]  111.9743 25.65101\n[62,]  111.7009 25.91101\n[63,]  112.2196 25.88615\n[64,]  112.6472 29.48614\n[65,]  113.5102 29.49285\n[66,]  113.1172 28.79707\n[67,]  113.7089 28.76024\n[68,]  112.7963 28.71653\n[69,]  110.9276 29.39439\n[70,]  113.6420 26.80361\n[71,]  113.4577 27.66123\n[72,]  113.8404 26.37989\n[73,]  113.4758 27.17064\n[74,]  113.1428 27.62875\n[75,]  110.3017 29.39053\n[76,]  113.1957 29.25343\n[77,]  111.7410 26.36035\n[78,]  112.1831 28.49854\n[79,]  111.3390 27.01465\n[80,]  111.8208 27.75124\n[81,]  110.0753 27.23539\n[82,]  112.3965 27.08323\n[83,]  112.7683 25.82828\n[84,]  113.1679 28.30074\n[85,]  111.4495 28.95406\n[86,]  112.7956 27.68910\n[87,]  111.5896 25.49530\n[88,]  111.2393 25.19355\n\nattr(,\"class\")\n[1] \"knn\"\nattr(,\"call\")\nknearneigh(x = coords, k = 10)\n\n\nWe convert the knearneigh() returned into a neighbour list object\n\nk1 <- knn2nb(knearneigh(coords))\n\nWe calculate the distance using nbdists() and remove the list format using unlist(). We can see the maximum distance is 61.79km.\n\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nWe compute distance matrix, using dnearneigh() and set upper and lower bound of the distance.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nWe can also view number of neighbours of each county using table() and card()\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nWe can also plot both of them side by side. Left is 1st nearest neighbour, 2nd is within 0-62km range.\n\npar(mfrow=c(1,2))\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n\nDense areas will have neighbors than sparse area. We can set number of neighbours for each spatial area with k parameter in knearneigh() function.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nIf we plot and visualise\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\nWe use nbdists() from spdep\n\n#Cretae nbdist object first\ndist <- nbdists(wm_q, coords, longlat = TRUE)\n\n#lapply to invert it\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\n\nNeighbours around the spatial unit will be assigned weights based on (1/# number of neighbours). Each will have equal weights.\nEach neighboring polygon will be assigned equal weight using (style=\"W\").\nThe zero.policy=TRUE option allows for lists of non-neighbors. \n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nrswm_q$weights[1]  #weights of 10th spatial unit\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nEach neighbor's income will be multiplied by 0.125 before being totaled.\nAnother way is to assign weights based on distance\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\nThere are 4 types of spatial lagged variables:\n\nSpatial lag with row-standardized weights\nSpatial lag as a sum of neighbouring values\nSpatial window average\nSpatial window sum.\n\n\n\nComputing average neighbourhood values of a spatial is known as spatial lag\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nGDPPC.lag[1]\n\n[1] 24847.2\n\n\nThe above is actually the sum of 0.2* values of the neighbours of spatial unit 1.\nWe append this table into dataframe\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\nlag.res\n\n   c..Anxiang....Hanshou....Jinshi....Li....Linli....Shimen....Liuyang...\n1                                                                 Anxiang\n2                                                                 Hanshou\n3                                                                  Jinshi\n4                                                                      Li\n5                                                                   Linli\n6                                                                  Shimen\n7                                                                 Liuyang\n8                                                               Ningxiang\n9                                                               Wangcheng\n10                                                                  Anren\n11                                                                Guidong\n12                                                                  Jiahe\n13                                                                  Linwu\n14                                                                Rucheng\n15                                                                Yizhang\n16                                                               Yongxing\n17                                                                 Zixing\n18                                                              Changning\n19                                                               Hengdong\n20                                                                Hengnan\n21                                                               Hengshan\n22                                                                Leiyang\n23                                                                 Qidong\n24                                                                 Chenxi\n25                                                              Zhongfang\n26                                                                Huitong\n27                                                               Jingzhou\n28                                                                 Mayang\n29                                                                Tongdao\n30                                                               Xinhuang\n31                                                                   Xupu\n32                                                               Yuanling\n33                                                               Zhijiang\n34                                                          Lengshuijiang\n35                                                             Shuangfeng\n36                                                                 Xinhua\n37                                                                Chengbu\n38                                                                 Dongan\n39                                                                Dongkou\n40                                                                Longhui\n41                                                               Shaodong\n42                                                                Suining\n43                                                                 Wugang\n44                                                                Xinning\n45                                                                Xinshao\n46                                                               Shaoshan\n47                                                             Xiangxiang\n48                                                                Baojing\n49                                                              Fenghuang\n50                                                                Guzhang\n51                                                                Huayuan\n52                                                                 Jishou\n53                                                               Longshan\n54                                                                   Luxi\n55                                                               Yongshun\n56                                                                  Anhua\n57                                                                    Nan\n58                                                              Yuanjiang\n59                                                               Jianghua\n60                                                                Lanshan\n61                                                               Ningyuan\n62                                                              Shuangpai\n63                                                                Xintian\n64                                                                Huarong\n65                                                               Linxiang\n66                                                                  Miluo\n67                                                              Pingjiang\n68                                                               Xiangyin\n69                                                                   Cili\n70                                                                Chaling\n71                                                                 Liling\n72                                                                Yanling\n73                                                                    You\n74                                                                Zhuzhou\n75                                                                Sangzhi\n76                                                                Yueyang\n77                                                                 Qiyang\n78                                                               Taojiang\n79                                                               Shaoyang\n80                                                               Lianyuan\n81                                                              Hongjiang\n82                                                               Hengyang\n83                                                                Guiyang\n84                                                               Changsha\n85                                                                Taoyuan\n86                                                               Xiangtan\n87                                                                    Dao\n88                                                              Jiangyong\n   c.24847.2..22724.8..24143.25..27737.5..27270.25..21248.8..43747..\n1                                                           24847.20\n2                                                           22724.80\n3                                                           24143.25\n4                                                           27737.50\n5                                                           27270.25\n6                                                           21248.80\n7                                                           43747.00\n8                                                           33582.71\n9                                                           45651.17\n10                                                          32027.62\n11                                                          32671.00\n12                                                          20810.00\n13                                                          25711.50\n14                                                          30672.33\n15                                                          33457.75\n16                                                          31689.20\n17                                                          20269.00\n18                                                          23901.60\n19                                                          25126.17\n20                                                          21903.43\n21                                                          22718.60\n22                                                          25918.80\n23                                                          20307.00\n24                                                          20023.80\n25                                                          16576.80\n26                                                          18667.00\n27                                                          14394.67\n28                                                          19848.80\n29                                                          15516.33\n30                                                          20518.00\n31                                                          17572.00\n32                                                          15200.12\n33                                                          18413.80\n34                                                          14419.33\n35                                                          24094.50\n36                                                          22019.83\n37                                                          12923.50\n38                                                          14756.00\n39                                                          13869.80\n40                                                          12296.67\n41                                                          15775.17\n42                                                          14382.86\n43                                                          11566.33\n44                                                          13199.50\n45                                                          23412.00\n46                                                          39541.00\n47                                                          36186.60\n48                                                          16559.60\n49                                                          20772.50\n50                                                          19471.20\n51                                                          19827.33\n52                                                          15466.80\n53                                                          12925.67\n54                                                          18577.17\n55                                                          14943.00\n56                                                          24913.00\n57                                                          25093.00\n58                                                          24428.80\n59                                                          17003.00\n60                                                          21143.75\n61                                                          20435.00\n62                                                          17131.33\n63                                                          24569.75\n64                                                          23835.50\n65                                                          26360.00\n66                                                          47383.40\n67                                                          55157.75\n68                                                          37058.00\n69                                                          21546.67\n70                                                          23348.67\n71                                                          42323.67\n72                                                          28938.60\n73                                                          25880.80\n74                                                          47345.67\n75                                                          18711.33\n76                                                          29087.29\n77                                                          20748.29\n78                                                          35933.71\n79                                                          15439.71\n80                                                          29787.50\n81                                                          18145.00\n82                                                          21617.00\n83                                                          29203.89\n84                                                          41363.67\n85                                                          22259.09\n86                                                          44939.56\n87                                                          16902.00\n88                                                          16930.00\n\n\n\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nWe can visualize this in a plot.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nIf it is a neighbour, add value of 1\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThis uses row standardised weights.\nSpatial window average requires the diagonal element. We will need to add it back\n\nwm_q1 <- wm_q #make a copy\ninclude.self(wm_q1) #diagonal element\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nwm_q1 <- nb2listw(wm_q1) #convert into nnlist object\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nCompute the lag variable\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\n#Create DF\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nInstead of average, we do a sum. No row-standardised weights here.\n\nwm_q1 <- wm_q\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\n#Creating DF\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\nhead(hunan)\n\nSimple feature collection with 6 features and 39 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n  lag_sum GDPPC lag_window_avg GDPPC w_sum GDPPC                       geometry\n1        124236             24847.20      124236 POLYGON ((112.0625 29.75523...\n2        113624             22724.80      113624 POLYGON ((112.2288 29.11684...\n3         96573             24143.25       96573 POLYGON ((111.8927 29.6013,...\n4        110950             27737.50      110950 POLYGON ((111.3731 29.94649...\n5        109081             27270.25      109081 POLYGON ((111.6324 29.76288...\n6        106244             21248.80      106244 POLYGON ((110.8825 30.11675...\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex01/Hand-on_Ex1.html",
    "href": "Hands-on_Ex01/Hand-on_Ex1.html",
    "title": "ISSS624",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse)  #load more than 1 library one shot\nImport into Polygon data Frame\nCRS is coordinate system. SVY21 coordinate system 323 polygon features 15 fields\nImport into line feature data Frame\nImporting kml data frame\nCRS is WGS84 system\nAccessing the column geometries which is in class SFC\nLearning more about attribute of of dataframe. Glimpse is from tidyverse"
  },
  {
    "objectID": "Hands-on_Ex01/Hand-on_Ex1.html#plotting-each-attribute-based-on-geospatial",
    "href": "Hands-on_Ex01/Hand-on_Ex1.html#plotting-each-attribute-based-on-geospatial",
    "title": "ISSS624",
    "section": "Plotting each attribute based on geospatial",
    "text": "Plotting each attribute based on geospatial\n\nplot(mpsz, max.plot = 15)\n\n\n\n\nPlot only geometry (only want the outline and nothing else)\n\nplot(st_geometry(mpsz))\n\n\n\n\nPlotting specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\nmpsz[\"PLN_AREA_N\"]\n\nSimple feature collection with 323 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n        PLN_AREA_N                       geometry\n1     MARINA SOUTH MULTIPOLYGON (((31495.56 30...\n2           OUTRAM MULTIPOLYGON (((29092.28 30...\n3  SINGAPORE RIVER MULTIPOLYGON (((29932.33 29...\n4      BUKIT MERAH MULTIPOLYGON (((27131.28 30...\n5      BUKIT MERAH MULTIPOLYGON (((26451.03 30...\n6      BUKIT MERAH MULTIPOLYGON (((25899.7 297...\n7      BUKIT MERAH MULTIPOLYGON (((27746.95 30...\n8  SINGAPORE RIVER MULTIPOLYGON (((29351.26 29...\n9       QUEENSTOWN MULTIPOLYGON (((20996.49 30...\n10      QUEENSTOWN MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex01/Hand-on_Ex1.html#interlaying-features-with-different-coordinate-systems",
    "href": "Hands-on_Ex01/Hand-on_Ex1.html#interlaying-features-with-different-coordinate-systems",
    "title": "ISSS624",
    "section": "Interlaying features with different Coordinate Systems",
    "text": "Interlaying features with different Coordinate Systems\nNeed to transform different coordinate systems into same one\nSometimes during importing, the coordinate system might be wrong. need to check using st_crs()\n\nst_crs(mpsz) #SVY21 should be 3414 but in here is it 9001. SO wrongly tagged\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 <- st_set_crs(mpsz, 3414) #change the code back to 3414\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414) #checked and changed\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nTo calculate distance you need projected coorindate systems (2D) vs geographic coordinate system (flat)\n\nst_geometry(preschool) #check geometry of preschool\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.7009 1.338325 0)\n\n\nPOINT Z (103.8987 1.39044 0)\n\n\nPOINT Z (103.8068 1.438017 0)\n\n\nPOINT Z (103.7874 1.433436 0)\n\n\nPOINT Z (103.8886 1.395647 0)\n\n\nFrom one coordinate system to another need to reproject. Use ST_transform, cannot just use set_crs().This method does not reproject.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\nst_geometry(preschool3414)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (13258.34 35611.04 0)\n\n\nPOINT Z (35272.09 41373.42 0)\n\n\nPOINT Z (25050.54 46634.14 0)\n\n\nPOINT Z (22892.48 46127.66 0)\n\n\nPOINT Z (34155.79 41949.13 0)\n\n\n\nAspatial Data\nNot geospatial but 2 columns with x and y axis\n\nlistings <- as_tibble(read.csv(\"data/aspatial/listings.csv\"))\nhead(listings)\n\n# A tibble: 6 × 75\n      id listing_…¹ scrap…² last_…³ source name  descr…⁴ neigh…⁵ pictu…⁶ host_id\n   <dbl> <chr>        <dbl> <chr>   <chr>  <chr> <chr>   <chr>   <chr>     <int>\n1  50646 https://w… 2.02e13 2022-0… previ… Plea… \"Fully… \"The s… https:…  227796\n2  71609 https://w… 2.02e13 2022-0… city … Ensu… \"For 3… \"\"      https:…  367042\n3  71896 https://w… 2.02e13 2022-0… city … B&B … \"<b>Th… \"\"      https:…  367042\n4  71903 https://w… 2.02e13 2022-0… city … Room… \"Like … \"Quiet… https:…  367042\n5 275344 https://w… 2.02e13 2022-0… city … 15 m… \"Lovel… \"Bus s… https:… 1439258\n6 289234 https://w… 2.02e13 2022-0… city … Book… \"This … \"A qui… https:…  367042\n# … with 65 more variables: host_url <chr>, host_name <chr>, host_since <chr>,\n#   host_location <chr>, host_about <chr>, host_response_time <chr>,\n#   host_response_rate <chr>, host_acceptance_rate <chr>,\n#   host_is_superhost <chr>, host_thumbnail_url <chr>, host_picture_url <chr>,\n#   host_neighbourhood <chr>, host_listings_count <int>,\n#   host_total_listings_count <int>, host_verifications <chr>,\n#   host_has_profile_pic <chr>, host_identity_verified <chr>, …\n\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 75\n       id listing…¹ scrap…² last_…³ source name  descr…⁴ neigh…⁵ pictu…⁶ host_id\n    <dbl> <chr>       <dbl> <chr>   <chr>  <chr> <chr>   <chr>   <chr>     <int>\n 1  50646 https://… 2.02e13 2022-0… previ… Plea… \"Fully… \"The s… https:…  227796\n 2  71609 https://… 2.02e13 2022-0… city … Ensu… \"For 3… \"\"      https:…  367042\n 3  71896 https://… 2.02e13 2022-0… city … B&B … \"<b>Th… \"\"      https:…  367042\n 4  71903 https://… 2.02e13 2022-0… city … Room… \"Like … \"Quiet… https:…  367042\n 5 275344 https://… 2.02e13 2022-0… city … 15 m… \"Lovel… \"Bus s… https:… 1439258\n 6 289234 https://… 2.02e13 2022-0… city … Book… \"This … \"A qui… https:…  367042\n 7 294281 https://… 2.02e13 2022-0… city … 5 mi… \"I hav… \"\"      https:… 1521514\n 8 324945 https://… 2.02e13 2022-0… city … Cozy… \"<b>Th… \"\"      https:… 1439258\n 9 330089 https://… 2.02e13 2022-0… city … Cozy… \"A uni… \"\"      https:… 1439258\n10 330095 https://… 2.02e13 2022-0… city … 10 m… \"Cosy,… \"Near … https:… 1439258\n# … with 4,151 more rows, 65 more variables: host_url <chr>, host_name <chr>,\n#   host_since <chr>, host_location <chr>, host_about <chr>,\n#   host_response_time <chr>, host_response_rate <chr>,\n#   host_acceptance_rate <chr>, host_is_superhost <chr>,\n#   host_thumbnail_url <chr>, host_picture_url <chr>, host_neighbourhood <chr>,\n#   host_listings_count <int>, host_total_listings_count <int>,\n#   host_verifications <chr>, host_has_profile_pic <chr>, …\n\ncolnames(listings)\n\n [1] \"id\"                                          \n [2] \"listing_url\"                                 \n [3] \"scrape_id\"                                   \n [4] \"last_scraped\"                                \n [5] \"source\"                                      \n [6] \"name\"                                        \n [7] \"description\"                                 \n [8] \"neighborhood_overview\"                       \n [9] \"picture_url\"                                 \n[10] \"host_id\"                                     \n[11] \"host_url\"                                    \n[12] \"host_name\"                                   \n[13] \"host_since\"                                  \n[14] \"host_location\"                               \n[15] \"host_about\"                                  \n[16] \"host_response_time\"                          \n[17] \"host_response_rate\"                          \n[18] \"host_acceptance_rate\"                        \n[19] \"host_is_superhost\"                           \n[20] \"host_thumbnail_url\"                          \n[21] \"host_picture_url\"                            \n[22] \"host_neighbourhood\"                          \n[23] \"host_listings_count\"                         \n[24] \"host_total_listings_count\"                   \n[25] \"host_verifications\"                          \n[26] \"host_has_profile_pic\"                        \n[27] \"host_identity_verified\"                      \n[28] \"neighbourhood\"                               \n[29] \"neighbourhood_cleansed\"                      \n[30] \"neighbourhood_group_cleansed\"                \n[31] \"latitude\"                                    \n[32] \"longitude\"                                   \n[33] \"property_type\"                               \n[34] \"room_type\"                                   \n[35] \"accommodates\"                                \n[36] \"bathrooms\"                                   \n[37] \"bathrooms_text\"                              \n[38] \"bedrooms\"                                    \n[39] \"beds\"                                        \n[40] \"amenities\"                                   \n[41] \"price\"                                       \n[42] \"minimum_nights\"                              \n[43] \"maximum_nights\"                              \n[44] \"minimum_minimum_nights\"                      \n[45] \"maximum_minimum_nights\"                      \n[46] \"minimum_maximum_nights\"                      \n[47] \"maximum_maximum_nights\"                      \n[48] \"minimum_nights_avg_ntm\"                      \n[49] \"maximum_nights_avg_ntm\"                      \n[50] \"calendar_updated\"                            \n[51] \"has_availability\"                            \n[52] \"availability_30\"                             \n[53] \"availability_60\"                             \n[54] \"availability_90\"                             \n[55] \"availability_365\"                            \n[56] \"calendar_last_scraped\"                       \n[57] \"number_of_reviews\"                           \n[58] \"number_of_reviews_ltm\"                       \n[59] \"number_of_reviews_l30d\"                      \n[60] \"first_review\"                                \n[61] \"last_review\"                                 \n[62] \"review_scores_rating\"                        \n[63] \"review_scores_accuracy\"                      \n[64] \"review_scores_cleanliness\"                   \n[65] \"review_scores_checkin\"                       \n[66] \"review_scores_communication\"                 \n[67] \"review_scores_location\"                      \n[68] \"review_scores_value\"                         \n[69] \"license\"                                     \n[70] \"instant_bookable\"                            \n[71] \"calculated_host_listings_count\"              \n[72] \"calculated_host_listings_count_entire_homes\" \n[73] \"calculated_host_listings_count_private_rooms\"\n[74] \"calculated_host_listings_count_shared_rooms\" \n[75] \"reviews_per_month\"                           \n\n\n\nlistings_sf <- st_as_sf(listings, coords = c(\"longitude\",\"latitude\"),\n         crs = 4326) %>%\n  st_transform(crs = 3414)\n\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 74\n$ id                                           <dbl> 50646, 71609, 71896, 7190…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.022092e+13, 2.022092e+1…\n$ last_scraped                                 <chr> \"2022-09-23\", \"2022-09-22…\n$ source                                       <chr> \"previous scrape\", \"city …\n$ name                                         <chr> \"Pleasant Room along Buki…\n$ description                                  <chr> \"Fully furnished bedroom …\n$ neighborhood_overview                        <chr> \"The serenity & quiet sur…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <int> 227796, 367042, 367042, 3…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Sujatha\", \"Belinda\", \"Be…\n$ host_since                                   <chr> \"2010-09-08\", \"2011-01-29…\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"I am a working professio…\n$ host_response_time                           <chr> \"a few days or more\", \"wi…\n$ host_response_rate                           <chr> \"0%\", \"100%\", \"100%\", \"10…\n$ host_acceptance_rate                         <chr> \"N/A\", \"100%\", \"100%\", \"1…\n$ host_is_superhost                            <chr> \"f\", \"f\", \"f\", \"f\", \"f\", …\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Bukit Timah\", \"Tampines\"…\n$ host_listings_count                          <int> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ host_total_listings_count                    <int> 4, 15, 15, 15, 57, 15, 8,…\n$ host_verifications                           <chr> \"['email', 'phone', 'work…\n$ host_has_profile_pic                         <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ host_identity_verified                       <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ neighbourhood                                <chr> \"Singapore, Singapore\", \"…\n$ neighbourhood_cleansed                       <chr> \"Bukit Timah\", \"Tampines\"…\n$ neighbourhood_group_cleansed                 <chr> \"Central Region\", \"East R…\n$ property_type                                <chr> \"Private room in rental u…\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <int> 2, 6, 1, 2, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 bath\", \"1 private bath…\n$ bedrooms                                     <int> 1, 2, 1, 1, 1, 3, 1, 1, N…\n$ beds                                         <int> 1, 3, 1, 2, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Gym\\\", \\\"Washer\\\", \\\"…\n$ price                                        <chr> \"$80.00\", \"$145.00\", \"$85…\n$ minimum_nights                               <int> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights                               <int> 730, 1125, 1125, 1125, 99…\n$ minimum_minimum_nights                       <int> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_minimum_nights                       <int> 92, 92, 92, 92, 60, 92, 9…\n$ minimum_maximum_nights                       <int> 730, 1125, 1125, 1125, 99…\n$ maximum_maximum_nights                       <int> 730, 1125, 1125, 1125, 99…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 730, 1125, 1125, 1125, 99…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ availability_30                              <int> 30, 5, 0, 30, 0, 0, 30, 5…\n$ availability_60                              <int> 60, 35, 1, 60, 0, 0, 60, …\n$ availability_90                              <int> 90, 65, 1, 90, 21, 10, 90…\n$ availability_365                             <int> 365, 340, 265, 365, 296, …\n$ calendar_last_scraped                        <chr> \"2022-09-23\", \"2022-09-22…\n$ number_of_reviews                            <int> 18, 20, 24, 47, 14, 12, 1…\n$ number_of_reviews_ltm                        <int> 0, 0, 0, 0, 1, 0, 0, 3, 2…\n$ number_of_reviews_l30d                       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 <chr> \"2014-04-18\", \"2011-12-19…\n$ last_review                                  <chr> \"2014-12-26\", \"2020-01-17…\n$ review_scores_rating                         <dbl> 4.56, 4.44, 4.16, 4.41, 4…\n$ review_scores_accuracy                       <dbl> 4.72, 4.37, 4.22, 4.39, 4…\n$ review_scores_cleanliness                    <dbl> 4.78, 4.00, 4.09, 4.52, 4…\n$ review_scores_checkin                        <dbl> 4.78, 4.63, 4.43, 4.63, 4…\n$ review_scores_communication                  <dbl> 4.94, 4.78, 4.43, 4.64, 4…\n$ review_scores_location                       <dbl> 4.72, 4.26, 4.17, 4.50, 4…\n$ review_scores_value                          <dbl> 4.50, 4.32, 4.04, 4.36, 4…\n$ license                                      <chr> \"\", \"\", \"\", \"\", \"S0399\", …\n$ instant_bookable                             <chr> \"f\", \"f\", \"t\", \"f\", \"f\", …\n$ calculated_host_listings_count               <int> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ calculated_host_listings_count_entire_homes  <int> 0, 0, 0, 0, 2, 0, 1, 2, 2…\n$ calculated_host_listings_count_private_rooms <int> 1, 6, 6, 6, 42, 6, 6, 42,…\n$ calculated_host_listings_count_shared_rooms  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.18, 0.15, 0.18, 0.34, 0…\n$ geometry                                     <POINT [m]> POINT (22646.02 351…\n\n\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n#create new column\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n#Sum area\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\nCount number of preschool on topi each planning zone\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\nplot(mpsz3414['PreSch Count'])\n\n\n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nmpsz3414$Area\n\nUnits: [m^2]\n  [1]  1630379.27   559816.25   160807.50   595428.89   387429.44  1030378.79\n  [7]   551732.05   290184.65  1084792.32   631644.29  1826848.56   293706.40\n [13]  1844060.67   392563.34   506588.96 36707720.92  4207271.09  4963787.10\n [19]  2206319.46  4919132.37  3449640.61   103238.48  1127297.24  2701634.34\n [25]   276826.81    63664.97   196619.86   365333.43  1454827.65   853206.57\n [31]  1070723.26   533017.39   442502.83    93140.44   411722.82   587222.68\n [37]    39437.94   188767.49   133006.94   448127.58   521200.52   350787.56\n [43]   261843.90  1590339.80   886954.81   223206.60   200052.68   710568.70\n [49]   748684.00   591779.00  1755950.44   340743.34   329437.93   170664.30\n [55]   368482.99  7601894.00   221973.34   280174.77   214250.30   173121.77\n [61]   533671.25   145518.66   635704.06   503220.75    55681.28   116330.00\n [67]  2051652.62  2434594.03  1713623.00   310513.65  1386643.32  1951865.75\n [73]   452471.83   697501.71 27710950.08   171720.62  1097833.70  1053493.75\n [79]  2796006.83  3049720.08   336221.49   741437.99   460550.43   543483.68\n [85]   278303.54  1769495.16   385093.11   558760.53  5675810.85  2096085.23\n [91]   722588.68  2550461.67  2042630.98  3260399.46  1346152.78   171334.39\n [97]    49626.02   193992.35   120171.32   850853.91  1026467.39   167537.07\n[103]  1160017.48  2560995.94   735502.23   948158.91  1321089.88  2997307.46\n[109]  1376830.05  1926622.00  3203306.04  2349378.27   963198.88   485022.31\n[115]  1881305.83  1425083.18  2387277.53  1078992.03   459546.29   247887.63\n[121]   213581.64  2464856.70  1940693.42  2118499.41   485046.92   757907.61\n[127]   351242.25  1312922.68   946651.42   748043.28  1022292.30   410994.54\n[133]   839488.98  1228487.73   554623.68  3392897.36  1878092.48   867750.44\n[139]   639143.56  3260150.86   411403.94   418657.36  2098176.50  1524551.34\n[145]   813382.98  1484296.47  3108023.27  1037281.09  2820171.68   924762.48\n[151]  1806553.08  1404536.64  2379331.53  2077796.55  3142950.11  2636483.26\n[157]  1057165.24  1287949.82   439646.76   746882.30   446241.79   572502.14\n[163]  2959367.63  2158289.72  1347456.01  2338909.49  4297140.71   991039.78\n[169]  2049551.25  2579087.17  3187584.08   906317.39   380201.80   526383.35\n[175]   800298.56   898561.30  1793463.63  3188097.31   494504.07  1061889.35\n[181]  1794461.26  3475209.89  1225673.65  1974371.71  1085080.08  1964134.53\n[187]  1974943.24  4141322.43  4339824.14  1796058.93  2251155.70   776142.49\n[193]  2206305.01  1180126.11  1229894.42   964682.68  1263409.40   369770.56\n[199]  3203663.49  1107267.04  1287387.26   842667.63  1333532.99  1007410.00\n[205]   894516.08   911208.29  1143813.67  1328876.20   609894.67   763183.43\n[211]  2768353.56  3467036.98  7833992.84  2778635.66   862737.09  1583440.16\n[217]   846137.20  1744387.41  1001591.79  1097298.80  4848516.74   668454.44\n[223]   624877.50   674992.00  2330683.26  1093213.49  1861872.04   909418.57\n[229]  2114789.49  3334192.44  1515533.89   944998.45  1990788.40  1829821.69\n[235]  2259239.74  3860324.99   859179.18   546403.86  1948613.21  1078622.32\n[241]   687930.10  3023148.98   441733.44   970068.07  1235901.75  1639669.02\n[247]  2543106.63   955710.19   316882.02  1046417.00   921430.95  7370557.68\n[253]   684704.30  1511487.38  2459098.27  7034806.47  3652031.03  1719704.60\n[259]  1088638.01  1569034.78  1670029.86  2391082.76  1378710.54   923214.75\n[265]  5325421.58  1418284.25  1489246.88  5186128.08 35096028.59  1463278.18\n[271]   995944.77  1455507.86  1499108.63   924866.02  1340167.99  8453312.38\n[277]  1360000.63   143137.94   436368.53  1259743.11  3291405.51  1576001.48\n[283]  1665469.26  1767092.90 69748298.79  2050051.22  1517767.39   595652.14\n[289]  3284130.42  2553463.72   962437.40  1281296.51   758123.46   905921.12\n[295]  1611278.68  1261648.75 17494884.18  3450455.36  1741957.36  1394865.68\n[301]  1074375.12 67250562.96  7235809.44  2147082.07  1511000.36   936415.53\n[307]  1648629.91  1099394.72  2209210.71  1264384.79  2206695.55  1265919.30\n[313] 37147854.46  3916069.34  2175380.06  3621841.18  1432913.06  4387133.12\n[319]  1200804.56  2450783.61  1540733.67  1635808.13  2241386.62\n\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data = mpsz3414,\n       aes(x = as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light blue')+\n  labs(title = \"Are pre-school evenly distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are a few planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\nggplot(data = mpsz3414, \n       aes( x = as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) + \n  geom_point(size = 1.5, color = 'pink', shape = 23) +\n  labs(  x = \"Pre-school density (per km sq)\",\n         y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands_on_Ex_1.html",
    "href": "Hands_on_Ex_1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Doing Geo spatial Analysis\n\npacman::p_load(sf, tidyverse)  #load more than 1 library one shot\n\nImport into Polygon data Frame\n\nmpsz = st_read(dsn = \"Hands-on_Ex01/data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nCRS is coordinate system. SVY21 coordinate system 323 polygon features 15 fields\nImport into line feature data Frame\n\ncyclingpath = st_read(dsn = \"Hands-on_Ex01/data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nImporting kml data frame\n\npreschool = st_read(\"Hands-on_Ex01/data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex01/data/geospatial/pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nCRS is WGS84 system\nAccessing the column geometries which is in class SFC\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nLearning more about attribute of of dataframe. Glimpse is from tidyverse\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nhead(mpsz, 5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands_on_Ex_1.html#plotting-each-attribute-based-on-geospatial",
    "href": "Hands_on_Ex_1.html#plotting-each-attribute-based-on-geospatial",
    "title": "Hands-on Exercise 1",
    "section": "Plotting each attribute based on geospatial",
    "text": "Plotting each attribute based on geospatial\n\nplot(mpsz, max.plot = 15)\n\n\n\n\nPlot only geometry (only want the outline and nothing else)\n\nplot(st_geometry(mpsz))\n\n\n\n\nPlotting specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\nmpsz[\"PLN_AREA_N\"]\n\nSimple feature collection with 323 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n        PLN_AREA_N                       geometry\n1     MARINA SOUTH MULTIPOLYGON (((31495.56 30...\n2           OUTRAM MULTIPOLYGON (((29092.28 30...\n3  SINGAPORE RIVER MULTIPOLYGON (((29932.33 29...\n4      BUKIT MERAH MULTIPOLYGON (((27131.28 30...\n5      BUKIT MERAH MULTIPOLYGON (((26451.03 30...\n6      BUKIT MERAH MULTIPOLYGON (((25899.7 297...\n7      BUKIT MERAH MULTIPOLYGON (((27746.95 30...\n8  SINGAPORE RIVER MULTIPOLYGON (((29351.26 29...\n9       QUEENSTOWN MULTIPOLYGON (((20996.49 30...\n10      QUEENSTOWN MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands_on_Ex_1.html#interlaying-features-with-different-coordinate-systems",
    "href": "Hands_on_Ex_1.html#interlaying-features-with-different-coordinate-systems",
    "title": "Hands-on Exercise 1",
    "section": "Interlaying features with different Coordinate Systems",
    "text": "Interlaying features with different Coordinate Systems\nNeed to transform different coordinate systems into same one\nSometimes during importing, the coordinate system might be wrong. need to check using st_crs()\n\nst_crs(mpsz) #SVY21 should be 3414 but in here is it 9001. SO wrongly tagged\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 <- st_set_crs(mpsz, 3414) #change the code back to 3414\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414) #checked and changed\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nTo calculate distance you need projected coorindate systems (2D) vs geographic coordinate system (flat)\n\nst_geometry(preschool) #check geometry of preschool\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.7009 1.338325 0)\n\n\nPOINT Z (103.8987 1.39044 0)\n\n\nPOINT Z (103.8068 1.438017 0)\n\n\nPOINT Z (103.7874 1.433436 0)\n\n\nPOINT Z (103.8886 1.395647 0)\n\n\nFrom one coordinate system to another need to reproject. Use ST_transform, cannot just use set_crs().This method does not reproject.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\nst_geometry(preschool3414)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (13258.34 35611.04 0)\n\n\nPOINT Z (35272.09 41373.42 0)\n\n\nPOINT Z (25050.54 46634.14 0)\n\n\nPOINT Z (22892.48 46127.66 0)\n\n\nPOINT Z (34155.79 41949.13 0)\n\n\n\nAspatial Data\nNot geospatial but 2 columns with x and y axis\n\nlistings <- as_tibble(read.csv(\"Hands-on_Ex01/data/aspatial/listings.csv\"))\nhead(listings)\n\n# A tibble: 6 × 75\n      id listing_…¹ scrap…² last_…³ source name  descr…⁴ neigh…⁵ pictu…⁶ host_id\n   <dbl> <chr>        <dbl> <chr>   <chr>  <chr> <chr>   <chr>   <chr>     <int>\n1  50646 https://w… 2.02e13 2022-0… previ… Plea… \"Fully… \"The s… https:…  227796\n2  71609 https://w… 2.02e13 2022-0… city … Ensu… \"For 3… \"\"      https:…  367042\n3  71896 https://w… 2.02e13 2022-0… city … B&B … \"<b>Th… \"\"      https:…  367042\n4  71903 https://w… 2.02e13 2022-0… city … Room… \"Like … \"Quiet… https:…  367042\n5 275344 https://w… 2.02e13 2022-0… city … 15 m… \"Lovel… \"Bus s… https:… 1439258\n6 289234 https://w… 2.02e13 2022-0… city … Book… \"This … \"A qui… https:…  367042\n# … with 65 more variables: host_url <chr>, host_name <chr>, host_since <chr>,\n#   host_location <chr>, host_about <chr>, host_response_time <chr>,\n#   host_response_rate <chr>, host_acceptance_rate <chr>,\n#   host_is_superhost <chr>, host_thumbnail_url <chr>, host_picture_url <chr>,\n#   host_neighbourhood <chr>, host_listings_count <int>,\n#   host_total_listings_count <int>, host_verifications <chr>,\n#   host_has_profile_pic <chr>, host_identity_verified <chr>, …\n\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 75\n       id listing…¹ scrap…² last_…³ source name  descr…⁴ neigh…⁵ pictu…⁶ host_id\n    <dbl> <chr>       <dbl> <chr>   <chr>  <chr> <chr>   <chr>   <chr>     <int>\n 1  50646 https://… 2.02e13 2022-0… previ… Plea… \"Fully… \"The s… https:…  227796\n 2  71609 https://… 2.02e13 2022-0… city … Ensu… \"For 3… \"\"      https:…  367042\n 3  71896 https://… 2.02e13 2022-0… city … B&B … \"<b>Th… \"\"      https:…  367042\n 4  71903 https://… 2.02e13 2022-0… city … Room… \"Like … \"Quiet… https:…  367042\n 5 275344 https://… 2.02e13 2022-0… city … 15 m… \"Lovel… \"Bus s… https:… 1439258\n 6 289234 https://… 2.02e13 2022-0… city … Book… \"This … \"A qui… https:…  367042\n 7 294281 https://… 2.02e13 2022-0… city … 5 mi… \"I hav… \"\"      https:… 1521514\n 8 324945 https://… 2.02e13 2022-0… city … Cozy… \"<b>Th… \"\"      https:… 1439258\n 9 330089 https://… 2.02e13 2022-0… city … Cozy… \"A uni… \"\"      https:… 1439258\n10 330095 https://… 2.02e13 2022-0… city … 10 m… \"Cosy,… \"Near … https:… 1439258\n# … with 4,151 more rows, 65 more variables: host_url <chr>, host_name <chr>,\n#   host_since <chr>, host_location <chr>, host_about <chr>,\n#   host_response_time <chr>, host_response_rate <chr>,\n#   host_acceptance_rate <chr>, host_is_superhost <chr>,\n#   host_thumbnail_url <chr>, host_picture_url <chr>, host_neighbourhood <chr>,\n#   host_listings_count <int>, host_total_listings_count <int>,\n#   host_verifications <chr>, host_has_profile_pic <chr>, …\n\ncolnames(listings)\n\n [1] \"id\"                                          \n [2] \"listing_url\"                                 \n [3] \"scrape_id\"                                   \n [4] \"last_scraped\"                                \n [5] \"source\"                                      \n [6] \"name\"                                        \n [7] \"description\"                                 \n [8] \"neighborhood_overview\"                       \n [9] \"picture_url\"                                 \n[10] \"host_id\"                                     \n[11] \"host_url\"                                    \n[12] \"host_name\"                                   \n[13] \"host_since\"                                  \n[14] \"host_location\"                               \n[15] \"host_about\"                                  \n[16] \"host_response_time\"                          \n[17] \"host_response_rate\"                          \n[18] \"host_acceptance_rate\"                        \n[19] \"host_is_superhost\"                           \n[20] \"host_thumbnail_url\"                          \n[21] \"host_picture_url\"                            \n[22] \"host_neighbourhood\"                          \n[23] \"host_listings_count\"                         \n[24] \"host_total_listings_count\"                   \n[25] \"host_verifications\"                          \n[26] \"host_has_profile_pic\"                        \n[27] \"host_identity_verified\"                      \n[28] \"neighbourhood\"                               \n[29] \"neighbourhood_cleansed\"                      \n[30] \"neighbourhood_group_cleansed\"                \n[31] \"latitude\"                                    \n[32] \"longitude\"                                   \n[33] \"property_type\"                               \n[34] \"room_type\"                                   \n[35] \"accommodates\"                                \n[36] \"bathrooms\"                                   \n[37] \"bathrooms_text\"                              \n[38] \"bedrooms\"                                    \n[39] \"beds\"                                        \n[40] \"amenities\"                                   \n[41] \"price\"                                       \n[42] \"minimum_nights\"                              \n[43] \"maximum_nights\"                              \n[44] \"minimum_minimum_nights\"                      \n[45] \"maximum_minimum_nights\"                      \n[46] \"minimum_maximum_nights\"                      \n[47] \"maximum_maximum_nights\"                      \n[48] \"minimum_nights_avg_ntm\"                      \n[49] \"maximum_nights_avg_ntm\"                      \n[50] \"calendar_updated\"                            \n[51] \"has_availability\"                            \n[52] \"availability_30\"                             \n[53] \"availability_60\"                             \n[54] \"availability_90\"                             \n[55] \"availability_365\"                            \n[56] \"calendar_last_scraped\"                       \n[57] \"number_of_reviews\"                           \n[58] \"number_of_reviews_ltm\"                       \n[59] \"number_of_reviews_l30d\"                      \n[60] \"first_review\"                                \n[61] \"last_review\"                                 \n[62] \"review_scores_rating\"                        \n[63] \"review_scores_accuracy\"                      \n[64] \"review_scores_cleanliness\"                   \n[65] \"review_scores_checkin\"                       \n[66] \"review_scores_communication\"                 \n[67] \"review_scores_location\"                      \n[68] \"review_scores_value\"                         \n[69] \"license\"                                     \n[70] \"instant_bookable\"                            \n[71] \"calculated_host_listings_count\"              \n[72] \"calculated_host_listings_count_entire_homes\" \n[73] \"calculated_host_listings_count_private_rooms\"\n[74] \"calculated_host_listings_count_shared_rooms\" \n[75] \"reviews_per_month\"                           \n\n\n\nlistings_sf <- st_as_sf(listings, coords = c(\"longitude\",\"latitude\"),\n         crs = 4326) %>%\n  st_transform(crs = 3414)\n\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 74\n$ id                                           <dbl> 50646, 71609, 71896, 7190…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.022092e+13, 2.022092e+1…\n$ last_scraped                                 <chr> \"2022-09-23\", \"2022-09-22…\n$ source                                       <chr> \"previous scrape\", \"city …\n$ name                                         <chr> \"Pleasant Room along Buki…\n$ description                                  <chr> \"Fully furnished bedroom …\n$ neighborhood_overview                        <chr> \"The serenity & quiet sur…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <int> 227796, 367042, 367042, 3…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Sujatha\", \"Belinda\", \"Be…\n$ host_since                                   <chr> \"2010-09-08\", \"2011-01-29…\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"I am a working professio…\n$ host_response_time                           <chr> \"a few days or more\", \"wi…\n$ host_response_rate                           <chr> \"0%\", \"100%\", \"100%\", \"10…\n$ host_acceptance_rate                         <chr> \"N/A\", \"100%\", \"100%\", \"1…\n$ host_is_superhost                            <chr> \"f\", \"f\", \"f\", \"f\", \"f\", …\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Bukit Timah\", \"Tampines\"…\n$ host_listings_count                          <int> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ host_total_listings_count                    <int> 4, 15, 15, 15, 57, 15, 8,…\n$ host_verifications                           <chr> \"['email', 'phone', 'work…\n$ host_has_profile_pic                         <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ host_identity_verified                       <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ neighbourhood                                <chr> \"Singapore, Singapore\", \"…\n$ neighbourhood_cleansed                       <chr> \"Bukit Timah\", \"Tampines\"…\n$ neighbourhood_group_cleansed                 <chr> \"Central Region\", \"East R…\n$ property_type                                <chr> \"Private room in rental u…\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <int> 2, 6, 1, 2, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 bath\", \"1 private bath…\n$ bedrooms                                     <int> 1, 2, 1, 1, 1, 3, 1, 1, N…\n$ beds                                         <int> 1, 3, 1, 2, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Gym\\\", \\\"Washer\\\", \\\"…\n$ price                                        <chr> \"$80.00\", \"$145.00\", \"$85…\n$ minimum_nights                               <int> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights                               <int> 730, 1125, 1125, 1125, 99…\n$ minimum_minimum_nights                       <int> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_minimum_nights                       <int> 92, 92, 92, 92, 60, 92, 9…\n$ minimum_maximum_nights                       <int> 730, 1125, 1125, 1125, 99…\n$ maximum_maximum_nights                       <int> 730, 1125, 1125, 1125, 99…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 730, 1125, 1125, 1125, 99…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <chr> \"t\", \"t\", \"t\", \"t\", \"t\", …\n$ availability_30                              <int> 30, 5, 0, 30, 0, 0, 30, 5…\n$ availability_60                              <int> 60, 35, 1, 60, 0, 0, 60, …\n$ availability_90                              <int> 90, 65, 1, 90, 21, 10, 90…\n$ availability_365                             <int> 365, 340, 265, 365, 296, …\n$ calendar_last_scraped                        <chr> \"2022-09-23\", \"2022-09-22…\n$ number_of_reviews                            <int> 18, 20, 24, 47, 14, 12, 1…\n$ number_of_reviews_ltm                        <int> 0, 0, 0, 0, 1, 0, 0, 3, 2…\n$ number_of_reviews_l30d                       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 <chr> \"2014-04-18\", \"2011-12-19…\n$ last_review                                  <chr> \"2014-12-26\", \"2020-01-17…\n$ review_scores_rating                         <dbl> 4.56, 4.44, 4.16, 4.41, 4…\n$ review_scores_accuracy                       <dbl> 4.72, 4.37, 4.22, 4.39, 4…\n$ review_scores_cleanliness                    <dbl> 4.78, 4.00, 4.09, 4.52, 4…\n$ review_scores_checkin                        <dbl> 4.78, 4.63, 4.43, 4.63, 4…\n$ review_scores_communication                  <dbl> 4.94, 4.78, 4.43, 4.64, 4…\n$ review_scores_location                       <dbl> 4.72, 4.26, 4.17, 4.50, 4…\n$ review_scores_value                          <dbl> 4.50, 4.32, 4.04, 4.36, 4…\n$ license                                      <chr> \"\", \"\", \"\", \"\", \"S0399\", …\n$ instant_bookable                             <chr> \"f\", \"f\", \"t\", \"f\", \"f\", …\n$ calculated_host_listings_count               <int> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ calculated_host_listings_count_entire_homes  <int> 0, 0, 0, 0, 2, 0, 1, 2, 2…\n$ calculated_host_listings_count_private_rooms <int> 1, 6, 6, 6, 42, 6, 6, 42,…\n$ calculated_host_listings_count_shared_rooms  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.18, 0.15, 0.18, 0.34, 0…\n$ geometry                                     <POINT [m]> POINT (22646.02 351…\n\n\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n#create new column\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n#Sum area\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\nCount number of preschool on topi each planning zone\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\nplot(mpsz3414['PreSch Count'])\n\n\n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nmpsz3414$Area\n\nUnits: [m^2]\n  [1]  1630379.27   559816.25   160807.50   595428.89   387429.44  1030378.79\n  [7]   551732.05   290184.65  1084792.32   631644.29  1826848.56   293706.40\n [13]  1844060.67   392563.34   506588.96 36707720.92  4207271.09  4963787.10\n [19]  2206319.46  4919132.37  3449640.61   103238.48  1127297.24  2701634.34\n [25]   276826.81    63664.97   196619.86   365333.43  1454827.65   853206.57\n [31]  1070723.26   533017.39   442502.83    93140.44   411722.82   587222.68\n [37]    39437.94   188767.49   133006.94   448127.58   521200.52   350787.56\n [43]   261843.90  1590339.80   886954.81   223206.60   200052.68   710568.70\n [49]   748684.00   591779.00  1755950.44   340743.34   329437.93   170664.30\n [55]   368482.99  7601894.00   221973.34   280174.77   214250.30   173121.77\n [61]   533671.25   145518.66   635704.06   503220.75    55681.28   116330.00\n [67]  2051652.62  2434594.03  1713623.00   310513.65  1386643.32  1951865.75\n [73]   452471.83   697501.71 27710950.08   171720.62  1097833.70  1053493.75\n [79]  2796006.83  3049720.08   336221.49   741437.99   460550.43   543483.68\n [85]   278303.54  1769495.16   385093.11   558760.53  5675810.85  2096085.23\n [91]   722588.68  2550461.67  2042630.98  3260399.46  1346152.78   171334.39\n [97]    49626.02   193992.35   120171.32   850853.91  1026467.39   167537.07\n[103]  1160017.48  2560995.94   735502.23   948158.91  1321089.88  2997307.46\n[109]  1376830.05  1926622.00  3203306.04  2349378.27   963198.88   485022.31\n[115]  1881305.83  1425083.18  2387277.53  1078992.03   459546.29   247887.63\n[121]   213581.64  2464856.70  1940693.42  2118499.41   485046.92   757907.61\n[127]   351242.25  1312922.68   946651.42   748043.28  1022292.30   410994.54\n[133]   839488.98  1228487.73   554623.68  3392897.36  1878092.48   867750.44\n[139]   639143.56  3260150.86   411403.94   418657.36  2098176.50  1524551.34\n[145]   813382.98  1484296.47  3108023.27  1037281.09  2820171.68   924762.48\n[151]  1806553.08  1404536.64  2379331.53  2077796.55  3142950.11  2636483.26\n[157]  1057165.24  1287949.82   439646.76   746882.30   446241.79   572502.14\n[163]  2959367.63  2158289.72  1347456.01  2338909.49  4297140.71   991039.78\n[169]  2049551.25  2579087.17  3187584.08   906317.39   380201.80   526383.35\n[175]   800298.56   898561.30  1793463.63  3188097.31   494504.07  1061889.35\n[181]  1794461.26  3475209.89  1225673.65  1974371.71  1085080.08  1964134.53\n[187]  1974943.24  4141322.43  4339824.14  1796058.93  2251155.70   776142.49\n[193]  2206305.01  1180126.11  1229894.42   964682.68  1263409.40   369770.56\n[199]  3203663.49  1107267.04  1287387.26   842667.63  1333532.99  1007410.00\n[205]   894516.08   911208.29  1143813.67  1328876.20   609894.67   763183.43\n[211]  2768353.56  3467036.98  7833992.84  2778635.66   862737.09  1583440.16\n[217]   846137.20  1744387.41  1001591.79  1097298.80  4848516.74   668454.44\n[223]   624877.50   674992.00  2330683.26  1093213.49  1861872.04   909418.57\n[229]  2114789.49  3334192.44  1515533.89   944998.45  1990788.40  1829821.69\n[235]  2259239.74  3860324.99   859179.18   546403.86  1948613.21  1078622.32\n[241]   687930.10  3023148.98   441733.44   970068.07  1235901.75  1639669.02\n[247]  2543106.63   955710.19   316882.02  1046417.00   921430.95  7370557.68\n[253]   684704.30  1511487.38  2459098.27  7034806.47  3652031.03  1719704.60\n[259]  1088638.01  1569034.78  1670029.86  2391082.76  1378710.54   923214.75\n[265]  5325421.58  1418284.25  1489246.88  5186128.08 35096028.59  1463278.18\n[271]   995944.77  1455507.86  1499108.63   924866.02  1340167.99  8453312.38\n[277]  1360000.63   143137.94   436368.53  1259743.11  3291405.51  1576001.48\n[283]  1665469.26  1767092.90 69748298.79  2050051.22  1517767.39   595652.14\n[289]  3284130.42  2553463.72   962437.40  1281296.51   758123.46   905921.12\n[295]  1611278.68  1261648.75 17494884.18  3450455.36  1741957.36  1394865.68\n[301]  1074375.12 67250562.96  7235809.44  2147082.07  1511000.36   936415.53\n[307]  1648629.91  1099394.72  2209210.71  1264384.79  2206695.55  1265919.30\n[313] 37147854.46  3916069.34  2175380.06  3621841.18  1432913.06  4387133.12\n[319]  1200804.56  2450783.61  1540733.67  1635808.13  2241386.62\n\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data = mpsz3414,\n       aes(x = as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20, \n                 color = 'black',\n                 fill = 'light blue')+\n  labs(title = \"Are pre-school evenly distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are a few planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\nggplot(data = mpsz3414, \n       aes( x = as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) + \n  geom_point(size = 1.5, color = 'pink', shape = 23) +\n  labs(  x = \"Pre-school density (per km sq)\",\n         y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands_on_Ex_1.html#choropleth-mapping-with-r",
    "href": "Hands_on_Ex_1.html#choropleth-mapping-with-r",
    "title": "Hands-on Exercise 1",
    "section": "Choropleth Mapping with R",
    "text": "Choropleth Mapping with R\nRequire package readr, tidyr, dplyr, sf\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nImport Data\n\nmpsz <- st_read(dsn = \"Hands-on_Ex01/data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\npopdata <- read_csv(\"Hands-on_Ex01/data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Cleaning and Wrangling\nExtract only 2022 data. Columns needed are PA, SZ, Young, Economy Active, Aged, Total, Dependency\nYOUNG: age group 0 to 4 until age groyup 20 to 24, ECONOMY ACTIVE: age group 25-29 until age group 60-64, AGED: age group 65 and above, TOTAL: all age group, and DEPENDENCY: the ratio between young and aged against economy active group\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nMaking PA and SZ columns uppercase\nGoal is to join attribute data and geospatial data\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nPlease use a list of either functions or lambdas: \n\n  # Simple named list: \n  list(mean = mean, median = median)\n\n  # Auto named with `tibble::lst()`: \n  tibble::lst(mean, median)\n\n  # Using lambdas\n  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n#left join data tables\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020, \n          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nWrite mpsz_pop2020 to a rds file\n\nwrite_rds(mpsz_pop2020, \"Hands-on_Ex01/data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands_on_Ex_1.html#plotting-choropleth-map",
    "href": "Hands_on_Ex_1.html#plotting-choropleth-map",
    "title": "Hands-on Exercise 1",
    "section": "Plotting choropleth map",
    "text": "Plotting choropleth map\nPlot a map where fill of location is dependent on Dependency column Basic plot:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nAdvance Plot with more elements used:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nDrawing a base map\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\nAdding fill based on Dependency. Add under tm_polygons()\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nIf we choose to use tm_fill, it does not include borders. This is because tm_polygons() is actually tm_fill() + tm_borders()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1) #alpha param controls transparency\n\n\n\n\nOther arguments for tm_borders: col = border colour, lwd = border line width. The default is 1, and lty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands_on_Ex_1.html#data-classification-with-tmap",
    "href": "Hands_on_Ex_1.html#data-classification-with-tmap",
    "title": "Hands-on Exercise 1",
    "section": "Data Classification with Tmap",
    "text": "Data Classification with Tmap\nClassify observations into data ranges or classes\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nQuantile classification Method\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nEqual Data classification Method\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands_on_Ex_1.html#building-choropleth-map-with-self-defined-breaks",
    "href": "Hands_on_Ex_1.html#building-choropleth-map-with-self-defined-breaks",
    "title": "Hands-on Exercise 1",
    "section": "Building Choropleth map with self defined breaks",
    "text": "Building Choropleth map with self defined breaks\nWe can define the breaking points of the classes by adding it into the tm_fill() argument.\nLets try using quantile to break.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nBased on above, we will follow the quantiles to set as our break points\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\nWe can also define our colour scheme by using the palette argument in the tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIf we want to reverse shading (ie darker means lower dependency), wwe add a “-” in front of colour in the palette.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands_on_Ex_1.html#map-layouts",
    "href": "Hands_on_Ex_1.html#map-layouts",
    "title": "Hands-on Exercise 1",
    "section": "Map Layouts",
    "text": "Map Layouts\nWe can add objects into map such as compass, margins, adjust aspects ratio etc\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands_on_Ex_1.html#map-style",
    "href": "Hands_on_Ex_1.html#map-style",
    "title": "Hands-on Exercise 1",
    "section": "Map style",
    "text": "Map style\nUse tmap_style() to change\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\""
  },
  {
    "objectID": "Hands_on_Ex_1.html#adding-objects",
    "href": "Hands_on_Ex_1.html#adding-objects",
    "title": "Hands-on Exercise 1",
    "section": "Adding objects",
    "text": "Adding objects\nEg compass, scale bar, grid\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n##Faucet graphs\nWe can also have multiple small map images in one image\nWe can do this by controlling tm_fill and tm_layout\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nusing tm_facets\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\nMapping based on selection criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this webpage, I am going to share with you my learning journey of Geo-spatial analytics."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello there! I am Gladwin. I am a current postgraduate student with SMU doing analytics.\nI would like to use this site to showcase some of my work in geospatial analytics. In my free time i enjoy exploring outdoors and greenery. I love cycling and all things that involves speed! :D"
  },
  {
    "objectID": "Hands-on_Ex02/handson2.html",
    "href": "Hands-on_Ex02/handson2.html",
    "title": "Handson Excercise 2",
    "section": "",
    "text": "In this webpage, we intend to see if development of a province is evenly distributed. If it is not evenly distributed, we will check for spatial clustering and find out these clusters.\nWe will use GDP per capital as a measure of country’s development.\nSome of the libraries we will be using:\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nLoad packages, if unavailable, download\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/gladwinlam/R Quarto/gladwinlam/ISSS624/Hands-on_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\nWe do so with a comparison between 2 chlropeth maps. One uses\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\nIn here we learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\nFrom here we can determine if spatial arrangement are random or not.\n\n\nWe will need to first construct the spatial weight matrix of the study area. We use the queen method to identify the neighbours of each spatial unit. Below code creates a nb object using the poly2nb() function.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\nAfter identifying neighbours, we need to allocate weights. We will be allocating equal weights in row standardised form. Each entry will be a fraction of 1/(sum of neighbours of that spatial unit).\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nFor future references, style = “W” refers to equal weights. There are other options:\n\n\"W\", \"B\", \"C\", \"U\", \"minmax\" and \"S\"\nB is the basic binary coding\nW is row standardised (sums over all links to n)\nC is globally standardised (sums over all links to n)\nU is equal to C divided by the number of neighbours (sums over all links to unity)\nS is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n)\n\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list.\nThere are 2 types of Global Spatial Autocorrelation statistics. Moran’s I and Geary’s C. We will compute both.\n\n\n\nWe perform statistical testing using Moran’s I.\nH0: Spatial randomness - Observed spatial pattern of values is equally likely as any other pattern. Values at one location does not depend and affect another location.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nIf p value < 0.05, we can reject null hypothesis and conclude there is spatial autocorrelation.\nCaveat!!\nTo use Moran’s I, we assume that data is normaly distributed and random. However if it is not or we are unable to verify this assumption, we should use a monte carlo simulation. We conduct numerous rounds of Moran’s I n times to calculate the moran I statistics and take the average to compare with actual value of Moran’s I statistics.\nP value returned in the pseudo p-value of the test.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nIf p value < 0.05, we can reject null hypothesis and conclude there is spatial autocorrelation.\n\nmean(bperm$res[1:999]) #mean moran i simulated\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\nWe try using a different method known as Geary C. Geary C and Moran I are inversely related.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nIf p value < 0.05, we can reject null hypothesis and conclude there is spatial autocorrelation.\nLikewise we can do permutation test for Geary’s C.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\nExamine patterns are great to examine patterns of spatial autocorrelation. They show how the correlation changes as the distance between pairs increases.\n\n\nWe can define the number of lags (number of neighbours). In here we set order = 6.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nUsing 4 lags in the analysis is not significant.\nI >0: Clustered, observations similar\ni<0: Dispersed, observation dissimilar\n\n\n\nWe repeat the same but using Geary’s C.\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nC<1: Clustered, observations similar\nC>1: Dispersed, observation dissimilar\nIf C=1, observations are arranged randomly over space.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nOnly lag 1,2, 5 are significant.\n\n\n\n\n\nLocal Indicators of Spatial Association (LISA) measures existence of clusters in spatial arrangement. Cluster means that there are regions with statistics higher or lower than chance alone.\nIn this section, we apply appropriate LISA using local Moran’s to detect cluster or outlier of GDP per capita 2012 of Hunan Province, PRC.\n\n\nWe use local moran. We first calculate local moran Ii with given set of weights using, listw, of neighbouring weighting information and zi values\n\n\n\n\n\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\nIi: the local Moran's I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\nNext we plot the value of local moran i (Ii) into choropleth mapping. We append the above data into a spatial polygon dataframe\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nThe above is plotting based on Ii values.\nIf we want to plot by p values, we can use below code and even customise cutoff.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), #define category\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIf want to plot them side by side, we do so again using tmap_arrange()\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\nFor significant spatial areas on the map, we color code it according to its spatial autocorrelation.\nThe first step is to plot the Moran scatter plot. The scatter plot shows the relationship between a chosen attribute and its spatially lagged values at neighbouring location. It helps us identify locations of clusters and outliers.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nHow do we interpret the above?\nThe Moran coefficient is equivalent to the slope of regression line on Moran plot. For each axis, the dotted lines represent the average of that attribute.\nThe x axis represents the value of GDPPC. The Y axis is spatial lag of GDPPC. Spatial lag is a variable that averages the neighbouring values of a location.\nThere are also 4 quadrants created by the dotted lines. Each quadrant can help to identify clusters and outliers.\n\n\n\n\n\nClusters\nTop right hand quadrant represents the HH cluster and bottom left represents the LL cluster. A cluster means the centre spatial unit is positively autocorrelated with its neighbours.\n\nHH cluster means centre spatial unit value is high and neighbouring values are also high\nLL cluster means centre spatial unit value is low and neighbouring values are also low\n\nOutliers\nTop left hand quadrant represents the LH outlier and bottom right represents the HL outlier. Outlier means the centre spatial unit is negatively autocorrelated with its neighbours.\n\nLH outlier means centre spatial unit value is low but neighbouring values are high\nHL cluster means centre spatial unit value is high but neighbouring values are low\n\nIn common practice, we standardise the axis as they might be in different ranges. We subtract values from the mean and divide by its standard deviation. We use scale() function and pipe it to become a vector data type.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\nStandardised Moran Scatterplot\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\nNow, we start preparing a LISA cluster map.\n\n#initialise vector\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nquadrant\n\n [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[39] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[77] 0 0 0 0 0 0 0 0 0 0 0 0\n\n\n\n#Divding high and low regions of attribute\nDV <- hunan$GDPPC - mean(hunan$GDPPC) \nDV\n\n [1]   -737.80682  -3423.80682  10187.19318     68.19318   1149.19318\n [6]   2732.19318  38713.19318  37797.19318  46261.19318 -11643.80682\n[11] -15907.80682   7686.19318   -418.80682 -13118.80682  -6590.80682\n[16]  13246.19318  41301.19318     13.19318   3080.19318  -2493.80682\n[21]    767.19318   1700.19318  -6403.80682  -7378.80682   6441.19318\n[26] -10070.80682  -4056.80682 -10660.80682 -11623.80682  -8992.80682\n[31] -10541.80682   -210.80682  -3886.80682  39852.19318  -6649.80682\n[36] -11006.80682 -14272.80682  -3503.80682 -11164.80682 -14832.80682\n[41]    841.19318  -8335.80682 -12292.80682 -13672.80682 -12890.80682\n[46]  31165.19318   4956.19318  -9841.80682 -11022.80682 -12824.80682\n[51]  -4067.80682   7132.19318 -14650.80682  -6932.80682 -14814.80682\n[56]  -9837.80682  -3093.80682   1853.19318  -8603.80682  -4316.80682\n[61] -11707.80682  -2462.80682  -9978.80682   6008.19318   7492.19318\n[66]  18092.19318  -7152.80682   9578.19318  -5690.80682  -4326.80682\n[71]  17086.19318  -3383.80682  11859.19318   3184.19318  -9780.80682\n[76]   1955.19318  -3766.80682  -4895.80682 -14751.80682  -6058.80682\n[81]  -6671.80682  -5022.80682   8448.19318  64251.19318  -1525.80682\n[86]   2655.19318  -6345.80682  -7236.80682\n\n\n\n#Divding high and low regions of spatially lagged attribute\nC_mI <- localMI[,1] - mean(localMI[,1])\nC_mI \n\n          1           2           3           4           5           6 \n-0.30221844 -0.27487180 -0.31273762 -0.29972750 -0.28593509 -0.33954380 \n          7           8           9          10          11          12 \n 3.06807170  1.25993963  4.12120865 -0.70007255 -0.89235134 -0.42505828 \n         13          14          15          16          17          18 \n-0.30321204 -0.67066658 -0.56918654  0.13335802 -1.06923631 -0.30077984 \n         19          20          21          22          23          24 \n-0.29075358 -0.27268559 -0.30657005 -0.28916925 -0.18268991 -0.15531348 \n         25          26          27          28          29          30 \n-0.52759582 -0.04077981 -0.11805029 -0.08223170  0.16407439 -0.14349603 \n         31          32          33          34          35          36 \n 0.02331158 -0.29202012 -0.19598741 -2.09108455 -0.29146643 -0.18264771 \n         37          38          39          40          41          42 \n 0.43649874 -0.14865072  0.22842506  0.50725511 -0.33340888  0.07509883 \n         43          44          45          46          47          48 \n 0.40928176  0.38852855 -0.24317176  1.82151593 -0.03804219  0.04662022 \n         49          50          51          52          53          54 \n-0.12061915 -0.01608851 -0.21697786 -0.58754861  0.45588117 -0.11898293 \n         55          56          57          58          59          60 \n 0.32989274 -0.32324261 -0.31032890 -0.30054993 -0.01423870 -0.23741635 \n         61          62          63          64          65          66 \n-0.09164795 -0.22015916 -0.30815499 -0.31613873 -0.23484594  1.56962191 \n         67          68          69          70          71          72 \n-1.29038827  0.24450175 -0.22757363 -0.28019095  1.07667831 -0.36977086 \n         73          74          75          76          77          78 \n-0.22199956  0.02789154 -0.05021676 -0.25956120 -0.23878379 -0.55468683 \n         79          80          81          82          83          84 \n 0.29424501 -0.44747359 -0.11285390 -0.23775259 -0.11834556  4.60145154 \n         85          86          87          88 \n-0.28602057 -0.05544925 -0.08654777 -0.05738377 \n\n\n\nsignif <- 0.05\n\nDefining the high-high, low-low, low-high and high-low categories.\n\nquadrant[DV >0 & C_mI>0] <- 4 ##HH      \nquadrant[DV <0 & C_mI<0] <- 1 ##LL \nquadrant[DV <0 & C_mI>0] <- 2 ##LH\nquadrant[DV >0 & C_mI<0] <- 3 ##HL\nquadrant[localMI[,5]>signif] <- 0 # non significant local MI areas bin into class 1\n\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nApart from cluster and outlier detection, we can use LISA to determin hotspot and coldspot.\nHotspot: high values cluster\nColdspot: low values cluster\nAn alternative is using Getis and Ord’s G-statistics. It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nSteps in using Getis and Ord’s G-statistics to identify hotspots or coldspots:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nFor Getis-Ord method, neighbours are defined based on distance instead of contiguity. Distance can be defined with either:\n\nFixed distance weight matrix\nAdaptive distance weight matrix\n\nFixed Distance Weight Matrix\nWe define a fixed distance proximity. Neighbours who are within the proximity are considered neighbours. However in scenarios where the polygon of reference is huge, little or no neighbours might be found as the distance between its cetriod to its border and defined distance proximity might be similar. In this scenario we can use adaptive distance weight matrix.\nAdaptive distance weight matrix\nThe distance is adaptive in the sense we define the proximity based on number of neighbours in interest.\nFirst we derive the centroids.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude) #long lat format\n\nNext, we define the cut off distance.\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords)) \nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE)) #cal centroid to neighbour distance\nsummary(k1dists) # find out min and max of 1 neighbour\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nWe can see furthest distance of 1 polygon centroid to neighbour border is 61.79 km max. We will use this as upperbound as it ensures more than 1 neighbour is found.\n\n\nWe can compute distance weight matrix using dnearneigh(). Next we convert the nb object into spatial weights object.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\nWe use K nearest neighbours.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\n\n\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame and renaming field name of gi values to gstat_fixed by using the code chunk below.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  }
]